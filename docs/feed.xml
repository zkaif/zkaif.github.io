<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-06-27T17:21:11+08:00</updated><id>/feed.xml</id><title type="html">Kaifan&amp;amp;Blog</title><subtitle>null</subtitle><author><name>凯帆</name><email>z@zhoukaifan.com</email></author><entry><title type="html">如何提高业务代码的可读性</title><link href="/2024-12-31/%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8F%AF%E8%AF%BB%E6%80%A7" rel="alternate" type="text/html" title="如何提高业务代码的可读性" /><published>2024-12-31T00:00:00+08:00</published><updated>2024-12-31T00:00:00+08:00</updated><id>/2024-12-31/%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8F%AF%E8%AF%BB%E6%80%A7</id><content type="html" xml:base="/2024-12-31/%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8F%AF%E8%AF%BB%E6%80%A7"><![CDATA[<h3 id="背景">背景</h3>

<p>​	最近看了一些系统的历史代码，直观感受是很乱，不知道原有逻辑再做什么，也不知道新逻辑写在什么地方合适，来来回回还是自己加一个先对独立的逻辑实现需求，这样就更加混乱了。单看某个模块其实代码结构上是有很多用心设计的样子的，所以一直想弄清楚系统为什么变复杂了。目前有了一点阶段性的结论，先整理一下。</p>

<p>​	这里我不再考虑一些概念性的东西，像封装、继承、多态这些，或者是一些基本原则。这些所有人都能很好的说出来并且应用，我从最表面的代码结构来讨论一下。首先系统的代码维护，这是一个工程，我们的目标很明确就是持续迭代。迭代一个系统最基本的是“看得懂”，然后才是“怎么写”。而编写好的代码的判断指标之一就是“可读性”，也就是后人如何“看得懂”。所以本文主要就来讨论业务系统中的代码可读性。最后顺便考虑一下最近说的单元测试。</p>

<h3 id="业务系统的可读性">业务系统的可读性</h3>

<p>​	想要让大家更好的读懂业务代码，我们首先要弄清楚大家的关注点是什么。</p>

<ul>
  <li>业务系统核心是业务流程（注意这里是流程不是某个功能的细节）。</li>
  <li>其次是系统的外部依赖。</li>
  <li>然后会关注一个业务模型（数据）的作用范围</li>
  <li>至于某个功能点的细节只有修改涉及到的时候才会去关注。</li>
</ul>

<p>​	我在举个例子，以我现在正在开发的电梯估价接口来说。如果后续有人要在电梯上开发一个新功能，评估改动的时候肯定会有如下的流程：</p>

<ul>
  <li>得到产品需求，知道业务什么样</li>
  <li>先弄清楚电梯估价接口到底做了什么事情，能不能和业务对应上</li>
  <li>有什么事情是HomePage做的什么，什么是下游提供的</li>
  <li>电梯里面的SkuEntity模型到底什么地方用了，我的改动会不会有什么影响</li>
  <li>如果我要改盒子逻辑，盒子依赖了什么数据，具体怎么实现，有什么细节要关注</li>
</ul>

<p>​	其实可以发现阅读业务代码的时候是有一个关注度的。不同的层级关注的东西不一样，那么顺应这个阅读流程的代码可读性就会很强。</p>

<h4 id="代码举例">代码举例</h4>

<p>​	我们来看下这个application层的代码，这是一个Service中的代码。</p>

<pre><code class="language-Java">public ValuatePriceElevatorEntity productCenterElevatorValuatePrice(ValuateDemandEntity valuateDemandEntity) {
				//异步流程最大时间 product.center.elevator.valuate.price.async.timeout
        //估价开始前先记录时间，这样如果整个接口耗时过大，就不等异步流程返回了。有利于控制整体耗时。所以这是一个兜底的超时控制
        long timeOut = System.currentTimeMillis()+ApolloConfigUtil.getLongProperty(ApolloConstants.PRODUCT_CENTER_ELEVATOR_VALUATE_PRICE_ASYNC_TIMEOUT,4000L);

        List&lt;String&gt; goodsSkuList = operatePlatformService.getElevatorValuatePriceGoodsSkuConfig();
        valuateDemandEntity.setGoodsSkuList(goodsSkuList);

        //查询用户首单信息
        CompletableFuture&lt;PassengerFirstOrderInfoVO&gt; passengerFirstOrderInfoVOCompletableFuture = CompletableFutureUtils.supplyAsyncSimple(() -&gt; {
            return userInfoService.queryPassengerFirstOrderInfo(valuateDemandEntity.getUserNewId());
        }, ThreadPools.getProductCenterElevatorValuatePricePoolInstance());
        //用户选择偏好
        CompletableFuture&lt;PassengerUserPreferencesInfoVO&gt; passengerUserPreferencesInfoVOFuture = CompletableFutureUtils.supplyAsyncSimple(() -&gt; {
            return userInfoService.queryPassengerUserPreferencesInfo(valuateDemandEntity.getUserNewId());
        }, ThreadPools.getProductCenterElevatorValuatePricePoolInstance());

        valuateDemandEntity.fillDefaultValueIfNull();
        //估价模块
        List&lt;SkuPriceInfo&gt; skuPriceInfoList = asyncValuate(valuateDemandEntity);
        ValuatePriceElevatorEntity valuatePriceElevatorEntity = ValuatePriceElevatorFactory.createElevatorEntity(valuateDemandEntity,skuPriceInfoList);

        //获取地图使用什么业务线的配置
        ElevatorValuatePricePathPlanBizConfig elevatorValuatePricePathPlanBizConfig = operatePlatformService.getElevatorValuatePricePathPlanBizConfig(
                valuateDemandEntity.getStartPosition().getCityCode(),
                valuateDemandEntity.getUserNewId());
        valuatePriceElevatorEntity.fillPathPlanByBizCode(elevatorValuatePricePathPlanBizConfig.getPathPlanBizCodeEnum());
        valuatePriceElevatorEntity.fillDemandInfo();

        //异步查询举手率
        List&lt;String&gt; skuCodeList = valuatePriceElevatorEntity.parseAllSkuCodeList();
        CompletableFuture&lt;List&lt;TaxiBottomSkuHandUpRateInfo&gt;&gt; taxiBottomSkuHandUprRateCompletableFuture = CompletableFutureUtils.supplyAsyncSimple(() -&gt; {
            return userInfoService.getTaxiBottomSkuHandUprRate(
                    valuateDemandEntity.getStartPosition().getCityCode(),
                    Long.valueOf(valuateDemandEntity.getDistance()),
                    skuCodeList);
        }, ThreadPools.getProductCenterElevatorValuatePricePoolInstance());
        //价敏系数
        CompletableFuture&lt;String&gt; elasticityScoreCompletableFuture = CompletableFutureUtils.supplyAsyncSimple(() -&gt; {
            return extractElasticityScore(valuateDemandEntity, new ArrayList&lt;&gt;(skuPriceInfoList));
        }, ThreadPools.getProductCenterElevatorValuatePricePoolInstance());

        //品类过滤配置
        ElevatorValuatePriceSkuFilterConfig elevatorValuatePriceSkuFilterConfig = operatePlatformService.getElevatorValuatePriceSkuFilterConfig(
                valuateDemandEntity.getStartPosition().getCityCode(),
                valuateDemandEntity.getDistance(),
                valuateDemandEntity.getStartPlanStartTime(),
                valuateDemandEntity.getInstantType(),
                valuateDemandEntity.isCrossCity(),
                valuateDemandEntity.getUserNewId());
        if (elevatorValuatePriceSkuFilterConfig!=null) {
            valuatePriceElevatorEntity.filterSkuBySkuList(elevatorValuatePriceSkuFilterConfig.getFilterSkuList());
        }

        //品类卡片配置
        Map&lt;String,ElevatorValuatePriceSkuCardConfig&gt; elevatorValuatePriceSkuCardConfigMap = operatePlatformService.getElevatorValuatePriceSkuCardConfigMap(
                valuateDemandEntity.getUserNewId(),
                valuateDemandEntity.getStartPosition().getCityCode(),
                valuatePriceElevatorEntity.parseAllSkuCodeList());

        //运力不可选状态，归类到不可选模块
        ProductCenterValuatePriceTimeConfig productCenterValuatePriceTimeConfig = operatePlatformService.getProductCenterValuatePriceTimeConfig(
                valuateDemandEntity.getUserNewId(),
                valuateDemandEntity.getStartPosition().getCityCode(),
                valuateDemandEntity.getEndPosition().getCityCode());
        valuatePriceElevatorEntity.groupSkuForUnavailable(productCenterValuatePriceTimeConfig,elevatorValuatePriceSkuCardConfigMap);

        //附近无车聚类
        ElevatorValuatePriceSkuNoCarConfig elevatorValuatePriceSkuNoCarConfig = operatePlatformService.getElevatorValuatePriceSkuNoCarConfig(
                valuateDemandEntity.getStartPosition().getCityCode(),
                valuateDemandEntity.getDistance(),
                valuateDemandEntity.getStartPlanStartTime(),
                valuateDemandEntity.getUserNewId());
        if (elevatorValuatePriceSkuNoCarConfig!=null) {
            List&lt;TaxiBottomSkuHandUpRateInfo&gt; taxiBottomSkuHandUprRate = CompletableFutureUtils.getTimeOutForTime(taxiBottomSkuHandUprRateCompletableFuture, new ArrayList&lt;&gt;(), timeOut);
            valuatePriceElevatorEntity.groupSkuForNoCar(elevatorValuatePriceSkuNoCarConfig,taxiBottomSkuHandUprRate,elevatorValuatePriceSkuCardConfigMap);
        }
        //品类正常聚类成电梯，包含盒子逻辑
        PassengerFirstOrderInfoVO passengerFirstOrderInfoVO = CompletableFutureUtils.getTimeOutForTime(passengerFirstOrderInfoVOCompletableFuture, PassengerFirstOrderInfoVO.defaultVO, timeOut);
        Boolean phFirstOrder = passengerFirstOrderInfoVO.getPhFirstOrder();
        List&lt;ElevatorValuatePriceSkuGroupConfig&gt; elevatorValuatePriceSkuGroupConfigList = operatePlatformService.getElevatorValuatePriceSkuGroupConfig(
                valuateDemandEntity.getStartPosition().getCityCode(),
                valuateDemandEntity.getDistance(),
                valuateDemandEntity.getStartPlanStartTime(),
                valuateDemandEntity.getInstantType(),
                phFirstOrder,
                valuateDemandEntity.isCrossCity(),
                valuateDemandEntity.getAdSource(),
                valuateDemandEntity.getUserNewId());
        if (CollectionUtils.isNotEmpty(elevatorValuatePriceSkuGroupConfigList)) {
            valuatePriceElevatorEntity.groupAllSkuAndSkuBox(elevatorValuatePriceSkuGroupConfigList,elevatorValuatePriceSkuCardConfigMap);
        }
        //剩余的品类聚类成其他模块
        valuatePriceElevatorEntity.groupOtherSku(elevatorValuatePriceSkuCardConfigMap);

        //将电梯进行排序
        valuatePriceElevatorEntity.sort();
}
</code></pre>

<p>这个逻辑其实挺长的，有小一百行了。但是仔细看一遍后是可以快速理解的。原因如下</p>

<ul>
  <li>
    <p>电梯相关的业务流程已经全部表达清楚了</p>
  </li>
  <li>
    <p>功能点的执行都是在Entity内部如valuatePriceElevatorEntity.groupOtherSku，Entity内部不会有远程调用，每个功能点的数据依赖都是非常明确的</p>
  </li>
  <li>
    <p>外部的数据来源，配置、下游服务、依赖的领域服务（看注释），都是非常明确的。外部依赖的入参也是明确的基本字段。</p>

    <ul>
      <li>
        <blockquote>
          <p>注释：领域服务不在本文中说明 ，这是DDD的概念，这是用来封装复用的手段，需要抽象逻辑，不是存粹用来简化service层代码的。</p>
        </blockquote>
      </li>
    </ul>
  </li>
  <li>
    <p>数据使用范围如首单phFirstOrder变量被什么功能用了一眼就能看清楚，怎么来的也很清楚。并且使用范围不会逃出这个方法。被Entity使用后由于Entity没有外部调用是纯粹的功能点，后续也好维护。</p>
  </li>
</ul>

<h4 id="代码反例">代码反例</h4>

<p>这里我再修改一下代码，大家看下对可读性的影响</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">ValuatePriceElevatorEntity</span> <span class="nf">productCenterElevatorValuatePrice</span><span class="o">(</span><span class="nc">ValuateDemandEntity</span> <span class="n">valuateDemandEntity</span><span class="o">)</span> <span class="o">{</span>
  <span class="o">...............</span>
        <span class="c1">//附近无车聚类</span>
        <span class="nc">ElevatorValuatePriceSkuNoCarConfig</span> <span class="n">elevatorValuatePriceSkuNoCarConfig</span> <span class="o">=</span> <span class="n">operatePlatformService</span><span class="o">.</span><span class="na">getElevatorValuatePriceSkuNoCarConfig</span><span class="o">(</span><span class="n">valuateDemandEntity</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">elevatorValuatePriceSkuNoCarConfig</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">TaxiBottomSkuHandUpRateInfo</span><span class="o">&gt;</span> <span class="n">taxiBottomSkuHandUprRate</span> <span class="o">=</span> <span class="nc">CompletableFutureUtils</span><span class="o">.</span><span class="na">getTimeOutForTime</span><span class="o">(</span><span class="n">taxiBottomSkuHandUprRateCompletableFuture</span><span class="o">,</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(),</span> <span class="n">timeOut</span><span class="o">);</span>
            <span class="n">valuatePriceElevatorEntity</span><span class="o">.</span><span class="na">groupSkuForNoCar</span><span class="o">(</span><span class="n">elevatorValuatePriceSkuNoCarConfig</span><span class="o">,</span><span class="n">taxiBottomSkuHandUprRate</span><span class="o">,</span><span class="n">elevatorValuatePriceSkuCardConfigMap</span><span class="o">);</span>
        <span class="o">}</span>
  			<span class="n">groupSku</span><span class="o">(</span><span class="nc">ValuateDemandEntity</span> <span class="n">valuateDemandEntity</span><span class="o">,</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">ElevatorValuatePriceSkuCardConfig</span><span class="o">&gt;</span> <span class="n">elevatorValuatePriceSkuCardConfigMap</span><span class="o">);</span>
        <span class="c1">//将电梯进行排序</span>
        <span class="n">valuatePriceElevatorEntity</span><span class="o">.</span><span class="na">sort</span><span class="o">();</span>
<span class="o">}</span>


<span class="kd">public</span> <span class="nc">ValuatePriceElevatorEntity</span> <span class="nf">groupSku</span><span class="o">(</span><span class="nc">ValuatePriceElevatorEntity</span> <span class="n">valuatePriceElevatorEntity</span><span class="o">,</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">ElevatorValuatePriceSkuGroupConfig</span><span class="o">&gt;</span> <span class="n">elevatorValuatePriceSkuGroupConfigList</span><span class="o">,</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">ElevatorValuatePriceSkuCardConfig</span><span class="o">&gt;</span> <span class="n">elevatorValuatePriceSkuCardConfigMap</span><span class="o">)</span> <span class="o">{</span>
          <span class="n">groupAllSkuAndSkuBox</span><span class="o">(</span><span class="n">valuatePriceElevatorEntity</span><span class="o">,</span><span class="n">elevatorValuatePriceSkuGroupConfigList</span><span class="o">,</span><span class="n">elevatorValuatePriceSkuCardConfigMap</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">//剩余的品类聚类成其他模块</span>
        <span class="n">groupOtherSku</span><span class="o">(</span><span class="n">valuatePriceElevatorEntity</span><span class="err">，</span><span class="n">elevatorValuatePriceSkuCardConfigMap</span><span class="o">);</span>
<span class="o">}</span>


<span class="kd">public</span> <span class="nc">ValuatePriceElevatorEntity</span> <span class="nf">groupAllSkuAndSkuBox</span><span class="o">(</span><span class="nc">ValuatePriceElevatorEntity</span> <span class="n">valuatePriceElevatorEntity</span><span class="o">,</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">ElevatorValuatePriceSkuGroupConfig</span><span class="o">&gt;</span> <span class="n">elevatorValuatePriceSkuGroupConfigList</span><span class="o">,</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">ElevatorValuatePriceSkuCardConfig</span><span class="o">&gt;</span> <span class="n">elevatorValuatePriceSkuCardConfigMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//品类正常聚类成电梯，包含盒子逻辑</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ElevatorValuatePriceSkuGroupConfig</span><span class="o">&gt;</span> <span class="n">elevatorValuatePriceSkuGroupConfigList</span> <span class="o">=</span> <span class="n">operatePlatformService</span><span class="o">.</span><span class="na">getElevatorValuatePriceSkuGroupConfig</span><span class="o">(</span><span class="n">valuateDemandEntity</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">CollectionUtils</span><span class="o">.</span><span class="na">isNotEmpty</span><span class="o">(</span><span class="n">elevatorValuatePriceSkuGroupConfigList</span><span class="o">))</span> <span class="o">{</span>
  <span class="c1">//聚类 逻辑直接在service中实现</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="nc">ValuatePriceElevatorEntity</span> <span class="nf">groupOtherSku</span><span class="o">(</span><span class="nc">ValuateDemandEntity</span> <span class="n">valuateDemandEntity</span><span class="o">,</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">ElevatorValuatePriceSkuCardConfig</span><span class="o">&gt;</span> <span class="n">elevatorValuatePriceSkuCardConfigMap</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">//剩余的品类聚类成其他模块</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//operatePlatformService</span>
<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ElevatorValuatePriceSkuGroupConfig</span><span class="o">&gt;</span> <span class="nf">getElevatorValuatePriceSkuGroupConfig</span><span class="o">(</span><span class="nc">ValuateDemandEntity</span> <span class="n">valuateDemandEntity</span><span class="o">){</span>
  <span class="c1">//mapStruct转换</span>
  			<span class="nc">FeatureGetParam</span> <span class="n">featureGetParam</span> <span class="o">=</span> <span class="n">valuateDemandEntityToParam</span><span class="o">(</span><span class="n">valuateDemandEntity</span><span class="o">)</span>
        <span class="nc">Boolean</span> <span class="n">phFirstOrder</span> <span class="o">=</span> <span class="n">aiBrainQuadFeatureFacade</span><span class="o">.</span><span class="na">getFirstOrderFeature</span><span class="o">(</span><span class="n">featureGetParam</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ElevatorValuatePriceSkuGroupConfig</span><span class="o">&gt;</span> <span class="n">configList</span> <span class="o">=</span> <span class="nc">PHRuleSDK</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="no">USER_GROWTH</span><span class="o">)</span>
                <span class="o">.</span><span class="na">getObjectList</span><span class="o">(</span><span class="nc">Consts</span><span class="o">.</span><span class="na">OperationPlatform</span><span class="o">.</span><span class="na">ELEVATOR_VALUATE_SKU_GROUP_CONFIG</span><span class="o">,</span>
                        <span class="nc">ElevatorValuatePriceSkuGroupConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
                        <span class="n">cityCode</span><span class="o">,</span>
                        <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(),</span>
                        <span class="n">userNewId</span><span class="o">,</span>
                        <span class="kc">null</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(</span><span class="nc">CollectionUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">configList</span><span class="o">)){</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ElevatorValuatePriceSkuGroupConfig</span><span class="o">&gt;</span> <span class="n">configs</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">ElevatorValuatePriceSkuGroupConfig</span> <span class="nl">config:</span><span class="n">configList</span><span class="o">){</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">usable</span><span class="o">(</span><span class="n">distance</span><span class="o">,</span><span class="n">planStartTime</span><span class="o">,</span><span class="n">instantType</span><span class="o">,</span><span class="n">adSource</span><span class="o">,</span><span class="n">crossCity</span><span class="o">,</span><span class="n">phFirstOrder</span><span class="o">)){</span>
                <span class="n">configs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">configs</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>初步看下来productCenterElevatorValuatePrice中的逻辑一样简洁，但是评估需求改动的时候通常不敢下定论</p>

<ul>
  <li>getElevatorValuatePriceSkuGroupConfig的依赖返回很大，里面还有远程调用。</li>
  <li>featureGetParam的转换逻辑也要确认才能明确数据的依赖范围</li>
  <li>groupSku也是一个service，可能有外部依赖，并且直接依赖了Entity</li>
  <li>再下层的groupAllSkuAndSkuBox也是一个service</li>
</ul>

<p>修改后的代码或许再编写的时候不会有什么问题，每个功能点分了模块，都依赖entity。但是在后续评估改动范围和阅读的时候存在了很多困扰，另外随着迭代调用深度会加大，数据的使用范围会难以控制，且外部调用进一步隐藏难以发现。最后只能询问谁熟悉这块逻辑。其实熟悉的不是业务，而是代码结构和数据的作用范围，业务通常用语言能解释。但是代码中的一些细节和其导致的业务默认行为是难以理解的。</p>

<h3 id="业务代码的单元测试">业务代码的单元测试</h3>

<p>​	因为目前在推进单元测试，所以这里顺便从代码结构的角度说一下单元测试的落地。我们分别从上述的例子1和2来编写单元测试看一下效果。</p>

<h4 id="例子1单元测试">例子1单元测试</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">filterSkuBySkuListTest</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">ValuatePriceElevatorEntity</span> <span class="n">valuatePriceElevatorEntity</span> <span class="o">=</span> <span class="n">mock数据</span>

        <span class="nc">ElevatorValuatePriceSkuFilterConfig</span> <span class="n">elevatorValuatePriceSkuFilterConfig</span> <span class="o">=</span> <span class="n">mock数据</span>

        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">ElevatorValuatePriceSkuCardConfig</span><span class="o">&gt;</span> <span class="n">elevatorValuatePriceSkuCardConfigMap</span> <span class="o">=</span> <span class="n">mock数据</span>
        
       <span class="c1">//执行单测</span>
          <span class="n">valuatePriceElevatorEntity</span><span class="o">.</span><span class="na">groupAllSkuAndSkuBox</span><span class="o">(</span><span class="n">elevatorValuatePriceSkuGroupConfigList</span><span class="o">,</span><span class="n">elevatorValuatePriceSkuCardConfigMap</span><span class="o">);</span>
      
      <span class="c1">//校验结果valuatePriceElevatorEntity</span>
    <span class="o">}</span>
</code></pre></div></div>

<h4 id="例子2单元测试">例子2单元测试</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">filterSkuBySkuListTest</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">ValuatePriceElevatorEntity</span> <span class="n">valuatePriceElevatorEntity</span> <span class="o">=</span> <span class="n">mock数据</span>
          
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">ElevatorValuatePriceSkuCardConfig</span><span class="o">&gt;</span> <span class="n">elevatorValuatePriceSkuCardConfigMap</span> <span class="o">=</span> <span class="n">mock数据</span>
          
          <span class="c1">//groupAllSkuAndSkuBox中有外部依赖，需要mock</span>
        <span class="nc">MockOperatePlatformService</span> <span class="n">mockOperatePlatformService</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MockOperatePlatformService</span><span class="o">();</span>
        <span class="n">service</span><span class="o">.</span><span class="na">setOperatePlatformService</span><span class="o">(</span><span class="n">mockOperatePlatformService</span><span class="o">);</span>
      
       <span class="c1">//执行单测</span>
       <span class="n">service</span><span class="o">.</span><span class="na">groupAllSkuAndSkuBox</span><span class="o">(</span><span class="n">valuatePriceElevatorEntity</span><span class="err">，</span><span class="n">elevatorValuatePriceSkuCardConfigMap</span><span class="o">);</span>
     
      
      <span class="c1">//校验结果valuatePriceElevatorEntity</span>
    <span class="o">}</span>

<span class="kd">class</span> <span class="nc">MockOperatePlatformService</span> <span class="kd">extends</span> <span class="nc">OperatePlatformService</span> <span class="o">{</span>
  <span class="c1">//operatePlatformService</span>
  <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ElevatorValuatePriceSkuGroupConfig</span><span class="o">&gt;</span> <span class="nf">getElevatorValuatePriceSkuGroupConfig</span><span class="o">(</span><span class="nc">ValuateDemandEntity</span> <span class="n">valuateDemandEntity</span><span class="o">){</span>
    <span class="c1">//mock数据</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>​	这里可以看到例子2的单元测试的成本是更高的，如果有大量的外部依赖，或者调用链路太深，单元测试难以执行。另外OperatePlatformService如果出现改动，对单元测试影响就更大，例子1依赖的是config实体，他的改动可能性远比service方法定义的改动低的多。</p>

<p>​	业务中变动的逻辑主要还是功能点，复杂逻辑和业务细节也是功能点，所以单元测试也应该集中在功能点的测试。那么相对独立且明确数据依赖的功能点对单元测试是有利的。</p>

<h3 id="总结">总结</h3>

<p>​	其实总结一下，业务代码可读性的核心在于编码时考虑阅读业务代码的思路，把关注点在代码的第一层级中直接表现出来。代码的可读性要多考虑系统的目的，如果业务系统偏向中台或者平台，那这种流程式的代码结构是否适用有待讨论。而对于中间件或者工具，其标准也是不同的，本文主要讨论业务系统的可读性。</p>

<p>​	另外关于设计模式对业务代码可读性的影响也需要进一步讨论，有时候为了扩展性导致核心业务流程被隐藏，是否是值得的。</p>

<p>​	个人认为业务代码需要足够简单，流程化。然后将数据与使用数据的业务功能归到一起，对于后续功能的扩展之前修改对应代码即可，只要业务代码足够简洁明了，并不需要过多的扩展性设计。核心在于更清晰的表达业务，和限定数据使用范围。</p>]]></content><author><name>凯帆</name><email>z@zhoukaifan.com</email></author><category term="Java" /><category term="代码结构" /><summary type="html"><![CDATA[背景]]></summary></entry><entry><title type="html">DDD在中台中的实践</title><link href="/2021-06-05/DDD%E5%9C%A8%E4%B8%AD%E5%8F%B0%E4%B8%AD%E7%9A%84%E5%AE%9E%E8%B7%B5" rel="alternate" type="text/html" title="DDD在中台中的实践" /><published>2021-06-05T00:00:00+08:00</published><updated>2021-06-05T00:00:00+08:00</updated><id>/2021-06-05/DDD%E5%9C%A8%E4%B8%AD%E5%8F%B0%E4%B8%AD%E7%9A%84%E5%AE%9E%E8%B7%B5</id><content type="html" xml:base="/2021-06-05/DDD%E5%9C%A8%E4%B8%AD%E5%8F%B0%E4%B8%AD%E7%9A%84%E5%AE%9E%E8%B7%B5"><![CDATA[<h3 id="业务至上">业务至上</h3>

<ul>
  <li>业务系统的根本是业务。软件的核心是解决领域内相关问题的能力，实现方式只是一种工具。DDD是为了应对复杂领域而存在的。</li>
  <li>技术解决不了业务问题，技术只能解决复杂业务附加的技术性问题，不要试图用技术去解决领域问题。</li>
  <li>面向对象将程序设计人员从应对复杂的数据存储计算中解放出来，从而可以专注于业务模型设计。用面向对象的思维方式去抽象领域并且建立模型是DDD的本质。</li>
  <li>DDD是面向对象思想的实践，最基础的核心仍然是面向对象。</li>
</ul>

<h3 id="四层架构">四层架构</h3>

<p><img src="../img/657268921123.jpg" alt="" /></p>

<ul>
  <li>合理的分层可以让开发人员更加专注于领域本身</li>
  <li>interface剥离走上游用户的交互，避免用户交互体验影响到领域模型</li>
  <li>application存放业务流程，负责编排领域模型，负责发问下层回答，将domain层的业务组合成业务，避免domain层过多关注业务逻辑的执行过程</li>
  <li>domain层是一切的核心，领域的模型被放于此处，domain层关注一个领域如何设计，关注领域的行为和能力，关注领域的关联，但是不关注具体业务流程，它可以定义行为，可以实现也可以不实现</li>
  <li>infrastructure层是偏向技术的基础设施层，它承包一切技术性实现，它可以实现domain层的定义，如domain层定义了领域的资源库，infrastructure层可以提供一个mysql实现和一个redis实现。</li>
</ul>

<p>第一层避免与领域无关的为了交互做妥协的出入参等代码污染领域代码</p>

<p>最后一层避免业务代码与某个具体技术强耦合，让领域层代码更专注领域问题</p>

<p>业务流程与领域模型的拆分，领域不等同于业务，application层把领域编排成业务，但是其本身无业务逻辑，这样可以避免领域模型的设计被强耦合到具体的业务上丧失了可扩展性。领域层应该是存粹的模型和其行为能力的定义与实现。</p>

<h3 id="端口适配器架构">端口适配器架构</h3>

<blockquote>
  <p>让用户、程序、自动化测试和批处理脚本可以平等地驱动应用，让应用的开发和测试可以独立于其最终运行的设备和数据库。——Alistair Cockburn 2005</p>
</blockquote>

<p>*注：图片来源于网络</p>

<p><img src="../img/6427541378419.png" alt="图片来源于以下文章" /></p>

<p>大家可以阅读这篇文章了解端口适配器<a href="https://herbertograca.com/2017/09/14/ports-adapters-architecture/">https://herbertograca.com/2017/09/14/ports-adapters-architecture/</a></p>

<p>端口适配器的本质就是依赖接口不依赖实现</p>

<p>所以我们可以把四层架构演变成以下架构——依赖倒置</p>

<p><img src="../img/743872873892.jpg" alt="" /></p>

<h3 id="中台与ddd">中台与DDD</h3>

<p>业务中台的核心思想在于抽象沉淀不同业务中的共同点，以此降低新业务的开发成本。使用DDD指导中台建设是一个非常有效的方式。</p>

<p>DDD的核心在于关注领域模型和领域能力的建设，然后将其组合编排成业务，所以DDD的domain层的建设相对的中台有着天然的重合。</p>

<p>另外对于中台建设中通常无法避免链路编排与扩展点，而对于DDD中application层的定位我们可以结合链路编排来建设application层的能力，而扩展点则可以用于扩展domain层的领域能力，或者用于抉择application层的流程。</p>

<p>在中台服务的拆分中每个中台服务均会对外提供一个能力范围，每个中台应用会应对多种复杂业务场景设计出一个通用抽象的领域模型，但是实际上在某一业务中对于中台应用提供的能力会有自己的视角，这种情况下可以使用上下文映射的方式，在自己的系统中设计一个中台某个领域在本系统中的领域模型的映射，异常更好的关注自己所关心的部分。这种方式在交易这种串接上下的系统中特别有效。</p>

<p><img src="../img/837248681291123123.png" alt="" /></p>

<h3 id="反腐层">反腐层</h3>

<p>上下文映射的实现通常无法避免领域模型的转换，引入反腐层是一个非常优秀的设计，我们可以在基础设施层屏蔽掉模型的差异，让领域层更加专注领域本身。用户接口层也可以引入反腐层进行向上反腐。</p>

<p><img src="../img/743874878293.png" alt="" /></p>

<h3 id="cqrs架构">CQRS架构</h3>

<p>*注：图片来源于网络</p>

<p><img src="../img/CQRS13.jpeg" alt="" /></p>

<p>我不行过多的解释CQRS，大家可以自行查阅相关资料，我只对于其中提出的模型分离感兴趣，我更倾向于在足够复杂的场景下把用于处理业务的模型与用于查询的模型分离，以得到一个更加存粹用于处理业务的领域模型，这并不意味着读写分离，业务模型仍然会用于查询，但是仅限于主键查询并返回只关心本领域的业务模型数据。</p>

<h3 id="业务模型与查询模型分离">业务模型与查询模型分离</h3>

<p>在CQRS带来的思考后，我结合数据搜索中心的需求，将领域中的一切复杂查询剥离到搜索服务中</p>

<p><img src="../img/7438723289e839.png" alt="image-20210605143451816" /></p>

<p>图中左边部分是原有的业务系统去除掉复杂查询（如列表查询，各种字段搜索排序，范围筛选）后的剩余部分。右边是一个专门用于搜索的领域模型，你甚至可以设计多种模型应对各种复杂的查询。</p>

<p>但是这并不是像CQRS那样使用command来处理业务，原有的业务系统的处理方式不会被改变。</p>

<h3 id="存粹基于主键的业务设想">存粹基于主键的业务设想</h3>

<p>实际上在面向对象思想中业务的执行都在一个或者多个对象中进行，所以对于一切业务均可以使用业务主键进行操作。以此避免业务数据库的复杂索引的建立，我们只用解决如何找到这部分对象即可，通过搜索服务是一个方式（你的搜索服务必须足够可靠）如：用户页面查询到订单列表后进入详情页，点击退款。这时订单id就是用户通过搜索服务查询得到的。另外一种异步业务的处理也可以参考我之前的文章<a href="https://www.zhoukaifan.com/2021-01-19/业务事件中心设计">业务事件中心设计</a>。</p>]]></content><author><name>凯帆</name><email>z@zhoukaifan.com</email></author><category term="DDD" /><category term="业务架构" /><summary type="html"><![CDATA[业务至上]]></summary></entry><entry><title type="html">Java网络IO</title><link href="/2021-02-25/Java%E7%BD%91%E7%BB%9CIO" rel="alternate" type="text/html" title="Java网络IO" /><published>2021-02-25T00:00:00+08:00</published><updated>2021-02-25T00:00:00+08:00</updated><id>/2021-02-25/Java%E7%BD%91%E7%BB%9CIO</id><content type="html" xml:base="/2021-02-25/Java%E7%BD%91%E7%BB%9CIO"><![CDATA[<p>本文只考虑Linux系统</p>

<h3 id="传统io">传统IO</h3>

<ul>
  <li>ServerSocket</li>
  <li>Socket</li>
</ul>

<p>首先通常c语言中访问网络</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">//创建socket描述符</span>
    <span class="kt">int</span> <span class="n">socketfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="n">IPPROTO_TCP</span><span class="p">);</span>
    <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">servaddr</span><span class="p">;</span>
    <span class="n">bzero</span><span class="p">(</span><span class="o">&amp;</span><span class="n">servaddr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">servaddr</span><span class="p">));</span>
    <span class="n">servaddr</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
    <span class="n">servaddr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">inet_addr</span><span class="p">(</span><span class="s">"127.0.0.1"</span><span class="p">);</span>
    <span class="n">servaddr</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="mi">8840</span><span class="p">);</span>
  <span class="c1">//绑定地址</span>
    <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">bind</span><span class="p">(</span><span class="n">socketfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">servaddr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">servaddr</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"listen error"</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="c1">//开启监听</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">listen</span><span class="p">(</span><span class="n">socketfd</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"listen error"</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">clientAddr</span><span class="p">;</span>
    <span class="n">socklen_t</span> <span class="n">clientAddrLen</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">clientAddr</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">){</span>
      <span class="c1">//接收连接请求，其实操作系统会把3次握手完成后才返回给我们</span>
        <span class="kt">int</span> <span class="n">clientFd</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">socketfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">clientAddr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">clientAddrLen</span><span class="p">);</span>
      <span class="c1">//创建一个新的进程去处理连接</span>
        <span class="n">pid_t</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
      <span class="c1">//子进程进入这个循环体</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">pid</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">char</span> <span class="n">data</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">};</span>
            <span class="n">read</span><span class="p">(</span><span class="n">clientFd</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
            <span class="n">write</span><span class="p">(</span><span class="n">clientFd</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="sc">'q'</span><span class="p">){</span>
                <span class="n">printf</span><span class="p">(</span><span class="s">"close(clientFd); </span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
                <span class="n">close</span><span class="p">(</span><span class="n">clientFd</span><span class="p">);</span>
                <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
      <span class="c1">//父进程直接关闭这个链接，其实只是关闭了一个进程和描述符的联系，只要还有一个进程和该描述符有关联描述符就不会关闭</span>
        <span class="n">close</span><span class="p">(</span><span class="n">clientFd</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>所以在使用c语言直接使用系统调用提供一个服务时需要如下几个步骤</p>

<ul>
  <li>socket 创建一个socket</li>
  <li>bind 为一个socket绑定地址</li>
  <li>listen 开始监听 服务这时已经启动</li>
  <li>accept 获取客户端的链接 会返回一个新的描述符号，如果是阻塞模式下这里会阻塞到有新的请求</li>
  <li>read&amp;write 使用新的描述符进行操作（也可以使用recv&amp;send）</li>
</ul>

<p>现在我们回到Java代码中实现一个类似的功能我们主要在系统调用的层面去看这些类的实现原理，不会过多的去关系jdk的实现细节</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//创建一个ServerSocket对象不会做任何系统调用</span>
<span class="nc">ServerSocket</span> <span class="n">serverSocket</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ServerSocket</span><span class="o">();</span>
<span class="c1">//这里回做很多事情socket  bind  listen  这行代码执行后服务就已经启动了</span>
<span class="n">serverSocket</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="k">new</span> <span class="nc">InetSocketAddress</span><span class="o">(</span><span class="s">"127.0.0.1"</span><span class="o">,</span><span class="mi">36352</span><span class="o">));</span>
<span class="c1">//获取一个连接 accept系统调用</span>
<span class="nc">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">serverSocket</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
<span class="c1">//使用新的链接进行读写操作</span>
<span class="n">socket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">().</span><span class="na">read</span><span class="o">();</span>
<span class="n">socket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">().</span><span class="na">write</span><span class="o">();</span>
</code></pre></div></div>

<p>先来看一下bind方法</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">bind</span><span class="o">(</span><span class="nc">SocketAddress</span> <span class="n">endpoint</span><span class="o">,</span> <span class="kt">int</span> <span class="n">backlog</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">isClosed</span><span class="o">())</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">SocketException</span><span class="o">(</span><span class="s">"Socket is closed"</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">oldImpl</span> <span class="o">&amp;&amp;</span> <span class="n">isBound</span><span class="o">())</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">SocketException</span><span class="o">(</span><span class="s">"Already bound"</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">endpoint</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
        <span class="n">endpoint</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">InetSocketAddress</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(!(</span><span class="n">endpoint</span> <span class="k">instanceof</span> <span class="nc">InetSocketAddress</span><span class="o">))</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"Unsupported address type"</span><span class="o">);</span>
    <span class="nc">InetSocketAddress</span> <span class="n">epoint</span> <span class="o">=</span> <span class="o">(</span><span class="nc">InetSocketAddress</span><span class="o">)</span> <span class="n">endpoint</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">epoint</span><span class="o">.</span><span class="na">isUnresolved</span><span class="o">())</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">SocketException</span><span class="o">(</span><span class="s">"Unresolved address"</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">backlog</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span>
        <span class="n">backlog</span> <span class="o">=</span> <span class="mi">50</span><span class="o">;</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="nc">SecurityManager</span> <span class="n">security</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">getSecurityManager</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">security</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
            <span class="n">security</span><span class="o">.</span><span class="na">checkListen</span><span class="o">(</span><span class="n">epoint</span><span class="o">.</span><span class="na">getPort</span><span class="o">());</span>
      <span class="c1">//功能实现都在这里2行</span>
      <span class="c1">//第一次调用getImpl()回去调用socket系统调用创建socket</span>
      <span class="c1">//bind直接对应bind系统调用</span>
        <span class="n">getImpl</span><span class="o">().</span><span class="na">bind</span><span class="o">(</span><span class="n">epoint</span><span class="o">.</span><span class="na">getAddress</span><span class="o">(),</span> <span class="n">epoint</span><span class="o">.</span><span class="na">getPort</span><span class="o">());</span>
      <span class="c1">//listen直接对应listen系统调用</span>
        <span class="n">getImpl</span><span class="o">().</span><span class="na">listen</span><span class="o">(</span><span class="n">backlog</span><span class="o">);</span>
        <span class="n">bound</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">SecurityException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">bound</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">bound</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nc">SocketImpl</span> <span class="nf">getImpl</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">SocketException</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">created</span><span class="o">)</span>
        <span class="n">createImpl</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">impl</span><span class="o">;</span>
<span class="o">}</span>
<span class="kt">void</span> <span class="nf">createImpl</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">SocketException</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">impl</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
        <span class="n">setImpl</span><span class="o">();</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="n">impl</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="n">created</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">SocketException</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="cm">/**
* AbstractPlainSocketImpl
*/</span>
<span class="kd">protected</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">create</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">stream</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">stream</span> <span class="o">=</span> <span class="n">stream</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">stream</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ResourceManager</span><span class="o">.</span><span class="na">beforeUdpCreate</span><span class="o">();</span>
        <span class="c1">// only create the fd after we know we will be able to create the socket</span>
        <span class="n">fd</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileDescriptor</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
  				<span class="c1">//在PlainSocketImpl类中声明为native方法 </span>
            <span class="n">socketCreate</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
            <span class="nc">SocketCleanable</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ioe</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">ResourceManager</span><span class="o">.</span><span class="na">afterUdpClose</span><span class="o">();</span>
            <span class="n">fd</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="k">throw</span> <span class="n">ioe</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="n">fd</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileDescriptor</span><span class="o">();</span>
  		<span class="c1">//在PlainSocketImpl类中声明为native方法 </span>
        <span class="n">socketCreate</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="nc">SocketCleanable</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">socket</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
        <span class="n">socket</span><span class="o">.</span><span class="na">setCreated</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">serverSocket</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
        <span class="n">serverSocket</span><span class="o">.</span><span class="na">setCreated</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">protected</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">bind</span><span class="o">(</span><span class="nc">InetAddress</span> <span class="n">address</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lport</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="nc">IOException</span>
<span class="o">{</span>
    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">fdLock</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">closePending</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">socket</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">socket</span><span class="o">.</span><span class="na">isBound</span><span class="o">()))</span> <span class="o">{</span>
            <span class="nc">NetHooks</span><span class="o">.</span><span class="na">beforeTcpBind</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="n">address</span><span class="o">,</span> <span class="n">lport</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
  <span class="c1">//在PlainSocketImpl类中声明为native方法 </span>
    <span class="n">socketBind</span><span class="o">(</span><span class="n">address</span><span class="o">,</span> <span class="n">lport</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">socket</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
        <span class="n">socket</span><span class="o">.</span><span class="na">setBound</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">serverSocket</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
        <span class="n">serverSocket</span><span class="o">.</span><span class="na">setBound</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">protected</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">listen</span><span class="o">(</span><span class="kt">int</span> <span class="n">count</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
  <span class="c1">//在PlainSocketImpl类中声明为native方法 </span>
    <span class="n">socketListen</span><span class="o">(</span><span class="n">count</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>可以看到在bind方法中就完成一个socket的create、bind、listen三个过程，接着单我们调用accept的时候</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">Socket</span> <span class="nf">accept</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">isClosed</span><span class="o">())</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">SocketException</span><span class="o">(</span><span class="s">"Socket is closed"</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">isBound</span><span class="o">())</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">SocketException</span><span class="o">(</span><span class="s">"Socket is not bound yet"</span><span class="o">);</span>
  <span class="c1">//创建一个新的Socket对象用于处理客户端的请求</span>
    <span class="nc">Socket</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Socket</span><span class="o">((</span><span class="nc">SocketImpl</span><span class="o">)</span> <span class="kc">null</span><span class="o">);</span>
    <span class="n">implAccept</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">s</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">protected</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">implAccept</span><span class="o">(</span><span class="nc">Socket</span> <span class="n">s</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="nc">SocketImpl</span> <span class="n">si</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="c1">//这里基本就是初始化一下Socket</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">impl</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
            <span class="n">s</span><span class="o">.</span><span class="na">setImpl</span><span class="o">();</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="n">s</span><span class="o">.</span><span class="na">impl</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">si</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">impl</span><span class="o">;</span>
        <span class="n">s</span><span class="o">.</span><span class="na">impl</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
      <span class="c1">//这里InetAddress和FileDescriptor会在c代码中设置进去</span>
        <span class="n">si</span><span class="o">.</span><span class="na">address</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">InetAddress</span><span class="o">();</span>
        <span class="n">si</span><span class="o">.</span><span class="na">fd</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileDescriptor</span><span class="o">();</span>
      
      <span class="c1">//看下面</span>
        <span class="n">getImpl</span><span class="o">().</span><span class="na">accept</span><span class="o">(</span><span class="n">si</span><span class="o">);</span>
        <span class="nc">SocketCleanable</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">si</span><span class="o">.</span><span class="na">fd</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>   <span class="c1">// raw fd has been set</span>

        <span class="nc">SecurityManager</span> <span class="n">security</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">getSecurityManager</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">security</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">security</span><span class="o">.</span><span class="na">checkAccept</span><span class="o">(</span><span class="n">si</span><span class="o">.</span><span class="na">getInetAddress</span><span class="o">().</span><span class="na">getHostAddress</span><span class="o">(),</span>
                                    <span class="n">si</span><span class="o">.</span><span class="na">getPort</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">si</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
            <span class="n">si</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
        <span class="n">s</span><span class="o">.</span><span class="na">impl</span> <span class="o">=</span> <span class="n">si</span><span class="o">;</span>
        <span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">SecurityException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">si</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
            <span class="n">si</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
        <span class="n">s</span><span class="o">.</span><span class="na">impl</span> <span class="o">=</span> <span class="n">si</span><span class="o">;</span>
        <span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="n">s</span><span class="o">.</span><span class="na">impl</span> <span class="o">=</span> <span class="n">si</span><span class="o">;</span>
    <span class="n">s</span><span class="o">.</span><span class="na">postAccept</span><span class="o">();</span>
<span class="o">}</span>

<span class="cm">/**
* AbstractPlainSocketImpl
*/</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="nc">SocketImpl</span> <span class="n">s</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
  	<span class="n">acquireFD</span><span class="o">();</span>
  	<span class="k">try</span> <span class="o">{</span>
		  <span class="c1">//在PlainSocketImpl类中声明为native方法 </span>
        <span class="n">socketAccept</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
  	<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
        <span class="n">releaseFD</span><span class="o">();</span>
  	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>看一下native的实现</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
* PlainSocketImpl 这个文件在不同操作系统下面有不同实现，我们看的是unix系统的实现
*/</span>
<span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span>
<span class="nf">Java_java_net_PlainSocketImpl_socketCreate</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">,</span>
                                           <span class="n">jboolean</span> <span class="n">stream</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">jobject</span> <span class="n">fdObj</span><span class="p">,</span> <span class="n">ssObj</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>
  <span class="c1">//tcp还是udp</span>
    <span class="kt">int</span> <span class="n">type</span> <span class="o">=</span> <span class="p">(</span><span class="n">stream</span> <span class="o">?</span> <span class="n">SOCK_STREAM</span> <span class="o">:</span> <span class="n">SOCK_DGRAM</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">domain</span> <span class="o">=</span> <span class="n">ipv6_available</span><span class="p">()</span> <span class="o">?</span> <span class="n">AF_INET6</span> <span class="o">:</span> <span class="n">AF_INET</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">socketExceptionCls</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">jclass</span> <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"java/net/SocketException"</span><span class="p">);</span>
        <span class="n">CHECK_NULL</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
        <span class="n">socketExceptionCls</span> <span class="o">=</span> <span class="p">(</span><span class="n">jclass</span><span class="p">)(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewGlobalRef</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
        <span class="n">CHECK_NULL</span><span class="p">(</span><span class="n">socketExceptionCls</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">fdObj</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetObjectField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">psi_fdID</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">fdObj</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ThrowNew</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">socketExceptionCls</span><span class="p">,</span> <span class="s">"null fd object"</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="c1">//创建socket</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">fd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">domain</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="cm">/* note: if you run out of fds, you may not be able to load
         * the exception class, and get a NoClassDefFoundError
         * instead.
         */</span>
        <span class="n">NET_ThrowNew</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">errno</span><span class="p">,</span> <span class="s">"can't create socket"</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/* Disable IPV6_V6ONLY to ensure dual-socket support */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">domain</span> <span class="o">==</span> <span class="n">AF_INET6</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">arg</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">IPPROTO_IPV6</span><span class="p">,</span> <span class="n">IPV6_V6ONLY</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">arg</span><span class="p">,</span>
                       <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">NET_ThrowNew</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">errno</span><span class="p">,</span> <span class="s">"cannot set IPPROTO_IPV6"</span><span class="p">);</span>
            <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="cm">/*
     * If this is a server socket then enable SO_REUSEADDR
     * automatically and set to non blocking.
     */</span>
    <span class="n">ssObj</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetObjectField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">psi_serverSocketID</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ssObj</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">arg</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
      <span class="c1">//设置为非阻塞</span>
        <span class="n">SET_NONBLOCKING</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">NET_SetSockOpt</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">arg</span><span class="p">,</span>
                       <span class="k">sizeof</span><span class="p">(</span><span class="n">arg</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">NET_ThrowNew</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">errno</span><span class="p">,</span> <span class="s">"cannot set SO_REUSEADDR"</span><span class="p">);</span>
            <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
  <span class="c1">//设置描述符</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">SetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">fdObj</span><span class="p">,</span> <span class="n">IO_fd_fdID</span><span class="p">,</span> <span class="n">fd</span><span class="p">);</span>
<span class="p">}</span>


<span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span>
<span class="nf">Java_java_net_PlainSocketImpl_socketBind</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">,</span>
                                         <span class="n">jobject</span> <span class="n">iaObj</span><span class="p">,</span> <span class="n">jint</span> <span class="n">localport</span><span class="p">)</span> <span class="p">{</span>

    <span class="cm">/* fdObj is the FileDescriptor field on this */</span>
    <span class="n">jobject</span> <span class="n">fdObj</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetObjectField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">psi_fdID</span><span class="p">);</span>
    <span class="cm">/* fd is an int field on fdObj */</span>
    <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">SOCKETADDRESS</span> <span class="n">sa</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">IS_NULL</span><span class="p">(</span><span class="n">fdObj</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">JNU_ThrowByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketException"</span><span class="p">,</span>
                        <span class="s">"Socket closed"</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">//拿到描述符</span>
        <span class="n">fd</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">fdObj</span><span class="p">,</span> <span class="n">IO_fd_fdID</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">IS_NULL</span><span class="p">(</span><span class="n">iaObj</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">JNU_ThrowNullPointerException</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"iaObj is null."</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/* bind */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">NET_InetAddressToSockaddr</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">iaObj</span><span class="p">,</span> <span class="n">localport</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span>
                                  <span class="o">&amp;</span><span class="n">len</span><span class="p">,</span> <span class="n">JNI_TRUE</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">setDefaultScopeID</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">.</span><span class="n">sa</span><span class="p">);</span>

  <span class="c1">//NET_Bind内部调用bind系统调用</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">NET_Bind</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="n">len</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EADDRINUSE</span> <span class="o">||</span> <span class="n">errno</span> <span class="o">==</span> <span class="n">EADDRNOTAVAIL</span> <span class="o">||</span>
            <span class="n">errno</span> <span class="o">==</span> <span class="n">EPERM</span> <span class="o">||</span> <span class="n">errno</span> <span class="o">==</span> <span class="n">EACCES</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">NET_ThrowByNameWithLastError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"BindException"</span><span class="p">,</span>
                           <span class="s">"Bind failed"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">JNU_ThrowByNameWithMessageAndLastError</span>
                <span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketException"</span><span class="p">,</span> <span class="s">"Bind failed"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/* set the address */</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">SetObjectField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">psi_addressID</span><span class="p">,</span> <span class="n">iaObj</span><span class="p">);</span>

    <span class="cm">/* initialize the local port */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">localport</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">socklen_t</span> <span class="n">slen</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">SOCKETADDRESS</span><span class="p">);</span>
        <span class="cm">/* Now that we're a connected socket, let's extract the port number
         * that the system chose for us and store it in the Socket object.
         */</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">getsockname</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">.</span><span class="n">sa</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">slen</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">JNU_ThrowByNameWithMessageAndLastError</span>
                <span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketException"</span><span class="p">,</span> <span class="s">"Error getting socket name"</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">localport</span> <span class="o">=</span> <span class="n">NET_GetPortFromSockaddr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sa</span><span class="p">);</span>
        <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">SetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">psi_localportID</span><span class="p">,</span> <span class="n">localport</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">SetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">psi_localportID</span><span class="p">,</span> <span class="n">localport</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span>
<span class="nf">Java_java_net_PlainSocketImpl_socketListen</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">,</span>
                                           <span class="n">jint</span> <span class="n">count</span><span class="p">)</span>
<span class="p">{</span>
    <span class="cm">/* this FileDescriptor fd field */</span>
    <span class="n">jobject</span> <span class="n">fdObj</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetObjectField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">psi_fdID</span><span class="p">);</span>
    <span class="cm">/* fdObj's int fd field */</span>
    <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">IS_NULL</span><span class="p">(</span><span class="n">fdObj</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">JNU_ThrowByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketException"</span><span class="p">,</span>
                        <span class="s">"Socket closed"</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">fd</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">fdObj</span><span class="p">,</span> <span class="n">IO_fd_fdID</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="cm">/*
     * Workaround for bugid 4101691 in Solaris 2.6. See 4106600.
     * If listen backlog is Integer.MAX_VALUE then subtract 1.
     */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mh">0x7fffffff</span><span class="p">)</span>
        <span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>

  <span class="c1">//调用listen系统调用</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">listen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">JNU_ThrowByNameWithMessageAndLastError</span>
            <span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketException"</span><span class="p">,</span> <span class="s">"Listen failed"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span>
<span class="nf">Java_java_net_PlainSocketImpl_socketAccept</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">,</span>
                                           <span class="n">jobject</span> <span class="n">socket</span><span class="p">)</span>
<span class="p">{</span>
    <span class="cm">/* fields on this */</span>
    <span class="kt">int</span> <span class="n">port</span><span class="p">;</span>
    <span class="n">jint</span> <span class="n">timeout</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">psi_timeoutID</span><span class="p">);</span>
    <span class="n">jlong</span> <span class="n">prevNanoTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">jlong</span> <span class="n">nanoTimeout</span> <span class="o">=</span> <span class="p">(</span><span class="n">jlong</span><span class="p">)</span> <span class="n">timeout</span> <span class="o">*</span> <span class="n">NET_NSEC_PER_MSEC</span><span class="p">;</span>
    <span class="n">jobject</span> <span class="n">fdObj</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetObjectField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">psi_fdID</span><span class="p">);</span>

    <span class="cm">/* the FileDescriptor field on socket */</span>
    <span class="n">jobject</span> <span class="n">socketFdObj</span><span class="p">;</span>
    <span class="cm">/* the InetAddress field on socket */</span>
    <span class="n">jobject</span> <span class="n">socketAddressObj</span><span class="p">;</span>

    <span class="cm">/* the ServerSocket fd int field on fdObj */</span>
    <span class="n">jint</span> <span class="n">fd</span><span class="p">;</span>

    <span class="cm">/* accepted fd */</span>
  <span class="c1">//接收到的描述符</span>
    <span class="n">jint</span> <span class="n">newfd</span><span class="p">;</span>

    <span class="n">SOCKETADDRESS</span> <span class="n">sa</span><span class="p">;</span>
    <span class="n">socklen_t</span> <span class="n">slen</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">SOCKETADDRESS</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">IS_NULL</span><span class="p">(</span><span class="n">fdObj</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">JNU_ThrowByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketException"</span><span class="p">,</span>
                        <span class="s">"Socket closed"</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">fd</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">fdObj</span><span class="p">,</span> <span class="n">IO_fd_fdID</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">IS_NULL</span><span class="p">(</span><span class="n">socket</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">JNU_ThrowNullPointerException</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"socket is null"</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/*
     * accept connection but ignore ECONNABORTED indicating that
     * connection was eagerly accepted by the OS but was reset
     * before accept() was called.
     *
     * If accept timeout in place and timeout is adjusted with
     * each ECONNABORTED or EWOULDBLOCK or EAGAIN to ensure that
     * semantics of timeout are preserved.
     */</span>
  <span class="c1">//这里for循环是因为实现超时，之前说过服务端socket是非阻塞的，然后这里通过循环调用accept，取得连接或者超时</span>
  <span class="c1">//setSoTimeout()设置超时时间</span>
    <span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>
        <span class="n">jlong</span> <span class="n">currNanoTime</span><span class="p">;</span>

        <span class="cm">/* first usage pick up current time */</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">prevNanoTime</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">nanoTimeout</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">prevNanoTime</span> <span class="o">=</span> <span class="n">JVM_NanoTime</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="cm">/* passing a timeout of 0 to poll will return immediately,
           but in the case of ServerSocket 0 means infinite. */</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">timeout</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">ret</span> <span class="o">=</span> <span class="n">NET_Timeout</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">ret</span> <span class="o">=</span> <span class="n">NET_Timeout</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="n">nanoTimeout</span> <span class="o">/</span> <span class="n">NET_NSEC_PER_MSEC</span><span class="p">,</span> <span class="n">prevNanoTime</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">JNU_ThrowByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketTimeoutException"</span><span class="p">,</span>
                            <span class="s">"Accept timed out"</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EBADF</span><span class="p">)</span> <span class="p">{</span>
               <span class="n">JNU_ThrowByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketException"</span><span class="p">,</span> <span class="s">"Socket closed"</span><span class="p">);</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">ENOMEM</span><span class="p">)</span> <span class="p">{</span>
               <span class="n">JNU_ThrowOutOfMemoryError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"NET_Timeout native heap allocation failed"</span><span class="p">);</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
               <span class="n">JNU_ThrowByNameWithMessageAndLastError</span>
                   <span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketException"</span><span class="p">,</span> <span class="s">"Accept failed"</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="c1">//这里调用系统调用accept获取新的描述符</span>
        <span class="n">newfd</span> <span class="o">=</span> <span class="n">NET_Accept</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">.</span><span class="n">sa</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">slen</span><span class="p">);</span>

        <span class="cm">/* connection accepted */</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">newfd</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">//获取到描述符就先把它设置成阻塞的</span>
            <span class="n">SET_BLOCKING</span><span class="p">(</span><span class="n">newfd</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="cm">/* non (ECONNABORTED or EWOULDBLOCK or EAGAIN) error */</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">ECONNABORTED</span> <span class="o">||</span> <span class="n">errno</span> <span class="o">==</span> <span class="n">EWOULDBLOCK</span> <span class="o">||</span> <span class="n">errno</span> <span class="o">==</span> <span class="n">EAGAIN</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="cm">/* ECONNABORTED or EWOULDBLOCK or EAGAIN error so adjust timeout if there is one. */</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">nanoTimeout</span> <span class="o">&gt;=</span> <span class="n">NET_NSEC_PER_MSEC</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">currNanoTime</span> <span class="o">=</span> <span class="n">JVM_NanoTime</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
            <span class="n">nanoTimeout</span> <span class="o">-=</span> <span class="p">(</span><span class="n">currNanoTime</span> <span class="o">-</span> <span class="n">prevNanoTime</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">nanoTimeout</span> <span class="o">&lt;</span> <span class="n">NET_NSEC_PER_MSEC</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">JNU_ThrowByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketTimeoutException"</span><span class="p">,</span>
                        <span class="s">"Accept timed out"</span><span class="p">);</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">prevNanoTime</span> <span class="o">=</span> <span class="n">currNanoTime</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">newfd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">newfd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">JNU_ThrowByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVAIOPKG</span> <span class="s">"InterruptedIOException"</span><span class="p">,</span>
                            <span class="s">"operation interrupted"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EINVAL</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">errno</span> <span class="o">=</span> <span class="n">EBADF</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EBADF</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">JNU_ThrowByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketException"</span><span class="p">,</span> <span class="s">"Socket closed"</span><span class="p">);</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">JNU_ThrowByNameWithMessageAndLastError</span>
                    <span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketException"</span><span class="p">,</span> <span class="s">"Accept failed"</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/*
     * fill up the remote peer port and address in the new socket structure.
     */</span>
    <span class="n">socketAddressObj</span> <span class="o">=</span> <span class="n">NET_SockaddrToInetAddress</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">port</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">socketAddressObj</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="cm">/* should be pending exception */</span>
        <span class="n">close</span><span class="p">(</span><span class="n">newfd</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/*
     * Populate SocketImpl.fd.fd
     */</span>
  <span class="c1">//设置描述符和地址信息到accept方法中创建的Socket中</span>
    <span class="n">socketFdObj</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetObjectField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">socket</span><span class="p">,</span> <span class="n">psi_fdID</span><span class="p">);</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">SetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">socketFdObj</span><span class="p">,</span> <span class="n">IO_fd_fdID</span><span class="p">,</span> <span class="n">newfd</span><span class="p">);</span>

    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">SetObjectField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">socket</span><span class="p">,</span> <span class="n">psi_addressID</span><span class="p">,</span> <span class="n">socketAddressObj</span><span class="p">);</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">SetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">socket</span><span class="p">,</span> <span class="n">psi_portID</span><span class="p">,</span> <span class="n">port</span><span class="p">);</span>
    <span class="cm">/* also fill up the local port information */</span>
     <span class="n">port</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">psi_localportID</span><span class="p">);</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">SetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">socket</span><span class="p">,</span> <span class="n">psi_localportID</span><span class="p">,</span> <span class="n">port</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>read&amp;write方法我们往下看客户端代码的时候一起讲解，因为他们属于Socket类</p>

<p>我们再来看一下客户端的代码</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="c1">//创建socket</span>
    <span class="kt">int</span> <span class="n">socketfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span><span class="n">SOCK_STREAM</span><span class="p">,</span><span class="n">IPPROTO_TCP</span><span class="p">);</span>
    <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">servaddr</span><span class="p">;</span>
    <span class="n">bzero</span><span class="p">(</span><span class="o">&amp;</span><span class="n">servaddr</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">servaddr</span><span class="p">));</span>
    <span class="n">servaddr</span><span class="p">.</span><span class="n">sin_family</span><span class="o">=</span><span class="n">AF_INET</span><span class="p">;</span><span class="c1">//设置地址类型为AF_INET</span>
    <span class="n">servaddr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span><span class="o">=</span><span class="n">inet_addr</span><span class="p">(</span><span class="s">"127.0.0.1"</span><span class="p">);</span><span class="c1">//设置网络地址为INADDR_ANY</span>
    <span class="n">servaddr</span><span class="p">.</span><span class="n">sin_port</span><span class="o">=</span><span class="n">htons</span><span class="p">(</span><span class="mi">8840</span><span class="p">);</span><span class="c1">//设置端口为80</span>
  
  <span class="c1">//创建连接到服务端</span>
    <span class="n">connect</span><span class="p">(</span><span class="n">socketfd</span><span class="p">,</span><span class="o">&amp;</span><span class="n">servaddr</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">servaddr</span><span class="p">));</span>

    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">){</span>
        <span class="kt">char</span> <span class="n">data</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">输入要发送的数据："</span><span class="p">);</span>
        <span class="n">scanf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span><span class="n">data</span><span class="p">);</span>
      <span class="c1">//发送数据到服务端</span>
        <span class="n">write</span><span class="p">(</span><span class="n">socketfd</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span>
      <span class="c1">//从服务端接收数据</span>
        <span class="n">read</span><span class="p">(</span><span class="n">socketfd</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"服务器回应 %s </span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="c1">//关闭socket</span>
    <span class="n">close</span><span class="p">(</span><span class="n">socketfd</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>整个过程大致就是</p>

<ul>
  <li>socket函数创建socket</li>
  <li>connect函数建立连接（3次握手就是这里完成的）</li>
  <li>read&amp;write 进行操作（也可以使用recv&amp;send）</li>
</ul>

<p>在java中的代码</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//这里创建一个java对象 没有创建socket</span>
<span class="nc">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Socket</span><span class="o">();</span>
<span class="c1">//这里如果没有创建socket的话会创建，然后调用connect函数连接</span>
<span class="n">socket</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="k">new</span> <span class="nc">InetSocketAddress</span><span class="o">(</span><span class="s">"127.0.0.1"</span><span class="o">,</span><span class="mi">36352</span><span class="o">));</span>
<span class="n">socket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
<span class="n">socket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">().</span><span class="na">read</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</code></pre></div></div>

<p>先来看一下connect的实现</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">connect</span><span class="o">(</span><span class="nc">SocketAddress</span> <span class="n">endpoint</span><span class="o">,</span> <span class="kt">int</span> <span class="n">timeout</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">endpoint</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"connect: The address can't be null"</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">timeout</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"connect: timeout can't be negative"</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">isClosed</span><span class="o">())</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">SocketException</span><span class="o">(</span><span class="s">"Socket is closed"</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(!</span><span class="n">oldImpl</span> <span class="o">&amp;&amp;</span> <span class="n">isConnected</span><span class="o">())</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">SocketException</span><span class="o">(</span><span class="s">"already connected"</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(!(</span><span class="n">endpoint</span> <span class="k">instanceof</span> <span class="nc">InetSocketAddress</span><span class="o">))</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"Unsupported address type"</span><span class="o">);</span>

    <span class="nc">InetSocketAddress</span> <span class="n">epoint</span> <span class="o">=</span> <span class="o">(</span><span class="nc">InetSocketAddress</span><span class="o">)</span> <span class="n">endpoint</span><span class="o">;</span>
    <span class="nc">InetAddress</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">epoint</span><span class="o">.</span><span class="na">getAddress</span> <span class="o">();</span>
    <span class="kt">int</span> <span class="n">port</span> <span class="o">=</span> <span class="n">epoint</span><span class="o">.</span><span class="na">getPort</span><span class="o">();</span>
    <span class="n">checkAddress</span><span class="o">(</span><span class="n">addr</span><span class="o">,</span> <span class="s">"connect"</span><span class="o">);</span>

    <span class="nc">SecurityManager</span> <span class="n">security</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">getSecurityManager</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">security</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">epoint</span><span class="o">.</span><span class="na">isUnresolved</span><span class="o">())</span>
            <span class="n">security</span><span class="o">.</span><span class="na">checkConnect</span><span class="o">(</span><span class="n">epoint</span><span class="o">.</span><span class="na">getHostName</span><span class="o">(),</span> <span class="n">port</span><span class="o">);</span>
        <span class="k">else</span>
            <span class="n">security</span><span class="o">.</span><span class="na">checkConnect</span><span class="o">(</span><span class="n">addr</span><span class="o">.</span><span class="na">getHostAddress</span><span class="o">(),</span> <span class="n">port</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">created</span><span class="o">)</span>
      <span class="c1">//这里创建socket，创建后会把系统的描述符写到Java对象中</span>
        <span class="n">createImpl</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">oldImpl</span><span class="o">)</span>
      <span class="c1">//这里建立连接</span>
        <span class="n">impl</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="n">epoint</span><span class="o">,</span> <span class="n">timeout</span><span class="o">);</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">timeout</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">epoint</span><span class="o">.</span><span class="na">isUnresolved</span><span class="o">())</span>
            <span class="n">impl</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="n">addr</span><span class="o">.</span><span class="na">getHostName</span><span class="o">(),</span> <span class="n">port</span><span class="o">);</span>
        <span class="k">else</span>
            <span class="n">impl</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="n">addr</span><span class="o">,</span> <span class="n">port</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">else</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">(</span><span class="s">"SocketImpl.connect(addr, timeout)"</span><span class="o">);</span>
    <span class="n">connected</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="cm">/*
     * If the socket was not bound before the connect, it is now because
     * the kernel will have picked an ephemeral port &amp; a local address
     */</span>
    <span class="n">bound</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>createImpl调用了AbstractPlainSocketImpl里面的create，这个可以参考之前服务端的代码是一样的</p>

<p>impl.connect的情况比较复杂这里节省篇幅不展开说明了，最终它都会调用到AbstractPlainSocketImpl的doConnect方法然后调用native方法socketConnect，我们来看一下socketConnect的c代码实现</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span>
<span class="nf">Java_java_net_PlainSocketImpl_socketConnect</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">,</span>
                                            <span class="n">jobject</span> <span class="n">iaObj</span><span class="p">,</span> <span class="n">jint</span> <span class="n">port</span><span class="p">,</span>
                                            <span class="n">jint</span> <span class="n">timeout</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">jint</span> <span class="n">localport</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">psi_localportID</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="cm">/* fdObj is the FileDescriptor field on this */</span>
    <span class="n">jobject</span> <span class="n">fdObj</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetObjectField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">psi_fdID</span><span class="p">);</span>
    <span class="n">jclass</span> <span class="n">clazz</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetObjectClass</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">);</span>
    <span class="n">jobject</span> <span class="n">fdLock</span><span class="p">;</span>
    <span class="n">jint</span> <span class="n">trafficClass</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">psi_trafficClassID</span><span class="p">);</span>
    <span class="cm">/* fd is an int field on iaObj */</span>
    <span class="n">jint</span> <span class="n">fd</span><span class="p">;</span>
    <span class="n">SOCKETADDRESS</span> <span class="n">sa</span><span class="p">;</span>
    <span class="cm">/* The result of the connection */</span>
    <span class="kt">int</span> <span class="n">connect_rv</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">IS_NULL</span><span class="p">(</span><span class="n">fdObj</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">JNU_ThrowByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketException"</span><span class="p">,</span> <span class="s">"Socket closed"</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">fd</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">fdObj</span><span class="p">,</span> <span class="n">IO_fd_fdID</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">IS_NULL</span><span class="p">(</span><span class="n">iaObj</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">JNU_ThrowNullPointerException</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"inet address argument null."</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">NET_InetAddressToSockaddr</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">iaObj</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">,</span>
                                  <span class="n">JNI_TRUE</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">setDefaultScopeID</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">.</span><span class="n">sa</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">trafficClass</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">ipv6_available</span><span class="p">())</span> <span class="p">{</span>
        <span class="n">NET_SetTrafficClass</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="n">trafficClass</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">timeout</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">//这里进行连接，NET_Connect这个宏定义内部进行了重试操作</span>
      <span class="c1">//因为timeout无限所以这里是阻塞的循环进行重试</span>
        <span class="n">connect_rv</span> <span class="o">=</span> <span class="n">NET_Connect</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">.</span><span class="n">sa</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
<span class="cp">#ifdef __solaris__
</span>      <span class="p">...</span>
<span class="cp">#endif
</span>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">//设置成非阻塞</span>
        <span class="n">SET_NONBLOCKING</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
      <span class="c1">//连接，这样可以自己实现超时</span>
        <span class="n">connect_rv</span> <span class="o">=</span> <span class="n">connect</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">.</span><span class="n">sa</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">connect_rv</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">socklen_t</span> <span class="n">optlen</span><span class="p">;</span>
            <span class="n">jlong</span> <span class="n">nanoTimeout</span> <span class="o">=</span> <span class="p">(</span><span class="n">jlong</span><span class="p">)</span> <span class="n">timeout</span> <span class="o">*</span> <span class="n">NET_NSEC_PER_MSEC</span><span class="p">;</span>
            <span class="n">jlong</span> <span class="n">prevNanoTime</span> <span class="o">=</span> <span class="n">JVM_NanoTime</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">!=</span> <span class="n">EINPROGRESS</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">NET_ThrowByNameWithLastError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"ConnectException"</span><span class="p">,</span>
                             <span class="s">"connect failed"</span><span class="p">);</span>
                <span class="n">SET_BLOCKING</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">jlong</span> <span class="n">newNanoTime</span><span class="p">;</span>
                <span class="k">struct</span> <span class="n">pollfd</span> <span class="n">pfd</span><span class="p">;</span>
                <span class="n">pfd</span><span class="p">.</span><span class="n">fd</span> <span class="o">=</span> <span class="n">fd</span><span class="p">;</span>
                <span class="n">pfd</span><span class="p">.</span><span class="n">events</span> <span class="o">=</span> <span class="n">POLLOUT</span><span class="p">;</span>

                <span class="n">errno</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="n">connect_rv</span> <span class="o">=</span> <span class="n">NET_Poll</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pfd</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">nanoTimeout</span> <span class="o">/</span> <span class="n">NET_NSEC_PER_MSEC</span><span class="p">);</span>

                <span class="k">if</span> <span class="p">(</span><span class="n">connect_rv</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">!=</span> <span class="n">EINTR</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="n">newNanoTime</span> <span class="o">=</span> <span class="n">JVM_NanoTime</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
                <span class="n">nanoTimeout</span> <span class="o">-=</span> <span class="p">(</span><span class="n">newNanoTime</span> <span class="o">-</span> <span class="n">prevNanoTime</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">nanoTimeout</span> <span class="o">&lt;</span> <span class="n">NET_NSEC_PER_MSEC</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">connect_rv</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="n">prevNanoTime</span> <span class="o">=</span> <span class="n">newNanoTime</span><span class="p">;</span>

            <span class="p">}</span> <span class="cm">/* while */</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">connect_rv</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">JNU_ThrowByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketTimeoutException"</span><span class="p">,</span>
                            <span class="s">"connect timed out"</span><span class="p">);</span>
                <span class="n">SET_BLOCKING</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
                <span class="n">shutdown</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">optlen</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">connect_rv</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">getsockopt</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">SO_ERROR</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">connect_rv</span><span class="p">,</span>
                           <span class="o">&amp;</span><span class="n">optlen</span><span class="p">)</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">connect_rv</span> <span class="o">=</span> <span class="n">errno</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">SET_BLOCKING</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">connect_rv</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">errno</span> <span class="o">=</span> <span class="n">connect_rv</span><span class="p">;</span>
            <span class="n">connect_rv</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">connect_rv</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>

<span class="cp">#ifdef __linux__
</span>        <span class="k">if</span> <span class="p">(</span><span class="n">connect_rv</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">errno</span> <span class="o">==</span> <span class="n">EINVAL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">JNU_ThrowByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketException"</span><span class="p">,</span>
                <span class="s">"Invalid argument or cannot assign requested address"</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
<span class="cp">#endif
#if defined(EPROTO)
</span>        <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EPROTO</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">NET_ThrowByNameWithLastError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"ProtocolException"</span><span class="p">,</span>
                           <span class="s">"Protocol error"</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
<span class="cp">#endif
</span>        <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">ECONNREFUSED</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">NET_ThrowByNameWithLastError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"ConnectException"</span><span class="p">,</span>
                           <span class="s">"Connection refused"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">ETIMEDOUT</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">NET_ThrowByNameWithLastError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"ConnectException"</span><span class="p">,</span>
                           <span class="s">"Connection timed out"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EHOSTUNREACH</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">NET_ThrowByNameWithLastError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"NoRouteToHostException"</span><span class="p">,</span>
                           <span class="s">"Host unreachable"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EADDRNOTAVAIL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">NET_ThrowByNameWithLastError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"NoRouteToHostException"</span><span class="p">,</span>
                             <span class="s">"Address not available"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EISCONN</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EBADF</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">JNU_ThrowByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketException"</span><span class="p">,</span>
                            <span class="s">"Socket closed"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">JNU_ThrowByNameWithMessageAndLastError</span>
                <span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketException"</span><span class="p">,</span> <span class="s">"connect failed"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">SetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">fdObj</span><span class="p">,</span> <span class="n">IO_fd_fdID</span><span class="p">,</span> <span class="n">fd</span><span class="p">);</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">SetObjectField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">psi_addressID</span><span class="p">,</span> <span class="n">iaObj</span><span class="p">);</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">SetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">psi_portID</span><span class="p">,</span> <span class="n">port</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">localport</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">socklen_t</span> <span class="n">slen</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">SOCKETADDRESS</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">getsockname</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">.</span><span class="n">sa</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">slen</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">JNU_ThrowByNameWithMessageAndLastError</span>
                <span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketException"</span><span class="p">,</span> <span class="s">"Error getting socket name"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">localport</span> <span class="o">=</span> <span class="n">NET_GetPortFromSockaddr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sa</span><span class="p">);</span>
            <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">SetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">psi_localportID</span><span class="p">,</span> <span class="n">localport</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>最后我们来看一下read&amp;write方法</p>

<p>首先socket.getOutputStream()最终调用AbstractPlainSocketImpl的getOutputStream方法</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protected</span> <span class="kd">synchronized</span> <span class="nc">OutputStream</span> <span class="nf">getOutputStream</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">fdLock</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">isClosedOrPending</span><span class="o">())</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"Socket Closed"</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">shut_wr</span><span class="o">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"Socket output is shutdown"</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">socketOutputStream</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
          <span class="c1">//这里返回了一个SocketOutputStream</span>
            <span class="n">socketOutputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SocketOutputStream</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">socketOutputStream</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>socket.getInputStream()最终调用AbstractPlainSocketImpl的getInputStream方法</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protected</span> <span class="kd">synchronized</span> <span class="nc">InputStream</span> <span class="nf">getInputStream</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">fdLock</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">isClosedOrPending</span><span class="o">())</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"Socket Closed"</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">shut_rd</span><span class="o">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"Socket input is shutdown"</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">socketInputStream</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
          <span class="c1">//这里返回了一个SocketInputStream</span>
            <span class="n">socketInputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SocketInputStream</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">socketInputStream</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>SocketInputStream与SocketOutputStream继承了FileInputStream与FileOutputStream但是他们重写了read和wirte方法</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">SocketInputStream</span><span class="o">(</span><span class="nc">AbstractPlainSocketImpl</span> <span class="n">impl</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
  <span class="c1">//这个不知道的可以回去看文件IO那篇文章 https://www.zhoukaifan.com/2021-02-05/Java%E6%96%87%E4%BB%B6IO</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">impl</span><span class="o">.</span><span class="na">getFileDescriptor</span><span class="o">());</span>
    <span class="k">this</span><span class="o">.</span><span class="na">impl</span> <span class="o">=</span> <span class="n">impl</span><span class="o">;</span>
    <span class="n">socket</span> <span class="o">=</span> <span class="n">impl</span><span class="o">.</span><span class="na">getSocket</span><span class="o">();</span>
<span class="o">}</span>
<span class="nc">SocketOutputStream</span><span class="o">(</span><span class="nc">AbstractPlainSocketImpl</span> <span class="n">impl</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
  <span class="c1">//这个不知道的可以回去看文件IO那篇文章 https://www.zhoukaifan.com/2021-02-05/Java%E6%96%87%E4%BB%B6IO</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">impl</span><span class="o">.</span><span class="na">getFileDescriptor</span><span class="o">());</span>
    <span class="k">this</span><span class="o">.</span><span class="na">impl</span> <span class="o">=</span> <span class="n">impl</span><span class="o">;</span>
    <span class="n">socket</span> <span class="o">=</span> <span class="n">impl</span><span class="o">.</span><span class="na">getSocket</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>接下来我们已SocketInputStream为例去分析一下具体实现</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">read</span><span class="o">(</span><span class="kt">byte</span> <span class="n">b</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">off</span><span class="o">,</span> <span class="kt">int</span> <span class="n">length</span><span class="o">,</span> <span class="kt">int</span> <span class="n">timeout</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
    <span class="c1">// EOF already encountered</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">eof</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// connection reset</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">impl</span><span class="o">.</span><span class="na">isConnectionReset</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">SocketException</span><span class="o">(</span><span class="s">"Connection reset"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">// bounds check</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">length</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">off</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">length</span> <span class="o">&gt;</span> <span class="n">b</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">off</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArrayIndexOutOfBoundsException</span><span class="o">(</span><span class="s">"length == "</span> <span class="o">+</span> <span class="n">length</span>
                <span class="o">+</span> <span class="s">" off == "</span> <span class="o">+</span> <span class="n">off</span> <span class="o">+</span> <span class="s">" buffer length == "</span> <span class="o">+</span> <span class="n">b</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">// acquire file descriptor and do the read</span>
  <span class="c1">//获取描述符</span>
    <span class="nc">FileDescriptor</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">impl</span><span class="o">.</span><span class="na">acquireFD</span><span class="o">();</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="c1">//主要就是这里实现的读取</span>
      <span class="c1">//这个方法就一行代码就是调用native方法socketRead0</span>
      <span class="c1">//return socketRead0(fd, b, off, len, timeout);</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">socketRead</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">length</span><span class="o">,</span> <span class="n">timeout</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ConnectionResetException</span> <span class="n">rstExc</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">impl</span><span class="o">.</span><span class="na">setConnectionReset</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
        <span class="n">impl</span><span class="o">.</span><span class="na">releaseFD</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="cm">/*
     * If we get here we are at EOF, the socket has been closed,
     * or the connection has been reset.
     */</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">impl</span><span class="o">.</span><span class="na">isClosedOrPending</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">SocketException</span><span class="o">(</span><span class="s">"Socket closed"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">impl</span><span class="o">.</span><span class="na">isConnectionReset</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">SocketException</span><span class="o">(</span><span class="s">"Connection reset"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">eof</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>接着我们看看socketRead0的实现</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
<span class="nf">Java_java_net_SocketInputStream_socketRead0</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">,</span>
                                            <span class="n">jobject</span> <span class="n">fdObj</span><span class="p">,</span> <span class="n">jbyteArray</span> <span class="n">data</span><span class="p">,</span>
                                            <span class="n">jint</span> <span class="n">off</span><span class="p">,</span> <span class="n">jint</span> <span class="n">len</span><span class="p">,</span> <span class="n">jint</span> <span class="n">timeout</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">BUF</span><span class="p">[</span><span class="n">MAX_BUFFER_LEN</span><span class="p">];</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">bufP</span><span class="p">;</span>
    <span class="n">jint</span> <span class="n">fd</span><span class="p">,</span> <span class="n">nread</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">IS_NULL</span><span class="p">(</span><span class="n">fdObj</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">JNU_ThrowByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"java/net/SocketException"</span><span class="p">,</span>
                        <span class="s">"Socket closed"</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="c1">//获取描述符</span>
    <span class="n">fd</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">fdObj</span><span class="p">,</span> <span class="n">IO_fd_fdID</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">JNU_ThrowByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"java/net/SocketException"</span><span class="p">,</span> <span class="s">"Socket closed"</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/*
     * If the read is greater than our stack allocated buffer then
     * we allocate from the heap (up to a limit)
     */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="n">MAX_BUFFER_LEN</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="n">MAX_HEAP_BUFFER_LEN</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">len</span> <span class="o">=</span> <span class="n">MAX_HEAP_BUFFER_LEN</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="c1">//申请堆外内存</span>
        <span class="n">bufP</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">((</span><span class="kt">size_t</span><span class="p">)</span><span class="n">len</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">bufP</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">bufP</span> <span class="o">=</span> <span class="n">BUF</span><span class="p">;</span>
            <span class="n">len</span> <span class="o">=</span> <span class="n">MAX_BUFFER_LEN</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">bufP</span> <span class="o">=</span> <span class="n">BUF</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">timeout</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">//读取数据到堆外 有超时实现</span>
      <span class="c1">//这里老样子用非阻塞实现超时</span>
      <span class="c1">//不过要注意的是不是socket设置成非阻塞而是使用了recv函数 参考这里 https://linux.die.net/man/2/recv</span>
        <span class="n">nread</span> <span class="o">=</span> <span class="n">NET_ReadWithTimeout</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="n">bufP</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">timeout</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">((</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ExceptionCheck</span><span class="p">(</span><span class="n">env</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">bufP</span> <span class="o">!=</span> <span class="n">BUF</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">free</span><span class="p">(</span><span class="n">bufP</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">nread</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">//读取数据到堆外</span>
        <span class="n">nread</span> <span class="o">=</span> <span class="n">NET_Read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">bufP</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">nread</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">nread</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>

            <span class="k">switch</span> <span class="p">(</span><span class="n">errno</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">case</span> <span class="n">ECONNRESET</span><span class="p">:</span>
                <span class="k">case</span> <span class="n">EPIPE</span><span class="p">:</span>
                    <span class="n">JNU_ThrowByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"sun/net/ConnectionResetException"</span><span class="p">,</span>
                        <span class="s">"Connection reset"</span><span class="p">);</span>
                    <span class="k">break</span><span class="p">;</span>

                <span class="k">case</span> <span class="n">EBADF</span><span class="p">:</span>
                    <span class="n">JNU_ThrowByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"java/net/SocketException"</span><span class="p">,</span>
                        <span class="s">"Socket closed"</span><span class="p">);</span>
                    <span class="k">break</span><span class="p">;</span>

                <span class="k">case</span> <span class="n">EINTR</span><span class="p">:</span>
                     <span class="n">JNU_ThrowByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"java/io/InterruptedIOException"</span><span class="p">,</span>
                           <span class="s">"Operation interrupted"</span><span class="p">);</span>
                     <span class="k">break</span><span class="p">;</span>
                <span class="nl">default:</span>
                    <span class="n">JNU_ThrowByNameWithMessageAndLastError</span>
                        <span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"java/net/SocketException"</span><span class="p">,</span> <span class="s">"Read failed"</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">//设置数据到堆内</span>
        <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">SetByteArrayRegion</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">off</span><span class="p">,</span> <span class="n">nread</span><span class="p">,</span> <span class="p">(</span><span class="n">jbyte</span> <span class="o">*</span><span class="p">)</span><span class="n">bufP</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">bufP</span> <span class="o">!=</span> <span class="n">BUF</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">//释放堆外内存</span>
        <span class="n">free</span><span class="p">(</span><span class="n">bufP</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">nread</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>所以传统Socket类的过程基本和传统文件IO类似。参考：<a href="https://www.zhoukaifan.com/2021-02-05/Java%E6%96%87%E4%BB%B6IO">文件IO</a></p>

<p><img src="../img/bioreadcopy.png" alt="bioreadcopy" /><img src="../img/biosocketcopy.png" alt="bioreadcopy" /></p>

<p>write方法的整个过程是类似的</p>

<h3 id="nio中的socket">NIO中的Socket</h3>

<p>服务端</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="nc">ServerSocketChannel</span> <span class="n">serverSocketChannel</span> <span class="o">=</span> <span class="nc">ServerSocketChannel</span><span class="o">.</span><span class="na">open</span><span class="o">();</span>
    <span class="n">serverSocketChannel</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="k">new</span> <span class="nc">InetSocketAddress</span><span class="o">(</span><span class="s">"127.0.0.1"</span><span class="o">,</span><span class="mi">54321</span><span class="o">));</span>
    <span class="nc">SocketChannel</span> <span class="n">accept</span> <span class="o">=</span> <span class="n">serverSocketChannel</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
    <span class="nc">ByteBuffer</span> <span class="n">byteBuffer</span> <span class="o">=</span> <span class="nc">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="mi">16</span><span class="o">);</span>
    <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">){</span>
        <span class="n">byteBuffer</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
        <span class="n">accept</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">byteBuffer</span><span class="o">);</span>
        <span class="n">byteBuffer</span><span class="o">.</span><span class="na">flip</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"收到客户端消息："</span><span class="o">+</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">byteBuffer</span><span class="o">.</span><span class="na">array</span><span class="o">()));</span>
        <span class="n">accept</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">byteBuffer</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>客户端</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="nc">SocketChannel</span> <span class="n">socketChannel</span> <span class="o">=</span> <span class="nc">SocketChannel</span><span class="o">.</span><span class="na">open</span><span class="o">();</span>
    <span class="n">socketChannel</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="k">new</span> <span class="nc">InetSocketAddress</span><span class="o">(</span><span class="s">"127.0.0.1"</span><span class="o">,</span><span class="mi">54321</span><span class="o">));</span>
    <span class="nc">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
    <span class="nc">ByteBuffer</span> <span class="n">byteBuffer</span> <span class="o">=</span> <span class="nc">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="mi">1111</span><span class="o">);</span>
    <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"请输入消息："</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">str</span><span class="o">=</span><span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
        <span class="n">byteBuffer</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
        <span class="n">byteBuffer</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
        <span class="n">byteBuffer</span><span class="o">.</span><span class="na">flip</span><span class="o">();</span>
        <span class="n">socketChannel</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">byteBuffer</span><span class="o">);</span>
        <span class="n">socketChannel</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">byteBuffer</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"服务器回应："</span><span class="o">+</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">byteBuffer</span><span class="o">.</span><span class="na">array</span><span class="o">()));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>我们先来看一下ServerSocketChannel的方法实现</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="nc">ServerSocketChannel</span> <span class="nf">open</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nc">SelectorProvider</span><span class="o">.</span><span class="na">provider</span><span class="o">().</span><span class="na">openServerSocketChannel</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="nc">ServerSocketChannel</span> <span class="nf">openServerSocketChannel</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
	<span class="k">return</span> <span class="k">new</span> <span class="nf">ServerSocketChannelImpl</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
<span class="o">}</span>
<span class="nc">ServerSocketChannelImpl</span><span class="o">(</span><span class="nc">SelectorProvider</span> <span class="n">sp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
	<span class="kd">super</span><span class="o">(</span><span class="n">sp</span><span class="o">);</span>
	<span class="k">this</span><span class="o">.</span><span class="na">fd</span> <span class="o">=</span>  <span class="nc">Net</span><span class="o">.</span><span class="na">serverSocket</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
	<span class="c1">//fdVal是一个native方法 其实就是拿到描述符</span>
	<span class="k">this</span><span class="o">.</span><span class="na">fdVal</span> <span class="o">=</span> <span class="nc">IOUtil</span><span class="o">.</span><span class="na">fdVal</span><span class="o">(</span><span class="n">fd</span><span class="o">);</span>
<span class="o">}</span>
<span class="c1">//socket0是一个native方法  newFD会吧描述符号包装成一个</span>
<span class="kd">static</span> <span class="nc">FileDescriptor</span> <span class="nf">serverSocket</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">stream</span><span class="o">)</span> <span class="o">{</span>
	<span class="k">return</span> <span class="nc">IOUtil</span><span class="o">.</span><span class="na">newFD</span><span class="o">(</span><span class="n">socket0</span><span class="o">(</span><span class="n">isIPv6Available</span><span class="o">(),</span> <span class="n">stream</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="n">fastLoopback</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
<span class="nf">Java_sun_nio_ch_IOUtil_fdVal</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">clazz</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">fdo</span><span class="p">)</span>
<span class="p">{</span>
  <span class="c1">//https://docs.oracle.com/en/java/javase/15/docs/specs/jni/functions.html#getfieldid</span>
    <span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">fdo</span><span class="p">,</span> <span class="n">fd_fdID</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
<span class="nf">Java_sun_nio_ch_Net_socket0</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">cl</span><span class="p">,</span> <span class="n">jboolean</span> <span class="n">preferIPv6</span><span class="p">,</span>
                            <span class="n">jboolean</span> <span class="n">stream</span><span class="p">,</span> <span class="n">jboolean</span> <span class="n">reuse</span><span class="p">,</span> <span class="n">jboolean</span> <span class="n">ignored</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">type</span> <span class="o">=</span> <span class="p">(</span><span class="n">stream</span> <span class="o">?</span> <span class="n">SOCK_STREAM</span> <span class="o">:</span> <span class="n">SOCK_DGRAM</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">domain</span> <span class="o">=</span> <span class="p">(</span><span class="n">ipv6_available</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">preferIPv6</span><span class="p">)</span> <span class="o">?</span> <span class="n">AF_INET6</span> <span class="o">:</span> <span class="n">AF_INET</span><span class="p">;</span>

  <span class="c1">//创建描述符</span>
    <span class="n">fd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">domain</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">handleSocketError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">errno</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="cm">/* Disable IPV6_V6ONLY to ensure dual-socket support */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">domain</span> <span class="o">==</span> <span class="n">AF_INET6</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">arg</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="c1">//设置IPV6_V6ONLY 不同时监听ipv4端口</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">IPPROTO_IPV6</span><span class="p">,</span> <span class="n">IPV6_V6ONLY</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">arg</span><span class="p">,</span>
                       <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">JNU_ThrowByNameWithLastError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span>
                                         <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketException"</span><span class="p">,</span>
                                         <span class="s">"Unable to set IPV6_V6ONLY"</span><span class="p">);</span>
            <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">reuse</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">arg</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
      <span class="c1">//重用端口不再等待2分钟</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">arg</span><span class="p">,</span>
                       <span class="k">sizeof</span><span class="p">(</span><span class="n">arg</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">JNU_ThrowByNameWithLastError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span>
                                         <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketException"</span><span class="p">,</span>
                                         <span class="s">"Unable to set SO_REUSEADDR"</span><span class="p">);</span>
            <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="cp">#if defined(__linux__)
</span>    <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="n">SOCK_DGRAM</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">arg</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">level</span> <span class="o">=</span> <span class="p">(</span><span class="n">domain</span> <span class="o">==</span> <span class="n">AF_INET6</span><span class="p">)</span> <span class="o">?</span> <span class="n">IPPROTO_IPV6</span> <span class="o">:</span> <span class="n">IPPROTO_IP</span><span class="p">;</span>
      <span class="c1">//多播配置</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="n">IP_MULTICAST_ALL</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">arg</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">arg</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
            <span class="p">(</span><span class="n">errno</span> <span class="o">!=</span> <span class="n">ENOPROTOOPT</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">JNU_ThrowByNameWithLastError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span>
                                         <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketException"</span><span class="p">,</span>
                                         <span class="s">"Unable to set IP_MULTICAST_ALL"</span><span class="p">);</span>
            <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="cm">/* By default, Linux uses the route default */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">domain</span> <span class="o">==</span> <span class="n">AF_INET6</span> <span class="o">&amp;&amp;</span> <span class="n">type</span> <span class="o">==</span> <span class="n">SOCK_DGRAM</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">arg</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
      <span class="c1">//设置多播跳数</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">IPPROTO_IPV6</span><span class="p">,</span> <span class="n">IPV6_MULTICAST_HOPS</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">arg</span><span class="p">,</span>
                       <span class="k">sizeof</span><span class="p">(</span><span class="n">arg</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">JNU_ThrowByNameWithLastError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span>
                                         <span class="n">JNU_JAVANETPKG</span> <span class="s">"SocketException"</span><span class="p">,</span>
                                         <span class="s">"Unable to set IPV6_MULTICAST_HOPS"</span><span class="p">);</span>
            <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="cp">#endif
</span>    <span class="k">return</span> <span class="n">fd</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>所以在open方法调用的时候socket已经创建，和老的API不一样这里不会在用到的时候才去创建socket</p>

<p>再看一下bind</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">ServerSocketChannel</span> <span class="nf">bind</span><span class="o">(</span><span class="nc">SocketAddress</span> <span class="n">local</span><span class="o">,</span> <span class="kt">int</span> <span class="n">backlog</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">stateLock</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ensureOpen</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">localAddress</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">AlreadyBoundException</span><span class="o">();</span>
        <span class="nc">InetSocketAddress</span> <span class="n">isa</span> <span class="o">=</span> <span class="o">(</span><span class="n">local</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
                                <span class="o">?</span> <span class="k">new</span> <span class="nc">InetSocketAddress</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
                                <span class="o">:</span> <span class="nc">Net</span><span class="o">.</span><span class="na">checkAddress</span><span class="o">(</span><span class="n">local</span><span class="o">);</span>
        <span class="nc">SecurityManager</span> <span class="n">sm</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">getSecurityManager</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">sm</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
            <span class="n">sm</span><span class="o">.</span><span class="na">checkListen</span><span class="o">(</span><span class="n">isa</span><span class="o">.</span><span class="na">getPort</span><span class="o">());</span>
        <span class="nc">NetHooks</span><span class="o">.</span><span class="na">beforeTcpBind</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="n">isa</span><span class="o">.</span><span class="na">getAddress</span><span class="o">(),</span> <span class="n">isa</span><span class="o">.</span><span class="na">getPort</span><span class="o">());</span>
      <span class="c1">//bind看下面</span>
        <span class="nc">Net</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="n">isa</span><span class="o">.</span><span class="na">getAddress</span><span class="o">(),</span> <span class="n">isa</span><span class="o">.</span><span class="na">getPort</span><span class="o">());</span>
      <span class="c1">//listen是一个native方法</span>
        <span class="nc">Net</span><span class="o">.</span><span class="na">listen</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="n">backlog</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">50</span> <span class="o">:</span> <span class="n">backlog</span><span class="o">);</span>
        <span class="n">localAddress</span> <span class="o">=</span> <span class="nc">Net</span><span class="o">.</span><span class="na">localAddress</span><span class="o">(</span><span class="n">fd</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">bind</span><span class="o">(</span><span class="nc">FileDescriptor</span> <span class="n">fd</span><span class="o">,</span> <span class="nc">InetAddress</span> <span class="n">addr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">port</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="nc">IOException</span>
<span class="o">{</span>
    <span class="n">bind</span><span class="o">(</span><span class="no">UNSPEC</span><span class="o">,</span> <span class="n">fd</span><span class="o">,</span> <span class="n">addr</span><span class="o">,</span> <span class="n">port</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">static</span> <span class="kt">void</span> <span class="nf">bind</span><span class="o">(</span><span class="nc">ProtocolFamily</span> <span class="n">family</span><span class="o">,</span> <span class="nc">FileDescriptor</span> <span class="n">fd</span><span class="o">,</span>
                    <span class="nc">InetAddress</span> <span class="n">addr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">port</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span>
<span class="o">{</span>
    <span class="kt">boolean</span> <span class="n">preferIPv6</span> <span class="o">=</span> <span class="n">isIPv6Available</span><span class="o">()</span> <span class="o">&amp;&amp;</span>
        <span class="o">(</span><span class="n">family</span> <span class="o">!=</span> <span class="nc">StandardProtocolFamily</span><span class="o">.</span><span class="na">INET</span><span class="o">);</span>
  <span class="c1">//这里调用native方法</span>
    <span class="n">bind0</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="n">preferIPv6</span><span class="o">,</span> <span class="n">exclusiveBind</span><span class="o">,</span> <span class="n">addr</span><span class="o">,</span> <span class="n">port</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里没什么好说的，就是做一些转换调用系统函数</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span>
<span class="nf">Java_sun_nio_ch_Net_bind0</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">clazz</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">fdo</span><span class="p">,</span> <span class="n">jboolean</span> <span class="n">preferIPv6</span><span class="p">,</span>
                          <span class="n">jboolean</span> <span class="n">useExclBind</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">iao</span><span class="p">,</span> <span class="kt">int</span> <span class="n">port</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">SOCKETADDRESS</span> <span class="n">sa</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">sa_len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">rv</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">NET_InetAddressToSockaddr</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">iao</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa_len</span><span class="p">,</span>
                                  <span class="n">preferIPv6</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">rv</span> <span class="o">=</span> <span class="n">NET_Bind</span><span class="p">(</span><span class="n">fdval</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">fdo</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="n">sa_len</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">rv</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">handleSocketError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">errno</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span>
<span class="nf">Java_sun_nio_ch_Net_listen</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">cl</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">fdo</span><span class="p">,</span> <span class="n">jint</span> <span class="n">backlog</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">listen</span><span class="p">(</span><span class="n">fdval</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">fdo</span><span class="p">),</span> <span class="n">backlog</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">handleSocketError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">errno</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>最后来看一下accrpt方法的实现</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">SocketChannel</span> <span class="nf">accept</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="n">acceptLock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">FileDescriptor</span> <span class="n">newfd</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileDescriptor</span><span class="o">();</span>
        <span class="nc">InetSocketAddress</span><span class="o">[]</span> <span class="n">isaa</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">InetSocketAddress</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>

        <span class="kt">boolean</span> <span class="n">blocking</span> <span class="o">=</span> <span class="n">isBlocking</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">begin</span><span class="o">(</span><span class="n">blocking</span><span class="o">);</span>
            <span class="k">do</span> <span class="o">{</span>
              <span class="c1">//这里实现功能</span>
                <span class="n">n</span> <span class="o">=</span> <span class="n">accept</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">fd</span><span class="o">,</span> <span class="n">newfd</span><span class="o">,</span> <span class="n">isaa</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">INTERRUPTED</span> <span class="o">&amp;&amp;</span> <span class="n">isOpen</span><span class="o">());</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">end</span><span class="o">(</span><span class="n">blocking</span><span class="o">,</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">);</span>
            <span class="k">assert</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">check</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>

        <span class="c1">// newly accepted socket is initially in blocking mode</span>
      <span class="c1">//新建的默认是阻塞的</span>
        <span class="nc">IOUtil</span><span class="o">.</span><span class="na">configureBlocking</span><span class="o">(</span><span class="n">newfd</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>

        <span class="nc">InetSocketAddress</span> <span class="n">isa</span> <span class="o">=</span> <span class="n">isaa</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
      <span class="c1">//使用新的描述符创建SocketChannelImpl</span>
        <span class="nc">SocketChannel</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SocketChannelImpl</span><span class="o">(</span><span class="n">provider</span><span class="o">(),</span> <span class="n">newfd</span><span class="o">,</span> <span class="n">isa</span><span class="o">);</span>

        <span class="c1">// check permitted to accept connections from the remote address</span>
        <span class="nc">SecurityManager</span> <span class="n">sm</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">getSecurityManager</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">sm</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">sm</span><span class="o">.</span><span class="na">checkAccept</span><span class="o">(</span><span class="n">isa</span><span class="o">.</span><span class="na">getAddress</span><span class="o">().</span><span class="na">getHostAddress</span><span class="o">(),</span> <span class="n">isa</span><span class="o">.</span><span class="na">getPort</span><span class="o">());</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">SecurityException</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">sc</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
                <span class="k">throw</span> <span class="n">x</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">sc</span><span class="o">;</span>

    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
        <span class="n">acceptLock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="kt">int</span> <span class="nf">accept</span><span class="o">(</span><span class="nc">FileDescriptor</span> <span class="n">ssfd</span><span class="o">,</span>
				<span class="nc">FileDescriptor</span> <span class="n">newfd</span><span class="o">,</span>
				<span class="nc">InetSocketAddress</span><span class="o">[]</span> <span class="n">isaa</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span>
<span class="o">{</span>
  <span class="c1">//native方法</span>
	<span class="k">return</span> <span class="nf">accept0</span><span class="o">(</span><span class="n">ssfd</span><span class="o">,</span> <span class="n">newfd</span><span class="o">,</span> <span class="n">isaa</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
<span class="nf">Java_sun_nio_ch_ServerSocketChannelImpl_accept0</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">,</span>
                                                <span class="n">jobject</span> <span class="n">ssfdo</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">newfdo</span><span class="p">,</span>
                                                <span class="n">jobjectArray</span> <span class="n">isaa</span><span class="p">)</span>
<span class="p">{</span>
  <span class="c1">//获取一堆需要的参数</span>
    <span class="n">jint</span> <span class="n">ssfd</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">ssfdo</span><span class="p">,</span> <span class="n">fd_fdID</span><span class="p">);</span>
    <span class="n">jint</span> <span class="n">newfd</span><span class="p">;</span>
    <span class="n">SOCKETADDRESS</span> <span class="n">sa</span><span class="p">;</span>
    <span class="n">socklen_t</span> <span class="n">sa_len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">SOCKETADDRESS</span><span class="p">);</span>
    <span class="n">jobject</span> <span class="n">remote_ia</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">jobject</span> <span class="n">isa</span><span class="p">;</span>
    <span class="n">jint</span> <span class="n">remote_port</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="cm">/*
     * accept connection but ignore ECONNABORTED indicating that
     * a connection was eagerly accepted but was reset before
     * accept() was called.
     */</span>
    <span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
      <span class="c1">//系统调用</span>
        <span class="n">newfd</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">ssfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">.</span><span class="n">sa</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa_len</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">newfd</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">!=</span> <span class="n">ECONNABORTED</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="cm">/* ECONNABORTED =&gt; restart accept */</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">newfd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EAGAIN</span> <span class="o">||</span> <span class="n">errno</span> <span class="o">==</span> <span class="n">EWOULDBLOCK</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">IOS_UNAVAILABLE</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EINTR</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">IOS_INTERRUPTED</span><span class="p">;</span>
        <span class="n">JNU_ThrowIOExceptionWithLastError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"Accept failed"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">IOS_THROWN</span><span class="p">;</span>
    <span class="p">}</span>

  <span class="c1">//设置描述符</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">SetIntField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">newfdo</span><span class="p">,</span> <span class="n">fd_fdID</span><span class="p">,</span> <span class="n">newfd</span><span class="p">);</span>
    <span class="n">remote_ia</span> <span class="o">=</span> <span class="n">NET_SockaddrToInetAddress</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">remote_port</span><span class="p">);</span>
    <span class="n">CHECK_NULL_RETURN</span><span class="p">(</span><span class="n">remote_ia</span><span class="p">,</span> <span class="n">IOS_THROWN</span><span class="p">);</span>
  <span class="c1">//创建InetSocketAddress对象</span>
    <span class="n">isa</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewObject</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">isa_class</span><span class="p">,</span> <span class="n">isa_ctorID</span><span class="p">,</span> <span class="n">remote_ia</span><span class="p">,</span> <span class="n">remote_port</span><span class="p">);</span>
    <span class="n">CHECK_NULL_RETURN</span><span class="p">(</span><span class="n">isa</span><span class="p">,</span> <span class="n">IOS_THROWN</span><span class="p">);</span>
  <span class="c1">//设置地址</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">SetObjectArrayElement</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">isaa</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">isa</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>后面就可以使用SocketChannel进行读写了</p>

<p>SocketChannel还可以使用open方法来创建 通常在客户端会这么使用，和ServerSocketChannel类似它最终创建SocketChannelImpl这里过程和ServerSocketChannel一模一样</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">SocketChannelImpl</span><span class="o">(</span><span class="nc">SelectorProvider</span> <span class="n">sp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">sp</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">fd</span> <span class="o">=</span> <span class="nc">Net</span><span class="o">.</span><span class="na">socket</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">fdVal</span> <span class="o">=</span> <span class="nc">IOUtil</span><span class="o">.</span><span class="na">fdVal</span><span class="o">(</span><span class="n">fd</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>接着connect可以连接到服务器端，这里不过多介绍了，基本可以参考之前的进行理解</p>

<p>而read&amp;write方法调用了IOUtil，这个和FileChannelImpl一样大家可以参考之前的文章<a href="https://www.zhoukaifan.com/2021-02-05/Java%E6%96%87%E4%BB%B6IO">Java文件IO</a></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">read</span><span class="o">(</span><span class="nc">ByteBuffer</span> <span class="n">buf</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="nc">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span>

    <span class="n">readLock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="kt">boolean</span> <span class="n">blocking</span> <span class="o">=</span> <span class="n">isBlocking</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">beginRead</span><span class="o">(</span><span class="n">blocking</span><span class="o">);</span>

            <span class="c1">// check if input is shutdown</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">isInputClosed</span><span class="o">)</span>
                <span class="k">return</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">EOF</span><span class="o">;</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">blocking</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">do</span> <span class="o">{</span>
                  <span class="c1">//后面的代码在之前的文章中讲过</span>
                    <span class="n">n</span> <span class="o">=</span> <span class="nc">IOUtil</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="n">buf</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">nd</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">INTERRUPTED</span> <span class="o">&amp;&amp;</span> <span class="n">isOpen</span><span class="o">());</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">n</span> <span class="o">=</span> <span class="nc">IOUtil</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="n">buf</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">nd</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">endRead</span><span class="o">(</span><span class="n">blocking</span><span class="o">,</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">isInputClosed</span><span class="o">)</span>
                <span class="k">return</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">EOF</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">normalize</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
        <span class="n">readLock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>凯帆</name><email>z@zhoukaifan.com</email></author><category term="Java" /><summary type="html"><![CDATA[本文只考虑Linux系统]]></summary></entry><entry><title type="html">Java文件IO</title><link href="/2021-02-05/Java%E6%96%87%E4%BB%B6IO" rel="alternate" type="text/html" title="Java文件IO" /><published>2021-02-05T00:00:00+08:00</published><updated>2021-02-05T00:00:00+08:00</updated><id>/2021-02-05/Java%E6%96%87%E4%BB%B6IO</id><content type="html" xml:base="/2021-02-05/Java%E6%96%87%E4%BB%B6IO"><![CDATA[<p>本文只考虑Linux系统</p>

<h3 id="传统io">传统IO</h3>

<ul>
  <li>FileOutputStream</li>
  <li>FileInputStream</li>
  <li>RandomAccessFile</li>
</ul>

<p>这些类的实现最终都会通过native方法调用c代码</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//FileOutputStream</span>
<span class="kd">private</span> <span class="kd">native</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="kt">int</span> <span class="n">b</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">append</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">;</span>
<span class="kd">private</span> <span class="kd">native</span> <span class="kt">void</span> <span class="nf">writeBytes</span><span class="o">(</span><span class="kt">byte</span> <span class="n">b</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">off</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">append</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">;</span>

<span class="c1">//FileInputStream</span>
<span class="kd">private</span> <span class="kd">native</span> <span class="kt">int</span> <span class="nf">read0</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">;</span>
<span class="kd">private</span> <span class="kd">native</span> <span class="kt">int</span> <span class="nf">readBytes</span><span class="o">(</span><span class="kt">byte</span> <span class="n">b</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">off</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">;</span>

<span class="c1">//RandomAccessFile</span>
<span class="kd">private</span> <span class="kd">native</span> <span class="kt">int</span> <span class="nf">read0</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">;</span>
<span class="kd">private</span> <span class="kd">native</span> <span class="kt">int</span> <span class="nf">readBytes</span><span class="o">(</span><span class="kt">byte</span> <span class="n">b</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">off</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">;</span>
<span class="kd">private</span> <span class="kd">native</span> <span class="kt">void</span> <span class="nf">write0</span><span class="o">(</span><span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">;</span>
<span class="kd">private</span> <span class="kd">native</span> <span class="kt">void</span> <span class="nf">writeBytes</span><span class="o">(</span><span class="kt">byte</span> <span class="n">b</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">off</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">;</span>
</code></pre></div></div>

<p>看一下native的实现</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//FileOutputStream_md.c</span>
<span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span>
<span class="nf">Java_java_io_FileOutputStream_write</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">,</span> <span class="n">jint</span> <span class="n">byte</span><span class="p">,</span> <span class="n">jboolean</span> <span class="n">append</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">writeSingle</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">byte</span><span class="p">,</span> <span class="n">append</span><span class="p">,</span> <span class="n">fos_fd</span><span class="p">);</span>
<span class="p">}</span>
<span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span>
<span class="nf">Java_java_io_FileOutputStream_writeBytes</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span>
    <span class="n">jobject</span> <span class="n">this</span><span class="p">,</span> <span class="n">jbyteArray</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">jint</span> <span class="n">off</span><span class="p">,</span> <span class="n">jint</span> <span class="n">len</span><span class="p">,</span> <span class="n">jboolean</span> <span class="n">append</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">writeBytes</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">off</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">append</span><span class="p">,</span> <span class="n">fos_fd</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">//FileInputStream.c</span>
<span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
<span class="nf">Java_java_io_FileInputStream_read0</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">readSingle</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">fis_fd</span><span class="p">);</span>
<span class="p">}</span>
<span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
<span class="nf">Java_java_io_FileInputStream_readBytes</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">,</span>
        <span class="n">jbyteArray</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">jint</span> <span class="n">off</span><span class="p">,</span> <span class="n">jint</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">readBytes</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">off</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">fis_fd</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">//RandomAccessFile.c</span>
<span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
<span class="nf">Java_java_io_RandomAccessFile_read0</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">readSingle</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">raf_fd</span><span class="p">);</span>
<span class="p">}</span>
<span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
<span class="nf">Java_java_io_RandomAccessFile_readBytes</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span>
    <span class="n">jobject</span> <span class="n">this</span><span class="p">,</span> <span class="n">jbyteArray</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">jint</span> <span class="n">off</span><span class="p">,</span> <span class="n">jint</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">readBytes</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">off</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">raf_fd</span><span class="p">);</span>
<span class="p">}</span>
<span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span>
<span class="nf">Java_java_io_RandomAccessFile_write0</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">,</span> <span class="n">jint</span> <span class="n">byte</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">writeSingle</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">byte</span><span class="p">,</span> <span class="n">JNI_FALSE</span><span class="p">,</span> <span class="n">raf_fd</span><span class="p">);</span>
<span class="p">}</span>
<span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span>
<span class="nf">Java_java_io_RandomAccessFile_writeBytes</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span>
    <span class="n">jobject</span> <span class="n">this</span><span class="p">,</span> <span class="n">jbyteArray</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">jint</span> <span class="n">off</span><span class="p">,</span> <span class="n">jint</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">writeBytes</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">off</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">JNI_FALSE</span><span class="p">,</span> <span class="n">raf_fd</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>最终的实现都在io_util.c里面</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">jint</span>
<span class="nf">readSingle</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">,</span> <span class="n">jfieldID</span> <span class="n">fid</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">jint</span> <span class="n">nread</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">ret</span><span class="p">;</span>
    <span class="n">FD</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">GET_FD</span><span class="p">(</span><span class="n">this</span><span class="p">,</span> <span class="n">fid</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">JNU_ThrowIOException</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"Stream Closed"</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">nread</span> <span class="o">=</span> <span class="n">IO_Read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ret</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">nread</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* EOF */</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">nread</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* error */</span>
        <span class="n">JNU_ThrowIOExceptionWithLastError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"Read error"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">ret</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/* The maximum size of a stack-allocated buffer.
 */</span>
<span class="cp">#define BUF_SIZE 8192
</span>
<span class="cm">/*
 * Returns true if the array slice defined by the given offset and length
 * is out of bounds.
 */</span>
<span class="k">static</span> <span class="kt">int</span>
<span class="nf">outOfBounds</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jint</span> <span class="n">off</span><span class="p">,</span> <span class="n">jint</span> <span class="n">len</span><span class="p">,</span> <span class="n">jbyteArray</span> <span class="n">array</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">((</span><span class="n">off</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span>
            <span class="p">(</span><span class="n">len</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span>
            <span class="c1">// We are very careful to avoid signed integer overflow,</span>
            <span class="c1">// the result of which is undefined in C.</span>
            <span class="p">((</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetArrayLength</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">array</span><span class="p">)</span> <span class="o">-</span> <span class="n">off</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">));</span>
<span class="p">}</span>

<span class="n">jint</span>
<span class="nf">readBytes</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">,</span> <span class="n">jbyteArray</span> <span class="n">bytes</span><span class="p">,</span>
          <span class="n">jint</span> <span class="n">off</span><span class="p">,</span> <span class="n">jint</span> <span class="n">len</span><span class="p">,</span> <span class="n">jfieldID</span> <span class="n">fid</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">jint</span> <span class="n">nread</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">stackBuf</span><span class="p">[</span><span class="n">BUF_SIZE</span><span class="p">];</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">FD</span> <span class="n">fd</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">IS_NULL</span><span class="p">(</span><span class="n">bytes</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">JNU_ThrowNullPointerException</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">outOfBounds</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">off</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">bytes</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">JNU_ThrowByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"java/lang/IndexOutOfBoundsException"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="n">BUF_SIZE</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">len</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">buf</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">JNU_ThrowOutOfMemoryError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">stackBuf</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">fd</span> <span class="o">=</span> <span class="n">GET_FD</span><span class="p">(</span><span class="n">this</span><span class="p">,</span> <span class="n">fid</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">JNU_ThrowIOException</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"Stream Closed"</span><span class="p">);</span>
        <span class="n">nread</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">nread</span> <span class="o">=</span> <span class="n">IO_Read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">nread</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">SetByteArrayRegion</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">off</span><span class="p">,</span> <span class="n">nread</span><span class="p">,</span> <span class="p">(</span><span class="n">jbyte</span> <span class="o">*</span><span class="p">)</span><span class="n">buf</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">nread</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">JNU_ThrowIOExceptionWithLastError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"Read error"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="cm">/* EOF */</span>
            <span class="n">nread</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">buf</span> <span class="o">!=</span> <span class="n">stackBuf</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">free</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">nread</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span>
<span class="nf">writeSingle</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">,</span> <span class="n">jint</span> <span class="n">byte</span><span class="p">,</span> <span class="n">jboolean</span> <span class="n">append</span><span class="p">,</span> <span class="n">jfieldID</span> <span class="n">fid</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Discard the 24 high-order bits of byte. See OutputStream#write(int)</span>
    <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span> <span class="n">byte</span><span class="p">;</span>
    <span class="n">jint</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">FD</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">GET_FD</span><span class="p">(</span><span class="n">this</span><span class="p">,</span> <span class="n">fid</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">JNU_ThrowIOException</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"Stream Closed"</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">append</span> <span class="o">==</span> <span class="n">JNI_TRUE</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">IO_Append</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">IO_Write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">JNU_ThrowIOExceptionWithLastError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"Write error"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span>
<span class="nf">writeBytes</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">,</span> <span class="n">jbyteArray</span> <span class="n">bytes</span><span class="p">,</span>
           <span class="n">jint</span> <span class="n">off</span><span class="p">,</span> <span class="n">jint</span> <span class="n">len</span><span class="p">,</span> <span class="n">jboolean</span> <span class="n">append</span><span class="p">,</span> <span class="n">jfieldID</span> <span class="n">fid</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">jint</span> <span class="n">n</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">stackBuf</span><span class="p">[</span><span class="n">BUF_SIZE</span><span class="p">];</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">FD</span> <span class="n">fd</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">IS_NULL</span><span class="p">(</span><span class="n">bytes</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">JNU_ThrowNullPointerException</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">outOfBounds</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">off</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">bytes</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">JNU_ThrowByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"java/lang/IndexOutOfBoundsException"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="n">BUF_SIZE</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">len</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">buf</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">JNU_ThrowOutOfMemoryError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">stackBuf</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetByteArrayRegion</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">off</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="p">(</span><span class="n">jbyte</span> <span class="o">*</span><span class="p">)</span><span class="n">buf</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ExceptionOccurred</span><span class="p">(</span><span class="n">env</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">off</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">fd</span> <span class="o">=</span> <span class="n">GET_FD</span><span class="p">(</span><span class="n">this</span><span class="p">,</span> <span class="n">fid</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">JNU_ThrowIOException</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"Stream Closed"</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">append</span> <span class="o">==</span> <span class="n">JNI_TRUE</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">n</span> <span class="o">=</span> <span class="n">IO_Append</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="o">+</span><span class="n">off</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">n</span> <span class="o">=</span> <span class="n">IO_Write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="o">+</span><span class="n">off</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">JNU_ThrowIOExceptionWithLastError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"Write error"</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">off</span> <span class="o">+=</span> <span class="n">n</span><span class="p">;</span>
            <span class="n">len</span> <span class="o">-=</span> <span class="n">n</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">buf</span> <span class="o">!=</span> <span class="n">stackBuf</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">free</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span>
<span class="nf">throwFileNotFoundException</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jstring</span> <span class="n">path</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
    <span class="kt">size_t</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">jobject</span> <span class="n">x</span><span class="p">;</span>
    <span class="n">jstring</span> <span class="n">why</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="n">n</span> <span class="o">=</span> <span class="n">getLastErrorString</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
<span class="cp">#ifdef WIN32
</span>        <span class="n">why</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span>
<span class="cp">#else
</span>        <span class="n">why</span> <span class="o">=</span> <span class="n">JNU_NewStringPlatform</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span>
<span class="cp">#endif
</span>        <span class="n">CHECK_NULL</span><span class="p">(</span><span class="n">why</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">JNU_NewObjectByName</span><span class="p">(</span><span class="n">env</span><span class="p">,</span>
                            <span class="s">"java/io/FileNotFoundException"</span><span class="p">,</span>
                            <span class="s">"(Ljava/lang/String;Ljava/lang/String;)V"</span><span class="p">,</span>
                            <span class="n">path</span><span class="p">,</span> <span class="n">why</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">Throw</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>其中的IO_Write与IO_Read是宏定义具体实现依赖操作系统</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define IO_Write handleWrite
#define IO_Read handleRead
</span></code></pre></div></div>

<p>unix目录下的io_util_md.c实现了类unix系统的实现，其本质就是调用了两个系统调用read与write</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">ssize_t</span>
<span class="nf">handleRead</span><span class="p">(</span><span class="n">FD</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="n">jint</span> <span class="n">len</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">ssize_t</span> <span class="n">result</span><span class="p">;</span>
    <span class="n">RESTARTABLE</span><span class="p">(</span><span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">len</span><span class="p">),</span> <span class="n">result</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">ssize_t</span>
<span class="nf">handleWrite</span><span class="p">(</span><span class="n">FD</span> <span class="n">fd</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="n">jint</span> <span class="n">len</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">ssize_t</span> <span class="n">result</span><span class="p">;</span>
    <span class="n">RESTARTABLE</span><span class="p">(</span><span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">len</span><span class="p">),</span> <span class="n">result</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">RESTARTABLE</span><span class="err">是一个宏定义在</span><span class="n">io_util_md</span><span class="p">.</span><span class="n">h</span><span class="err">中</span>
<span class="cp">#define RESTARTABLE(_cmd, _result) do { \
    do { \
        _result = _cmd; \
    } while((_result == -1) &amp;&amp; (errno == EINTR)); \
} while(0)
</span>
<span class="kt">void</span> <span class="nf">fileDescriptorClose</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">);</span>

<span class="cp">#ifdef MACOSX
</span><span class="n">jstring</span> <span class="nf">newStringPlatform</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">str</span><span class="p">);</span>
<span class="cp">#endif
</span></code></pre></div></div>

<p>read与write函数</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">read</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">)</span>
<span class="n">write</span><span class="p">(</span><span class="kt">int</span> <span class="n">__fd</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span> <span class="n">__buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">__nbyte</span><span class="p">)</span>
</code></pre></div></div>

<p>我们可以看到第二个参数是一个指针指向用户空间的要被写入或者读取的地址。</p>

<p>这两个系统调用会有一次用户态到内核态切换当然执行完成后还要切换回来，read会从内核空间中读取数据复制到用户空间的指定地址，这里会有一次复制，如果命中页缓存者直接读取，否则产生缺页，DMA会把设备中的数据复制到内核空间，这里也会有一次复制。JVM读取到从read方法返回的数据后会在用户态再进行一次复制，从堆外内存到JVM堆内存中。</p>

<p>所以整个流程是这样的(直接IO我们最后单独讨论)</p>

<p><img src="../img/bioreadcopy.png" alt="bioreadcopy" /></p>

<p>write也类似这里不过多介绍</p>

<h3 id="nio">NIO</h3>

<p>NIO提供了FileChannel来操作文件</p>

<p>FileChannel提供了更优秀的封装方式，并且使用了一些性能更好的系统调用。</p>

<p>我们从几个方面入手分析FileChannel</p>

<ul>
  <li>使用HeapByteBuffer的read与write</li>
  <li>使用DirectBuffer实现类的read与write</li>
  <li>map方法实现</li>
  <li>transferTo与transferFrom实现</li>
</ul>

<p>read与write基本类似这里我们就只分析一下read的具体实现</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">read</span><span class="o">(</span><span class="nc">ByteBuffer</span> <span class="n">dst</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="n">ensureOpen</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">readable</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NonReadableChannelException</span><span class="o">();</span>
    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">positionLock</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">direct</span><span class="o">)</span>
            <span class="nc">Util</span><span class="o">.</span><span class="na">checkChannelPositionAligned</span><span class="o">(</span><span class="n">position</span><span class="o">(),</span> <span class="n">alignment</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">ti</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">beginBlocking</span><span class="o">();</span>
            <span class="n">ti</span> <span class="o">=</span> <span class="n">threads</span><span class="o">.</span><span class="na">add</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">isOpen</span><span class="o">())</span>
                <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">do</span> <span class="o">{</span>
              <span class="c1">//这里调用工具类进行读取 代码看下面</span>
                <span class="n">n</span> <span class="o">=</span> <span class="nc">IOUtil</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="n">dst</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">direct</span><span class="o">,</span> <span class="n">alignment</span><span class="o">,</span> <span class="n">nd</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">while</span> <span class="o">((</span><span class="n">n</span> <span class="o">==</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">INTERRUPTED</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">isOpen</span><span class="o">());</span>
            <span class="k">return</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">normalize</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">threads</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">ti</span><span class="o">);</span>
            <span class="n">endBlocking</span><span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">);</span>
            <span class="k">assert</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">check</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">//IOUtil中的方法</span>
<span class="kd">static</span> <span class="kt">int</span> <span class="nf">read</span><span class="o">(</span><span class="nc">FileDescriptor</span> <span class="n">fd</span><span class="o">,</span> <span class="nc">ByteBuffer</span> <span class="n">dst</span><span class="o">,</span> <span class="kt">long</span> <span class="n">position</span><span class="o">,</span>
                <span class="kt">boolean</span> <span class="n">directIO</span><span class="o">,</span> <span class="kt">int</span> <span class="n">alignment</span><span class="o">,</span> <span class="nc">NativeDispatcher</span> <span class="n">nd</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="nc">IOException</span>
<span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">dst</span><span class="o">.</span><span class="na">isReadOnly</span><span class="o">())</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"Read-only buffer"</span><span class="o">);</span>
  <span class="c1">//如果是DirectBuffer实现类直接开始读取</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">dst</span> <span class="k">instanceof</span> <span class="nc">DirectBuffer</span><span class="o">)</span>
        <span class="k">return</span> <span class="nf">readIntoNativeBuffer</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="n">dst</span><span class="o">,</span> <span class="n">position</span><span class="o">,</span> <span class="n">directIO</span><span class="o">,</span> <span class="n">alignment</span><span class="o">,</span> <span class="n">nd</span><span class="o">);</span>

    <span class="c1">// Substitute a native buffer</span>
  <span class="c1">//创建一个临时的DirectBuffer实现类</span>
    <span class="nc">ByteBuffer</span> <span class="n">bb</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">rem</span> <span class="o">=</span> <span class="n">dst</span><span class="o">.</span><span class="na">remaining</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">directIO</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Util</span><span class="o">.</span><span class="na">checkRemainingBufferSizeAligned</span><span class="o">(</span><span class="n">rem</span><span class="o">,</span> <span class="n">alignment</span><span class="o">);</span>
        <span class="n">bb</span> <span class="o">=</span> <span class="nc">Util</span><span class="o">.</span><span class="na">getTemporaryAlignedDirectBuffer</span><span class="o">(</span><span class="n">rem</span><span class="o">,</span> <span class="n">alignment</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="n">bb</span> <span class="o">=</span> <span class="nc">Util</span><span class="o">.</span><span class="na">getTemporaryDirectBuffer</span><span class="o">(</span><span class="n">rem</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="c1">//读取到临时的实现类中</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">readIntoNativeBuffer</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="n">bb</span><span class="o">,</span> <span class="n">position</span><span class="o">,</span> <span class="n">directIO</span><span class="o">,</span> <span class="n">alignment</span><span class="o">,</span><span class="n">nd</span><span class="o">);</span>
        <span class="n">bb</span><span class="o">.</span><span class="na">flip</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
          <span class="c1">//复制到非DirectBuffer接口实现的ByteBuffer对象中</span>
            <span class="n">dst</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">bb</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
        <span class="nc">Util</span><span class="o">.</span><span class="na">offerFirstTemporaryDirectBuffer</span><span class="o">(</span><span class="n">bb</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">readIntoNativeBuffer</span><span class="o">(</span><span class="nc">FileDescriptor</span> <span class="n">fd</span><span class="o">,</span> <span class="nc">ByteBuffer</span> <span class="n">bb</span><span class="o">,</span>
                                        <span class="kt">long</span> <span class="n">position</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">directIO</span><span class="o">,</span>
                                        <span class="kt">int</span> <span class="n">alignment</span><span class="o">,</span> <span class="nc">NativeDispatcher</span> <span class="n">nd</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="nc">IOException</span>
<span class="o">{</span>
    <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">bb</span><span class="o">.</span><span class="na">position</span><span class="o">();</span>
    <span class="kt">int</span> <span class="n">lim</span> <span class="o">=</span> <span class="n">bb</span><span class="o">.</span><span class="na">limit</span><span class="o">();</span>
    <span class="k">assert</span> <span class="o">(</span><span class="n">pos</span> <span class="o">&lt;=</span> <span class="n">lim</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">rem</span> <span class="o">=</span> <span class="o">(</span><span class="n">pos</span> <span class="o">&lt;=</span> <span class="n">lim</span> <span class="o">?</span> <span class="n">lim</span> <span class="o">-</span> <span class="n">pos</span> <span class="o">:</span> <span class="mi">0</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">directIO</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Util</span><span class="o">.</span><span class="na">checkBufferPositionAligned</span><span class="o">(</span><span class="n">bb</span><span class="o">,</span> <span class="n">pos</span><span class="o">,</span> <span class="n">alignment</span><span class="o">);</span>
        <span class="nc">Util</span><span class="o">.</span><span class="na">checkRemainingBufferSizeAligned</span><span class="o">(</span><span class="n">rem</span><span class="o">,</span> <span class="n">alignment</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">rem</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">position</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
      <span class="c1">//nd是FileDispatcherImpl对象</span>
      <span class="c1">//指定position读取数据</span>
      <span class="c1">//((DirectBuffer)bb).address()注意这个 把DirectBuffer实现类对应的用户空间的内存地址传递给native方法</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">nd</span><span class="o">.</span><span class="na">pread</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="o">((</span><span class="nc">DirectBuffer</span><span class="o">)</span><span class="n">bb</span><span class="o">).</span><span class="na">address</span><span class="o">()</span> <span class="o">+</span> <span class="n">pos</span><span class="o">,</span> <span class="n">rem</span><span class="o">,</span> <span class="n">position</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
      <span class="c1">//顺序读取数据</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">nd</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="o">((</span><span class="nc">DirectBuffer</span><span class="o">)</span><span class="n">bb</span><span class="o">).</span><span class="na">address</span><span class="o">()</span> <span class="o">+</span> <span class="n">pos</span><span class="o">,</span> <span class="n">rem</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
        <span class="n">bb</span><span class="o">.</span><span class="na">position</span><span class="o">(</span><span class="n">pos</span> <span class="o">+</span> <span class="n">n</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">//FileDispatcherImpl中的方法</span>
<span class="kt">int</span> <span class="nf">read</span><span class="o">(</span><span class="nc">FileDescriptor</span> <span class="n">fd</span><span class="o">,</span> <span class="kt">long</span> <span class="n">address</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
  <span class="c1">//native方法</span>
    <span class="k">return</span> <span class="nf">read0</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="n">address</span><span class="o">,</span> <span class="n">len</span><span class="o">);</span>
<span class="o">}</span>

<span class="kt">int</span> <span class="nf">pread</span><span class="o">(</span><span class="nc">FileDescriptor</span> <span class="n">fd</span><span class="o">,</span> <span class="kt">long</span> <span class="n">address</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">,</span> <span class="kt">long</span> <span class="n">position</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="nc">IOException</span>
<span class="o">{</span>
  <span class="c1">//native方法</span>
    <span class="k">return</span> <span class="nf">pread0</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="n">address</span><span class="o">,</span> <span class="n">len</span><span class="o">,</span> <span class="n">position</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
<span class="nf">Java_sun_nio_ch_FileDispatcherImpl_read0</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">clazz</span><span class="p">,</span>
                             <span class="n">jobject</span> <span class="n">fdo</span><span class="p">,</span> <span class="n">jlong</span> <span class="n">address</span><span class="p">,</span> <span class="n">jint</span> <span class="n">len</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">jint</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">fdval</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">fdo</span><span class="p">);</span>
  <span class="c1">//指针指向 DirectBuffer实现类对应的内存地址，所以没有堆外复制到堆内的操作</span>
    <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">jlong_to_ptr</span><span class="p">(</span><span class="n">address</span><span class="p">);</span>
  <span class="c1">//最终调用read方法 </span>
    <span class="k">return</span> <span class="n">convertReturnVal</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">len</span><span class="p">),</span> <span class="n">JNI_TRUE</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
<span class="nf">Java_sun_nio_ch_FileDispatcherImpl_pread0</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">clazz</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">fdo</span><span class="p">,</span>
                            <span class="n">jlong</span> <span class="n">address</span><span class="p">,</span> <span class="n">jint</span> <span class="n">len</span><span class="p">,</span> <span class="n">jlong</span> <span class="n">offset</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">jint</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">fdval</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">fdo</span><span class="p">);</span>
  <span class="c1">//类似上面</span>
    <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">jlong_to_ptr</span><span class="p">(</span><span class="n">address</span><span class="p">);</span>
  <span class="c1">//最终调用pread64方法</span>
    <span class="k">return</span> <span class="n">convertReturnVal</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">pread64</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">offset</span><span class="p">),</span> <span class="n">JNI_TRUE</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>所以如果使用HeapByteBuffer整个过程和传统IO 差不多</p>

<p><img src="../img/bioreadcopy.png" alt="bioreadcopy" /></p>

<p>但是如果使用DirectBuffer实现类整个过程就少了一次复制，但是前提是这部分数据不会再堆内存中使用否则当你调用ByteBuffer的read的时候仍然会通过UnSafe类中的方法把数据复制到堆内存中</p>

<p><img src="../img/nioreadcopy.png" alt="bioreadcopy" /></p>

<h4 id="map方法实现">map方法实现</h4>

<p>这个方法很长我门就看看我们关系的几行关键的代码</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">MappedByteBuffer</span> <span class="nf">map</span><span class="o">(</span><span class="nc">MapMode</span> <span class="n">mode</span><span class="o">,</span> <span class="kt">long</span> <span class="n">position</span><span class="o">,</span> <span class="kt">long</span> <span class="n">size</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="nc">IOException</span>
<span class="o">{</span>
    <span class="n">ensureOpen</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">mode</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">(</span><span class="s">"Mode is null"</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">position</span> <span class="o">&lt;</span> <span class="mi">0L</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"Negative position"</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">&lt;</span> <span class="mi">0L</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"Negative size"</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">position</span> <span class="o">+</span> <span class="n">size</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"Position + size overflow"</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">&gt;</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"Size exceeds Integer.MAX_VALUE"</span><span class="o">);</span>

    <span class="kt">int</span> <span class="n">imode</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">mode</span> <span class="o">==</span> <span class="nc">MapMode</span><span class="o">.</span><span class="na">READ_ONLY</span><span class="o">)</span>
        <span class="n">imode</span> <span class="o">=</span> <span class="no">MAP_RO</span><span class="o">;</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">mode</span> <span class="o">==</span> <span class="nc">MapMode</span><span class="o">.</span><span class="na">READ_WRITE</span><span class="o">)</span>
        <span class="n">imode</span> <span class="o">=</span> <span class="no">MAP_RW</span><span class="o">;</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">mode</span> <span class="o">==</span> <span class="nc">MapMode</span><span class="o">.</span><span class="na">PRIVATE</span><span class="o">)</span>
        <span class="n">imode</span> <span class="o">=</span> <span class="no">MAP_PV</span><span class="o">;</span>
    <span class="k">assert</span> <span class="o">(</span><span class="n">imode</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">((</span><span class="n">mode</span> <span class="o">!=</span> <span class="nc">MapMode</span><span class="o">.</span><span class="na">READ_ONLY</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">writable</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NonWritableChannelException</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">readable</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NonReadableChannelException</span><span class="o">();</span>

    <span class="kt">long</span> <span class="n">addr</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">ti</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="n">beginBlocking</span><span class="o">();</span>
        <span class="n">ti</span> <span class="o">=</span> <span class="n">threads</span><span class="o">.</span><span class="na">add</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">isOpen</span><span class="o">())</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>

        <span class="kt">long</span> <span class="n">mapSize</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">pagePosition</span><span class="o">;</span>
        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">positionLock</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">long</span> <span class="n">filesize</span><span class="o">;</span>
            <span class="k">do</span> <span class="o">{</span>
                <span class="n">filesize</span> <span class="o">=</span> <span class="n">nd</span><span class="o">.</span><span class="na">size</span><span class="o">(</span><span class="n">fd</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">while</span> <span class="o">((</span><span class="n">filesize</span> <span class="o">==</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">INTERRUPTED</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">isOpen</span><span class="o">());</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">isOpen</span><span class="o">())</span>
                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">filesize</span> <span class="o">&lt;</span> <span class="n">position</span> <span class="o">+</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// Extend file size</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">writable</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"Channel not open for writing "</span> <span class="o">+</span>
                        <span class="s">"- cannot extend file to required size"</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="kt">int</span> <span class="n">rv</span><span class="o">;</span>
                <span class="k">do</span> <span class="o">{</span>
                    <span class="n">rv</span> <span class="o">=</span> <span class="n">nd</span><span class="o">.</span><span class="na">truncate</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="n">position</span> <span class="o">+</span> <span class="n">size</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">while</span> <span class="o">((</span><span class="n">rv</span> <span class="o">==</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">INTERRUPTED</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">isOpen</span><span class="o">());</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">isOpen</span><span class="o">())</span>
                    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">addr</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                <span class="c1">// a valid file descriptor is not required</span>
                <span class="nc">FileDescriptor</span> <span class="n">dummy</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileDescriptor</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">((!</span><span class="n">writable</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">imode</span> <span class="o">==</span> <span class="no">MAP_RO</span><span class="o">))</span>
                    <span class="k">return</span> <span class="nc">Util</span><span class="o">.</span><span class="na">newMappedByteBufferR</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">dummy</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
                <span class="k">else</span>
                    <span class="k">return</span> <span class="nc">Util</span><span class="o">.</span><span class="na">newMappedByteBuffer</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">dummy</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="n">pagePosition</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">position</span> <span class="o">%</span> <span class="n">allocationGranularity</span><span class="o">);</span>
            <span class="kt">long</span> <span class="n">mapPosition</span> <span class="o">=</span> <span class="n">position</span> <span class="o">-</span> <span class="n">pagePosition</span><span class="o">;</span>
            <span class="n">mapSize</span> <span class="o">=</span> <span class="n">size</span> <span class="o">+</span> <span class="n">pagePosition</span><span class="o">;</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="c1">// If map0 did not throw an exception, the address is valid</span>
              <span class="c1">//=====这里返回一个内存地址map0是一个native方法=====</span>
                <span class="n">addr</span> <span class="o">=</span> <span class="n">map0</span><span class="o">(</span><span class="n">imode</span><span class="o">,</span> <span class="n">mapPosition</span><span class="o">,</span> <span class="n">mapSize</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">OutOfMemoryError</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// An OutOfMemoryError may indicate that we've exhausted</span>
                <span class="c1">// memory so force gc and re-attempt map</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">gc</span><span class="o">();</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">interrupt</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="n">addr</span> <span class="o">=</span> <span class="n">map0</span><span class="o">(</span><span class="n">imode</span><span class="o">,</span> <span class="n">mapPosition</span><span class="o">,</span> <span class="n">mapSize</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">OutOfMemoryError</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c1">// After a second OOME, fail</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"Map failed"</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="c1">// synchronized</span>

        <span class="c1">// On Windows, and potentially other platforms, we need an open</span>
        <span class="c1">// file descriptor for some mapping operations.</span>
        <span class="nc">FileDescriptor</span> <span class="n">mfd</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">mfd</span> <span class="o">=</span> <span class="n">nd</span><span class="o">.</span><span class="na">duplicateForMapping</span><span class="o">(</span><span class="n">fd</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ioe</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">unmap0</span><span class="o">(</span><span class="n">addr</span><span class="o">,</span> <span class="n">mapSize</span><span class="o">);</span>
            <span class="k">throw</span> <span class="n">ioe</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">assert</span> <span class="o">(</span><span class="nc">IOStatus</span><span class="o">.</span><span class="na">checkAll</span><span class="o">(</span><span class="n">addr</span><span class="o">));</span>
        <span class="k">assert</span> <span class="o">(</span><span class="n">addr</span> <span class="o">%</span> <span class="n">allocationGranularity</span> <span class="o">==</span> <span class="mi">0</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">isize</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">size</span><span class="o">;</span>
        <span class="nc">Unmapper</span> <span class="n">um</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Unmapper</span><span class="o">(</span><span class="n">addr</span><span class="o">,</span> <span class="n">mapSize</span><span class="o">,</span> <span class="n">isize</span><span class="o">,</span> <span class="n">mfd</span><span class="o">);</span>
        <span class="c1">//=====用刚刚返回的地址创建一个DirectBuffer实现类=====</span>
        <span class="k">if</span> <span class="o">((!</span><span class="n">writable</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">imode</span> <span class="o">==</span> <span class="no">MAP_RO</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">Util</span><span class="o">.</span><span class="na">newMappedByteBufferR</span><span class="o">(</span><span class="n">isize</span><span class="o">,</span>
                                                <span class="n">addr</span> <span class="o">+</span> <span class="n">pagePosition</span><span class="o">,</span>
                                                <span class="n">mfd</span><span class="o">,</span>
                                                <span class="n">um</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">Util</span><span class="o">.</span><span class="na">newMappedByteBuffer</span><span class="o">(</span><span class="n">isize</span><span class="o">,</span>
                                            <span class="n">addr</span> <span class="o">+</span> <span class="n">pagePosition</span><span class="o">,</span>
                                            <span class="n">mfd</span><span class="o">,</span>
                                            <span class="n">um</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
        <span class="n">threads</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">ti</span><span class="o">);</span>
        <span class="n">endBlocking</span><span class="o">(</span><span class="nc">IOStatus</span><span class="o">.</span><span class="na">checkAll</span><span class="o">(</span><span class="n">addr</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">JNIEXPORT</span> <span class="n">jlong</span> <span class="n">JNICALL</span>
<span class="nf">Java_sun_nio_ch_FileChannelImpl_map0</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">,</span>
                                     <span class="n">jint</span> <span class="n">prot</span><span class="p">,</span> <span class="n">jlong</span> <span class="n">off</span><span class="p">,</span> <span class="n">jlong</span> <span class="n">len</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">void</span> <span class="o">*</span><span class="n">mapAddress</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="c1">//获取文件描述符</span>
    <span class="n">jobject</span> <span class="n">fdo</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetObjectField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">this</span><span class="p">,</span> <span class="n">chan_fd</span><span class="p">);</span>
    <span class="n">jint</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">fdval</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">fdo</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">protections</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">flags</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="c1">//权限共享标示转换</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">prot</span> <span class="o">==</span> <span class="n">sun_nio_ch_FileChannelImpl_MAP_RO</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">protections</span> <span class="o">=</span> <span class="n">PROT_READ</span><span class="p">;</span>
        <span class="n">flags</span> <span class="o">=</span> <span class="n">MAP_SHARED</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">prot</span> <span class="o">==</span> <span class="n">sun_nio_ch_FileChannelImpl_MAP_RW</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">protections</span> <span class="o">=</span> <span class="n">PROT_WRITE</span> <span class="o">|</span> <span class="n">PROT_READ</span><span class="p">;</span>
        <span class="n">flags</span> <span class="o">=</span> <span class="n">MAP_SHARED</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">prot</span> <span class="o">==</span> <span class="n">sun_nio_ch_FileChannelImpl_MAP_PV</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">protections</span> <span class="o">=</span>  <span class="n">PROT_WRITE</span> <span class="o">|</span> <span class="n">PROT_READ</span><span class="p">;</span>
        <span class="n">flags</span> <span class="o">=</span> <span class="n">MAP_PRIVATE</span><span class="p">;</span>
    <span class="p">}</span>

  <span class="c1">//成功返回映射的地址 mmap64是一个宏定义 #define mmap64 mmap</span>
  <span class="c1">//mmap函数可以参考这里https://linux.die.net/man/2/mmap</span>
    <span class="n">mapAddress</span> <span class="o">=</span> <span class="n">mmap64</span><span class="p">(</span>
        <span class="mi">0</span><span class="p">,</span>                    <span class="cm">/* Let OS decide location */</span>
        <span class="n">len</span><span class="p">,</span>                  <span class="cm">/* Number of bytes to map */</span>
        <span class="n">protections</span><span class="p">,</span>          <span class="cm">/* File permissions */</span>
        <span class="n">flags</span><span class="p">,</span>                <span class="cm">/* Changes are shared */</span>
        <span class="n">fd</span><span class="p">,</span>                   <span class="cm">/* File descriptor of mapped file */</span>
        <span class="n">off</span><span class="p">);</span>                 <span class="cm">/* Offset into file */</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">mapAddress</span> <span class="o">==</span> <span class="n">MAP_FAILED</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">ENOMEM</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">JNU_ThrowOutOfMemoryError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"Map failed"</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">IOS_THROWN</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">handle</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">"Map failed"</span><span class="p">);</span>
    <span class="p">}</span>
	<span class="c1">//返回地址</span>
    <span class="k">return</span> <span class="p">((</span><span class="n">jlong</span><span class="p">)</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="n">mapAddress</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>mmap可以避免内核空间到用户空间的复制，他建立了一个映射实际上是同一个物理地址，然后把地址直接交给DirectBuffer实现类，也就是说这里取得一个ByteBuffer比传统IO少了2次复制</p>

<p><img src="../img/linuxmmap.png" alt="bioreadcopy" /></p>

<h4 id="transferto与transferfrom实现">transferTo与transferFrom实现</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">long</span> <span class="nf">transferTo</span><span class="o">(</span><span class="kt">long</span> <span class="n">position</span><span class="o">,</span> <span class="kt">long</span> <span class="n">count</span><span class="o">,</span>
                       <span class="nc">WritableByteChannel</span> <span class="n">target</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="nc">IOException</span>
<span class="o">{</span>
    <span class="n">ensureOpen</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">target</span><span class="o">.</span><span class="na">isOpen</span><span class="o">())</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ClosedChannelException</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">readable</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NonReadableChannelException</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="k">instanceof</span> <span class="nc">FileChannelImpl</span> <span class="o">&amp;&amp;</span>
        <span class="o">!((</span><span class="nc">FileChannelImpl</span><span class="o">)</span><span class="n">target</span><span class="o">).</span><span class="na">writable</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NonWritableChannelException</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">((</span><span class="n">position</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">count</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">))</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">();</span>
    <span class="kt">long</span> <span class="n">sz</span> <span class="o">=</span> <span class="n">size</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">position</span> <span class="o">&gt;</span> <span class="n">sz</span><span class="o">)</span>
        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">icount</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">count</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">((</span><span class="n">sz</span> <span class="o">-</span> <span class="n">position</span><span class="o">)</span> <span class="o">&lt;</span> <span class="n">icount</span><span class="o">)</span>
        <span class="n">icount</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">sz</span> <span class="o">-</span> <span class="n">position</span><span class="o">);</span>

    <span class="kt">long</span> <span class="n">n</span><span class="o">;</span>

    <span class="c1">// Attempt a direct transfer, if the kernel supports it</span>
  <span class="c1">//在linux系统中先使用sendfile</span>
    <span class="k">if</span> <span class="o">((</span><span class="n">n</span> <span class="o">=</span> <span class="n">transferToDirectly</span><span class="o">(</span><span class="n">position</span><span class="o">,</span> <span class="n">icount</span><span class="o">,</span> <span class="n">target</span><span class="o">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span>
        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>

    <span class="c1">// Attempt a mapped transfer, but only to trusted channel types</span>
  <span class="c1">//不行的话使用map+write</span>
    <span class="k">if</span> <span class="o">((</span><span class="n">n</span> <span class="o">=</span> <span class="n">transferToTrustedChannel</span><span class="o">(</span><span class="n">position</span><span class="o">,</span> <span class="n">icount</span><span class="o">,</span> <span class="n">target</span><span class="o">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span>
        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>

    <span class="c1">// Slow path for untrusted targets</span>
  <span class="c1">//使用最原始的read+write</span>
    <span class="k">return</span> <span class="nf">transferToArbitraryChannel</span><span class="o">(</span><span class="n">position</span><span class="o">,</span> <span class="n">icount</span><span class="o">,</span> <span class="n">target</span><span class="o">);</span>
<span class="o">}</span>


<span class="kd">public</span> <span class="kt">long</span> <span class="nf">transferFrom</span><span class="o">(</span><span class="nc">ReadableByteChannel</span> <span class="n">src</span><span class="o">,</span>
                            <span class="kt">long</span> <span class="n">position</span><span class="o">,</span> <span class="kt">long</span> <span class="n">count</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="nc">IOException</span>
<span class="o">{</span>
    <span class="n">ensureOpen</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">src</span><span class="o">.</span><span class="na">isOpen</span><span class="o">())</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ClosedChannelException</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">writable</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NonWritableChannelException</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">((</span><span class="n">position</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">count</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">))</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">position</span> <span class="o">&gt;</span> <span class="n">size</span><span class="o">())</span>
        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
  <span class="c1">//如果来源是文件使用map加write</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">src</span> <span class="k">instanceof</span> <span class="nc">FileChannelImpl</span><span class="o">)</span>
        <span class="k">return</span> <span class="nf">transferFromFileChannel</span><span class="o">((</span><span class="nc">FileChannelImpl</span><span class="o">)</span><span class="n">src</span><span class="o">,</span>
                                        <span class="n">position</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
  <span class="c1">//不然使用最原始的read+wirte</span>
    <span class="k">return</span> <span class="nf">transferFromArbitraryChannel</span><span class="o">(</span><span class="n">src</span><span class="o">,</span> <span class="n">position</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>其实这里有两个地方是可以进一步优化的，一个是transferFromArbitraryChannel与transferToArbitraryChannel的实现是使用了HeapByteBuffer这意味着数据还要在堆外内存到堆内的复制，单纯从复制次数上面来说，这一次复制可以被优化掉。</p>

<p>第二个是transferFrom中也可以用sendfile实现因为在2.6.33以后的linux sendfile的目标设备可以是磁盘不仅仅限于socket 参考https://linux.die.net/man/2/sendfile64</p>

<p>不过在实际使用中个人认为可以尽可能避免transferFrom，分析一下使用场景就能发现，都是块设备（文件是块设备）的时候可以把transferFrom转换成transferTo，来源是网络这类设备的时候传输到文件并不支持使用sendfile或者mmap系统调用会直接降级到最差read+write方式进行复制。</p>

<p>我们继续看JDK的实现transferFrom类似不再单独分析</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">long</span> <span class="nf">transferToDirectly</span><span class="o">(</span><span class="kt">long</span> <span class="n">position</span><span class="o">,</span> <span class="kt">int</span> <span class="n">icount</span><span class="o">,</span>
                                <span class="nc">WritableByteChannel</span> <span class="n">target</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="nc">IOException</span>
<span class="o">{</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">transferSupported</span><span class="o">)</span>
        <span class="k">return</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">UNSUPPORTED</span><span class="o">;</span>

    <span class="nc">FileDescriptor</span> <span class="n">targetFD</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="k">instanceof</span> <span class="nc">FileChannelImpl</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">fileSupported</span><span class="o">)</span>
            <span class="k">return</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">UNSUPPORTED_CASE</span><span class="o">;</span>
        <span class="n">targetFD</span> <span class="o">=</span> <span class="o">((</span><span class="nc">FileChannelImpl</span><span class="o">)</span><span class="n">target</span><span class="o">).</span><span class="na">fd</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="k">instanceof</span> <span class="nc">SelChImpl</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Direct transfer to pipe causes EINVAL on some configurations</span>
        <span class="k">if</span> <span class="o">((</span><span class="n">target</span> <span class="k">instanceof</span> <span class="nc">SinkChannelImpl</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">pipeSupported</span><span class="o">)</span>
            <span class="k">return</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">UNSUPPORTED_CASE</span><span class="o">;</span>

        <span class="c1">// Platform-specific restrictions. Now there is only one:</span>
        <span class="c1">// Direct transfer to non-blocking channel could be forbidden</span>
        <span class="nc">SelectableChannel</span> <span class="n">sc</span> <span class="o">=</span> <span class="o">(</span><span class="nc">SelectableChannel</span><span class="o">)</span><span class="n">target</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">nd</span><span class="o">.</span><span class="na">canTransferToDirectly</span><span class="o">(</span><span class="n">sc</span><span class="o">))</span>
            <span class="k">return</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">UNSUPPORTED_CASE</span><span class="o">;</span>

        <span class="n">targetFD</span> <span class="o">=</span> <span class="o">((</span><span class="nc">SelChImpl</span><span class="o">)</span><span class="n">target</span><span class="o">).</span><span class="na">getFD</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">targetFD</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
        <span class="k">return</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">UNSUPPORTED</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">thisFDVal</span> <span class="o">=</span> <span class="nc">IOUtil</span><span class="o">.</span><span class="na">fdVal</span><span class="o">(</span><span class="n">fd</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">targetFDVal</span> <span class="o">=</span> <span class="nc">IOUtil</span><span class="o">.</span><span class="na">fdVal</span><span class="o">(</span><span class="n">targetFD</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">thisFDVal</span> <span class="o">==</span> <span class="n">targetFDVal</span><span class="o">)</span> <span class="c1">// Not supported on some configurations</span>
        <span class="k">return</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">UNSUPPORTED</span><span class="o">;</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">nd</span><span class="o">.</span><span class="na">transferToDirectlyNeedsPositionLock</span><span class="o">())</span> <span class="o">{</span>
        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">positionLock</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">long</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">position</span><span class="o">();</span>
            <span class="k">try</span> <span class="o">{</span>
              <span class="c1">//这里进行复制</span>
                <span class="k">return</span> <span class="nf">transferToDirectlyInternal</span><span class="o">(</span><span class="n">position</span><span class="o">,</span> <span class="n">icount</span><span class="o">,</span>
                                                  <span class="n">target</span><span class="o">,</span> <span class="n">targetFD</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
                <span class="n">position</span><span class="o">(</span><span class="n">pos</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">transferToDirectlyInternal</span><span class="o">(</span><span class="n">position</span><span class="o">,</span> <span class="n">icount</span><span class="o">,</span> <span class="n">target</span><span class="o">,</span> <span class="n">targetFD</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>


<span class="kd">public</span> <span class="kt">long</span> <span class="nf">transferFrom</span><span class="o">(</span><span class="nc">ReadableByteChannel</span> <span class="n">src</span><span class="o">,</span>
                        <span class="kt">long</span> <span class="n">position</span><span class="o">,</span> <span class="kt">long</span> <span class="n">count</span><span class="o">)</span>
<span class="kd">throws</span> <span class="nc">IOException</span>
<span class="o">{</span>
<span class="n">ensureOpen</span><span class="o">();</span>
<span class="k">if</span> <span class="o">(!</span><span class="n">src</span><span class="o">.</span><span class="na">isOpen</span><span class="o">())</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ClosedChannelException</span><span class="o">();</span>
<span class="k">if</span> <span class="o">(!</span><span class="n">writable</span><span class="o">)</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">NonWritableChannelException</span><span class="o">();</span>
<span class="k">if</span> <span class="o">((</span><span class="n">position</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">count</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">))</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">();</span>
<span class="k">if</span> <span class="o">(</span><span class="n">position</span> <span class="o">&gt;</span> <span class="n">size</span><span class="o">())</span>
    <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
<span class="k">if</span> <span class="o">(</span><span class="n">src</span> <span class="k">instanceof</span> <span class="nc">FileChannelImpl</span><span class="o">)</span>
    <span class="k">return</span> <span class="nf">transferFromFileChannel</span><span class="o">((</span><span class="nc">FileChannelImpl</span><span class="o">)</span><span class="n">src</span><span class="o">,</span>
                                    <span class="n">position</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>

<span class="k">return</span> <span class="nf">transferFromArbitraryChannel</span><span class="o">(</span><span class="n">src</span><span class="o">,</span> <span class="n">position</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="kt">long</span> <span class="nf">transferToDirectlyInternal</span><span class="o">(</span><span class="kt">long</span> <span class="n">position</span><span class="o">,</span> <span class="kt">int</span> <span class="n">icount</span><span class="o">,</span>
                                        <span class="nc">WritableByteChannel</span> <span class="n">target</span><span class="o">,</span>
                                        <span class="nc">FileDescriptor</span> <span class="n">targetFD</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="nc">IOException</span>
<span class="o">{</span>
    <span class="k">assert</span> <span class="o">!</span><span class="n">nd</span><span class="o">.</span><span class="na">transferToDirectlyNeedsPositionLock</span><span class="o">()</span> <span class="o">||</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">holdsLock</span><span class="o">(</span><span class="n">positionLock</span><span class="o">);</span>

    <span class="kt">long</span> <span class="n">n</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">ti</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="n">beginBlocking</span><span class="o">();</span>
        <span class="n">ti</span> <span class="o">=</span> <span class="n">threads</span><span class="o">.</span><span class="na">add</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">isOpen</span><span class="o">())</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="k">do</span> <span class="o">{</span>
            <span class="c1">//这里进行复制 调用native方法</span>
            <span class="n">n</span> <span class="o">=</span> <span class="n">transferTo0</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="n">position</span><span class="o">,</span> <span class="n">icount</span><span class="o">,</span> <span class="n">targetFD</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">while</span> <span class="o">((</span><span class="n">n</span> <span class="o">==</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">INTERRUPTED</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">isOpen</span><span class="o">());</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">UNSUPPORTED_CASE</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="k">instanceof</span> <span class="nc">SinkChannelImpl</span><span class="o">)</span>
                <span class="n">pipeSupported</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="k">instanceof</span> <span class="nc">FileChannelImpl</span><span class="o">)</span>
                <span class="n">fileSupported</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="k">return</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">UNSUPPORTED_CASE</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">UNSUPPORTED</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Don't bother trying again</span>
            <span class="n">transferSupported</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="k">return</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">UNSUPPORTED</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">normalize</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
        <span class="n">threads</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">ti</span><span class="o">);</span>
        <span class="n">end</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">//mmap方式复制</span>
<span class="kd">private</span> <span class="kt">long</span> <span class="nf">transferToTrustedChannel</span><span class="o">(</span><span class="kt">long</span> <span class="n">position</span><span class="o">,</span> <span class="kt">long</span> <span class="n">count</span><span class="o">,</span>
                                        <span class="nc">WritableByteChannel</span> <span class="n">target</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="nc">IOException</span>
<span class="o">{</span>
    <span class="kt">boolean</span> <span class="n">isSelChImpl</span> <span class="o">=</span> <span class="o">(</span><span class="n">target</span> <span class="k">instanceof</span> <span class="nc">SelChImpl</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(!((</span><span class="n">target</span> <span class="k">instanceof</span> <span class="nc">FileChannelImpl</span><span class="o">)</span> <span class="o">||</span> <span class="n">isSelChImpl</span><span class="o">))</span>
        <span class="k">return</span> <span class="nc">IOStatus</span><span class="o">.</span><span class="na">UNSUPPORTED</span><span class="o">;</span>

    <span class="c1">// Trusted target: Use a mapped buffer</span>
    <span class="kt">long</span> <span class="n">remaining</span> <span class="o">=</span> <span class="n">count</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">remaining</span> <span class="o">&gt;</span> <span class="mi">0L</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">size</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">remaining</span><span class="o">,</span> <span class="no">MAPPED_TRANSFER_SIZE</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
          <span class="c1">//通过mmap系统调用获取ByteBuffer 这个前面介绍过</span>
            <span class="nc">MappedByteBuffer</span> <span class="n">dbb</span> <span class="o">=</span> <span class="n">map</span><span class="o">(</span><span class="nc">MapMode</span><span class="o">.</span><span class="na">READ_ONLY</span><span class="o">,</span> <span class="n">position</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="c1">// ## Bug: Closing this channel will not terminate the write</span>
              <span class="c1">//调用write写入 因为MappedByteBuffer的实现类会实现DirectBuffer接口所以不会有堆内的复制</span>
              <span class="c1">//dbb关联的内存地址会直接被放入系统调用write中，所以也不需要用户空间和内核空间的复制</span>
                <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">target</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">dbb</span><span class="o">);</span>
                <span class="k">assert</span> <span class="n">n</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span>
                <span class="n">remaining</span> <span class="o">-=</span> <span class="n">n</span><span class="o">;</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">isSelChImpl</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c1">// one attempt to write to selectable channel</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">assert</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
                <span class="n">position</span> <span class="o">+=</span> <span class="n">n</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
                <span class="n">unmap</span><span class="o">(</span><span class="n">dbb</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ClosedByInterruptException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// target closed by interrupt as ClosedByInterruptException needs</span>
            <span class="c1">// to be thrown after closing this channel.</span>
            <span class="k">assert</span> <span class="o">!</span><span class="n">target</span><span class="o">.</span><span class="na">isOpen</span><span class="o">();</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">close</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Throwable</span> <span class="n">suppressed</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">e</span><span class="o">.</span><span class="na">addSuppressed</span><span class="o">(</span><span class="n">suppressed</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ioe</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Only throw exception if no bytes have been written</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">remaining</span> <span class="o">==</span> <span class="n">count</span><span class="o">)</span>
                <span class="k">throw</span> <span class="n">ioe</span><span class="o">;</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">count</span> <span class="o">-</span> <span class="n">remaining</span><span class="o">;</span>
<span class="o">}</span>


<span class="kd">private</span> <span class="kt">long</span> <span class="nf">transferToArbitraryChannel</span><span class="o">(</span><span class="kt">long</span> <span class="n">position</span><span class="o">,</span> <span class="kt">int</span> <span class="n">icount</span><span class="o">,</span>
                                        <span class="nc">WritableByteChannel</span> <span class="n">target</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="nc">IOException</span>
<span class="o">{</span>
    <span class="c1">// Untrusted target: Use a newly-erased buffer</span>
    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">icount</span><span class="o">,</span> <span class="no">TRANSFER_SIZE</span><span class="o">);</span>
  <span class="c1">//这里拿到的是堆内存的ByteBuffer</span>
    <span class="nc">ByteBuffer</span> <span class="n">bb</span> <span class="o">=</span> <span class="nc">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
    <span class="kt">long</span> <span class="n">tw</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>                    <span class="c1">// Total bytes written</span>
    <span class="kt">long</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">position</span><span class="o">;</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">tw</span> <span class="o">&lt;</span> <span class="n">icount</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">bb</span><span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">((</span><span class="kt">int</span><span class="o">)(</span><span class="n">icount</span> <span class="o">-</span> <span class="n">tw</span><span class="o">),</span> <span class="no">TRANSFER_SIZE</span><span class="o">));</span>
          <span class="c1">//DMA到内核到用户空间到堆内</span>
            <span class="kt">int</span> <span class="n">nr</span> <span class="o">=</span> <span class="n">read</span><span class="o">(</span><span class="n">bb</span><span class="o">,</span> <span class="n">pos</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nr</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="n">bb</span><span class="o">.</span><span class="na">flip</span><span class="o">();</span>
            <span class="c1">// ## Bug: Will block writing target if this channel</span>
            <span class="c1">// ##      is asynchronously closed</span>
          <span class="c1">//堆内到堆外到内核空间。。。</span>
            <span class="kt">int</span> <span class="n">nw</span> <span class="o">=</span> <span class="n">target</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">bb</span><span class="o">);</span>
            <span class="n">tw</span> <span class="o">+=</span> <span class="n">nw</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nw</span> <span class="o">!=</span> <span class="n">nr</span><span class="o">)</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="n">pos</span> <span class="o">+=</span> <span class="n">nw</span><span class="o">;</span>
            <span class="n">bb</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">tw</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">tw</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
            <span class="k">return</span> <span class="n">tw</span><span class="o">;</span>
        <span class="k">throw</span> <span class="n">x</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>我这里省略了非linux的代码</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">JNIEXPORT</span> <span class="n">jlong</span> <span class="n">JNICALL</span>
<span class="nf">Java_sun_nio_ch_FileChannelImpl_transferTo0</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">this</span><span class="p">,</span>
                                            <span class="n">jobject</span> <span class="n">srcFDO</span><span class="p">,</span>
                                            <span class="n">jlong</span> <span class="n">position</span><span class="p">,</span> <span class="n">jlong</span> <span class="n">count</span><span class="p">,</span>
                                            <span class="n">jobject</span> <span class="n">dstFDO</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">jint</span> <span class="n">srcFD</span> <span class="o">=</span> <span class="n">fdval</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">srcFDO</span><span class="p">);</span>
    <span class="n">jint</span> <span class="n">dstFD</span> <span class="o">=</span> <span class="n">fdval</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">dstFDO</span><span class="p">);</span>

<span class="cp">#if defined(__linux__)
</span>    <span class="n">off64_t</span> <span class="n">offset</span> <span class="o">=</span> <span class="p">(</span><span class="n">off64_t</span><span class="p">)</span><span class="n">position</span><span class="p">;</span>
  <span class="c1">//参考https://linux.die.net/man/2/sendfile64</span>
    <span class="n">jlong</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sendfile64</span><span class="p">(</span><span class="n">dstFD</span><span class="p">,</span> <span class="n">srcFD</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">offset</span><span class="p">,</span> <span class="p">(</span><span class="kt">size_t</span><span class="p">)</span><span class="n">count</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EAGAIN</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">IOS_UNAVAILABLE</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EINVAL</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">((</span><span class="kt">ssize_t</span><span class="p">)</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">IOS_UNSUPPORTED_CASE</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EINTR</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">IOS_INTERRUPTED</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">JNU_ThrowIOExceptionWithLastError</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"Transfer failed"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">IOS_THROWN</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">n</span><span class="p">;</span>
<span class="cp">#elif defined (__solaris__)
</span>  <span class="p">...</span>
<span class="cp">#elif defined(__APPLE__)
</span>    <span class="p">...</span>
<span class="cp">#elif defined(_AIX)
</span>    <span class="p">...</span>
<span class="cp">#else
</span>    <span class="k">return</span> <span class="n">IOS_UNSUPPORTED_CASE</span><span class="p">;</span>
<span class="cp">#endif
</span><span class="p">}</span>
</code></pre></div></div>

<p>所以transferTo存在3种情况</p>

<p>sendfile方式</p>

<p><img src="../img/sendfilecopy.png" alt="bioreadcopy" /></p>

<p>mmap方式</p>

<p><img src="../img/mmapcopy.png" alt="bioreadcopy" /></p>

<p>read+write方式</p>

<p><img src="../img/javafilecopybad.png" alt="bioreadcopy" /></p>

<h3 id="直接io">直接IO</h3>

<p>我们通过传统io获得的FileChannel都是非直接IO</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">FileChannel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">fileInputStream</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();</span>
<span class="nc">FileChannel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">fileOutputStream</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();</span>
<span class="nc">FileChannel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">randomAccessFile</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();</span>
</code></pre></div></div>

<p>我们可以这样获取一个直接IO的FileChannel</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">FileChannel</span> <span class="n">fileChannel</span> <span class="o">=</span> <span class="nc">FileChannel</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="nc">ExtendedOpenOption</span><span class="o">.</span><span class="na">DIRECT</span><span class="o">);</span>
</code></pre></div></div>

<p>我们不再去一步一步跟踪这个open的实现了他最终调用了FileChannelImpl类的方法</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="nc">FileChannel</span> <span class="nf">open</span><span class="o">(</span><span class="nc">FileDescriptor</span> <span class="n">fd</span><span class="o">,</span> <span class="nc">String</span> <span class="n">path</span><span class="o">,</span>
                               <span class="kt">boolean</span> <span class="n">readable</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">writable</span><span class="o">,</span>
                               <span class="kt">boolean</span> <span class="n">direct</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">parent</span><span class="o">)</span>
<span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">FileChannelImpl</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="n">path</span><span class="o">,</span> <span class="n">readable</span><span class="o">,</span> <span class="n">writable</span><span class="o">,</span> <span class="n">direct</span><span class="o">,</span> <span class="n">parent</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>但是通过传统io获得的FileChannel直接使用传统IO的文件描述符，而这个open会自己创建新的文件描述符，这是最后调用的native方法的实现</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
<span class="nf">Java_sun_nio_fs_UnixNativeDispatcher_open0</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">this</span><span class="p">,</span>
    <span class="n">jlong</span> <span class="n">pathAddress</span><span class="p">,</span> <span class="n">jint</span> <span class="n">oflags</span><span class="p">,</span> <span class="n">jint</span> <span class="n">mode</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">jint</span> <span class="n">fd</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">path</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">jlong_to_ptr</span><span class="p">(</span><span class="n">pathAddress</span><span class="p">);</span>

    <span class="n">RESTARTABLE</span><span class="p">(</span><span class="n">open64</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">oflags</span><span class="p">,</span> <span class="p">(</span><span class="n">mode_t</span><span class="p">)</span><span class="n">mode</span><span class="p">),</span> <span class="n">fd</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">throwUnixException</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">errno</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">fd</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>ExtendedOpenOption.DIRECT会转化成oflags中的O_DIRECT可以参考这个地址中https://linux.die.net/man/2/open</p>

<blockquote>
  <p><strong>O_DIRECT</strong> (Since Linux 2.4.10)</p>

  <p>Try to minimize cache effects of the I/O to and from this file. In general this will degrade performance, but it is useful in special situations, such as when applications do their own caching. File I/O is done directly to/from user-space buffers. The <strong>O_DIRECT</strong> flag on its own makes an effort to transfer data synchronously, but does not give the guarantees of the <strong>O_SYNC</strong> flag that data and necessary metadata are transferred. To guarantee synchronous I/O, <strong>O_SYNC</strong> must be used in addition to <strong>O_DIRECT</strong>. See NOTES below for further discussion.</p>
</blockquote>

<p><img src="../img/directioNio.png" alt="bioreadcopy" /></p>

<p>直接io可以避免一次复制但是他失去了系统提供的页缓存，所以会造成频繁操作IO，不过对于一些自己去维护缓存的应用来说直接IO会非常有用，大家应该自己根据场景去评估是否使用直接IO。</p>]]></content><author><name>凯帆</name><email>z@zhoukaifan.com</email></author><category term="Java" /><summary type="html"><![CDATA[本文只考虑Linux系统]]></summary></entry><entry><title type="html">业务事件中心设计思想</title><link href="/2021-01-19/%E4%B8%9A%E5%8A%A1%E4%BA%8B%E4%BB%B6%E4%B8%AD%E5%BF%83%E8%AE%BE%E8%AE%A1" rel="alternate" type="text/html" title="业务事件中心设计思想" /><published>2021-01-19T00:00:00+08:00</published><updated>2021-01-19T00:00:00+08:00</updated><id>/2021-01-19/%E4%B8%9A%E5%8A%A1%E4%BA%8B%E4%BB%B6%E4%B8%AD%E5%BF%83%E8%AE%BE%E8%AE%A1</id><content type="html" xml:base="/2021-01-19/%E4%B8%9A%E5%8A%A1%E4%BA%8B%E4%BB%B6%E4%B8%AD%E5%BF%83%E8%AE%BE%E8%AE%A1"><![CDATA[<p>本文只是提供一个简单的思考方向，实现方案只是举例说明，如果读者也需要一个类似的功能，可以根据以下思路去完善。</p>

<h3 id="背景">背景</h3>

<p>在订单系统的业务中通常会碰到类似这样的功能</p>

<ul>
  <li>订单5分钟未支付自动取消订单</li>
  <li>订单支付30分钟后自动接单</li>
  <li>订单15天后自动确认收货</li>
</ul>

<p>或者在逆交易中有类似这样的需求</p>

<ul>
  <li>优惠券相关的商品金额退款完成后退还优惠券</li>
</ul>

<p>通常实现方案</p>

<ul>
  <li>延时消息，消息队列对于存储时间过长的数据可能无法支持像RocketMQ默认配置最大保存2天，大多不支持取消</li>
  <li>数据库加索引扫描出合适订单，造成业务库索引过多影响性能，需要自己维护关联关系，有时候筛选条件存在多个，需要定时任务扫描业务库</li>
</ul>

<p>基于这类需求经过分析抽象后，梳理出了一个事件中心的概念，去解决这类问题</p>

<p>总体思路是业务放向事件中心注册事件后，事件中心会主动发送消息或者是其他方式去通知到业务方，从而触发业务代码的执行。</p>

<h3 id="总体架构">总体架构</h3>

<p><img src="../img/743874284382.png" alt="事件架构" /></p>

<p>事件中心以与业务不相关的方式去实现，统一向业务方提供服务，事件中心仅仅解决如何触发的问题，减轻业务库的压力。</p>

<p>这并不意味着与业务耦合业务应用仍然可以以任何可以接受方式进行事件触发，如公共的事件广播，binlog。</p>

<h3 id="uml">UML</h3>

<p><img src="../img/CountTrigEvent.png" alt="CountTrigEvent" /></p>

<ul>
  <li>租户id代表一个业务方</li>
  <li>三方ID表示是一个业务内的事件归属对象如一个订单，一个优惠券</li>
  <li>三方类型用于用户自定义（后续进一步抽象事件中心会非常有用）</li>
  <li>扩展字段，用于用户自己数据透传，触发时会带给用户</li>
</ul>

<h3 id="核心流程">核心流程</h3>

<p>时间时间用于处理多少时间后通知业务的场景，定时调度保证租户ID纬度单线程</p>

<p><img src="../img/647254571.png" alt="时间时间流程" /></p>

<p>增量事件用于处理数量到达一定值的时候触发业务，第一次注册创建事件，后续注册增加值，超时机制只是确保一个事件的失效不要让业务依赖它，可以同时创建一个时间事件补充，定时调度保证租户ID纬度单线程</p>

<p><img src="../img/64736482321.png" alt="增量事件流程" /></p>

<h3 id="事件管理器">事件管理器</h3>

<p>按照以上的描述，业务仍然需要去自己管理事件，创建事件，取消事件。</p>

<p>所以我们在事件之上抽象一成事件管理器。这样业务应用只需要抽象自己的业务本身，如订单的创建可以对应一个事件管理器支付可以对应一个事件管理器。然后我们配置事件管理器的内容</p>

<p>我们举例一个支付事件管理器，它的主要工作如下</p>

<ul>
  <li>取消5分钟超时事件</li>
  <li>创建30分钟后商家自动接单事件</li>
</ul>

<p>这样我们把每个事件的三方id和对应的操作保存在事件管理器中，并且事件管理器也可以有参数，我们可以配置这些参数传给某个事件的某个字段。</p>

<p><img src="../img/642574138412.png" alt="管理器流程" /></p>

<h3 id="总结">总结</h3>

<p>本质上事件中心只是在技术视角上对一类功能进行抽象，从而解决如何找到需要被处理的数据的问题，然后将它们剥离出来，以降低业务应用的复杂度。在后续事件过多后，为了避免业务代码与具体事件耦合，在事件之上再抽象了一层管理器，来帮助业务应用去维护好自己的事件。</p>]]></content><author><name>凯帆</name><email>z@zhoukaifan.com</email></author><category term="业务架构" /><summary type="html"><![CDATA[本文只是提供一个简单的思考方向，实现方案只是举例说明，如果读者也需要一个类似的功能，可以根据以下思路去完善。]]></summary></entry><entry><title type="html">从File类到操作系统</title><link href="/2021-01-17/%E4%BB%8EFile%E7%B1%BB%E5%88%B0%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" rel="alternate" type="text/html" title="从File类到操作系统" /><published>2021-01-17T00:00:00+08:00</published><updated>2021-01-17T00:00:00+08:00</updated><id>/2021-01-17/%E4%BB%8EFile%E7%B1%BB%E5%88%B0%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F</id><content type="html" xml:base="/2021-01-17/%E4%BB%8EFile%E7%B1%BB%E5%88%B0%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F"><![CDATA[<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">File</span> <span class="kd">implements</span> <span class="nc">Serializable</span><span class="o">,</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="nc">File</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>File类实现了Serializable, Comparable接口，可序列化，可以比较</p>

<p>Comparable接口的实现调用了FileSystem，FileSystem通过对比File的path字符串来返回，所以最终还是使用了String类型的Comparable实现。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">FileSystem</span> <span class="n">fs</span> <span class="o">=</span> <span class="nc">DefaultFileSystem</span><span class="o">.</span><span class="na">getFileSystem</span><span class="o">();</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">File</span> <span class="n">pathname</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">fs</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">pathname</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">//fs  FileSystem</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="nc">File</span> <span class="n">f1</span><span class="o">,</span> <span class="nc">File</span> <span class="n">f2</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">f1</span><span class="o">.</span><span class="na">getPath</span><span class="o">().</span><span class="na">compareTo</span><span class="o">(</span><span class="n">f2</span><span class="o">.</span><span class="na">getPath</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<p>FileSystem是个抽象类封装了一些本地文件系统的操作和描述所以每个系统都会获取到不一样的实例MacOS和Linux是UnixFileSystem对象因为他们都是类Unix系统，windows是WinNTFileSystem</p>

<p>后面使用到的时候在来详细说明FileSystem的实现，大家把它理解成一个工具类就好了，它隐藏不同操作系统的细节，让File类不需要去关注操作系统本身。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * The FileSystem object representing the platform's local file system.
 * 这个是static所以是一个单例
 */</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">FileSystem</span> <span class="n">fs</span> <span class="o">=</span> <span class="nc">DefaultFileSystem</span><span class="o">.</span><span class="na">getFileSystem</span><span class="o">();</span>
</code></pre></div></div>

<h3 id="构造方法">构造方法</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="nf">File</span><span class="o">(</span><span class="nc">String</span> <span class="n">child</span><span class="o">,</span> <span class="nc">File</span> <span class="n">parent</span><span class="o">)</span>
<span class="kd">private</span> <span class="nf">File</span><span class="o">(</span><span class="nc">String</span> <span class="n">pathname</span><span class="o">,</span> <span class="kt">int</span> <span class="n">prefixLength</span><span class="o">)</span>
<span class="kd">public</span> <span class="nf">File</span><span class="o">(</span><span class="nc">String</span> <span class="n">pathname</span><span class="o">)</span>
<span class="kd">public</span> <span class="nf">File</span><span class="o">(</span><span class="nc">String</span> <span class="n">parent</span><span class="o">,</span> <span class="nc">String</span> <span class="n">child</span><span class="o">)</span>
<span class="kd">public</span> <span class="nf">File</span><span class="o">(</span><span class="nc">File</span> <span class="n">parent</span><span class="o">,</span> <span class="nc">String</span> <span class="n">child</span><span class="o">)</span>
<span class="kd">public</span> <span class="nf">File</span><span class="o">(</span><span class="no">URI</span> <span class="n">uri</span><span class="o">)</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nf">File</span><span class="o">(</span><span class="nc">String</span> <span class="n">pathname</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">pathname</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">();</span>
    <span class="o">}</span>
  <span class="c1">//normalize就是一个字符串的处理过程把/aaa//bbb///ccc/ 都变成/aaa/bbb/ccc</span>
    <span class="k">this</span><span class="o">.</span><span class="na">path</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="na">normalize</span><span class="o">(</span><span class="n">pathname</span><span class="o">);</span>
  <span class="c1">//prefixLength查看path的第一个字符是不是‘/’是的话返回1，不然返回0</span>
    <span class="k">this</span><span class="o">.</span><span class="na">prefixLength</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="na">prefixLength</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">path</span><span class="o">);</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="nf">File</span><span class="o">(</span><span class="nc">String</span> <span class="n">parent</span><span class="o">,</span> <span class="nc">String</span> <span class="n">child</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">child</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">parent</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">parent</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">""</span><span class="o">))</span> <span class="o">{</span>
          <span class="c1">//大家可以理解成parent和child拼接，不过他会处理多余和缺少/的情况，还有空字符串</span>
          <span class="c1">//getDefaultParent返回常量“/”</span>
          <span class="c1">//用户传入的路径都要经过normalize处理后才能使用</span>
            <span class="k">this</span><span class="o">.</span><span class="na">path</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="n">fs</span><span class="o">.</span><span class="na">getDefaultParent</span><span class="o">(),</span>
                                    <span class="n">fs</span><span class="o">.</span><span class="na">normalize</span><span class="o">(</span><span class="n">child</span><span class="o">));</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
          <span class="c1">//和上面一样</span>
            <span class="k">this</span><span class="o">.</span><span class="na">path</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="n">fs</span><span class="o">.</span><span class="na">normalize</span><span class="o">(</span><span class="n">parent</span><span class="o">),</span>
                                    <span class="n">fs</span><span class="o">.</span><span class="na">normalize</span><span class="o">(</span><span class="n">child</span><span class="o">));</span>
        <span class="o">}</span>
      <span class="c1">//这里可以看出如果parent是null或者“”的时候和File(String pathname)逻辑一样</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span><span class="c1">//如果parent是null和File(String pathname)逻辑一样</span>
        <span class="k">this</span><span class="o">.</span><span class="na">path</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="na">normalize</span><span class="o">(</span><span class="n">child</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">this</span><span class="o">.</span><span class="na">prefixLength</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="na">prefixLength</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">path</span><span class="o">);</span>
<span class="o">}</span>
<span class="c1">//这个就不说了其实就是把String的parent换成File.path</span>
<span class="kd">public</span> <span class="nf">File</span><span class="o">(</span><span class="nc">File</span> <span class="n">parent</span><span class="o">,</span> <span class="nc">String</span> <span class="n">child</span><span class="o">)</span>

<span class="kd">public</span> <span class="nf">File</span><span class="o">(</span><span class="no">URI</span> <span class="n">uri</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Check our many preconditions</span>
  <span class="c1">// 一堆校验大家自己看看就好</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">uri</span><span class="o">.</span><span class="na">isAbsolute</span><span class="o">())</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"URI is not absolute"</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">uri</span><span class="o">.</span><span class="na">isOpaque</span><span class="o">())</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"URI is not hierarchical"</span><span class="o">);</span>
    <span class="nc">String</span> <span class="n">scheme</span> <span class="o">=</span> <span class="n">uri</span><span class="o">.</span><span class="na">getScheme</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">((</span><span class="n">scheme</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">||</span> <span class="o">!</span><span class="n">scheme</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="s">"file"</span><span class="o">))</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"URI scheme is not \"file\""</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">uri</span><span class="o">.</span><span class="na">getRawAuthority</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"URI has an authority component"</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">uri</span><span class="o">.</span><span class="na">getRawFragment</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"URI has a fragment component"</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">uri</span><span class="o">.</span><span class="na">getRawQuery</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"URI has a query component"</span><span class="o">);</span>
    <span class="nc">String</span> <span class="n">p</span> <span class="o">=</span> <span class="n">uri</span><span class="o">.</span><span class="na">getPath</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">""</span><span class="o">))</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"URI path component is empty"</span><span class="o">);</span>

    <span class="c1">// Okay, now initialize</span>
    <span class="c1">// fromURIPath复制一下源码的注释很好懂  "/foo/" --&gt; "/foo", but "/" --&gt; "/"</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="na">fromURIPath</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
  <span class="c1">// separatorChar下面马上说</span>
    <span class="k">if</span> <span class="o">(</span><span class="nc">File</span><span class="o">.</span><span class="na">separatorChar</span> <span class="o">!=</span> <span class="sc">'/'</span><span class="o">)</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">'/'</span><span class="o">,</span> <span class="nc">File</span><span class="o">.</span><span class="na">separatorChar</span><span class="o">);</span>
  <span class="c1">//这两行之前说过</span>
    <span class="k">this</span><span class="o">.</span><span class="na">path</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="na">normalize</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">prefixLength</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="na">prefixLength</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">path</span><span class="o">);</span>
<span class="o">}</span>
<span class="c1">//对于内部可信任的调用避免使用normalize</span>
<span class="kd">private</span> <span class="nf">File</span><span class="o">(</span><span class="nc">String</span> <span class="n">pathname</span><span class="o">,</span> <span class="kt">int</span> <span class="n">prefixLength</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">path</span> <span class="o">=</span> <span class="n">pathname</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">prefixLength</span> <span class="o">=</span> <span class="n">prefixLength</span><span class="o">;</span>
<span class="o">}</span>
<span class="c1">//对于内部可信任的调用避免使用normalize</span>
<span class="kd">private</span> <span class="nf">File</span><span class="o">(</span><span class="nc">String</span> <span class="n">child</span><span class="o">,</span> <span class="nc">File</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">//不知道assert的同学赶紧赶紧去查查把，主要是调试用的</span>
    <span class="k">assert</span> <span class="n">parent</span><span class="o">.</span><span class="na">path</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">assert</span> <span class="o">(!</span><span class="n">parent</span><span class="o">.</span><span class="na">path</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">""</span><span class="o">));</span>
    <span class="k">this</span><span class="o">.</span><span class="na">path</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="n">parent</span><span class="o">.</span><span class="na">path</span><span class="o">,</span> <span class="n">child</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">prefixLength</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">prefixLength</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">//这两个字段具体在什么地方会用后面再说</span>
    <span class="cm">/**
     * This abstract pathname's normalized pathname string. A normalized
     * pathname string uses the default name-separator character and does not
     * contain any duplicate or redundant separators.
     *
     * @serial
     */</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">path</span><span class="o">;</span>
    <span class="cm">/**
     * The length of this abstract pathname's prefix, or zero if it has no
     * prefix.
     */</span>
<span class="c1">//第二个生僻关键字transient这个是与Serializable接口相关的</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">transient</span> <span class="kt">int</span> <span class="n">prefixLength</span><span class="o">;</span>
</code></pre></div></div>

<p>separatorChar</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * The system-dependent default name-separator character.  This field is
 * initialized to contain the first character of the value of the system
 * property &lt;code&gt;file.separator&lt;/code&gt;.  On UNIX systems the value of this
 * field is &lt;code&gt;'/'&lt;/code&gt;; on Microsoft Windows systems it is &lt;code&gt;'\\'&lt;/code&gt;.
 *
 * @see     java.lang.System#getProperty(java.lang.String)
 */</span>
<span class="c1">//getSeparator返回一个slash变量这变量是UnixFileSystem的构造方法里面设置的</span>
<span class="c1">//刚刚说过UnixFileSystem是一个单例，所以在第一次调用File的时候就会设置slash变量</span>
<span class="c1">//Properties props = GetPropertyAction.privilegedGetProperties();最终是System.getProperties()</span>
<span class="c1">//slash = props.getProperty("file.separator").charAt(0);Unix都是‘/’</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">char</span> <span class="n">separatorChar</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="na">getSeparator</span><span class="o">();</span>

<span class="cm">/**
 * The system-dependent default name-separator character, represented as a
 * string for convenience.  This string contains a single character, namely
 * {@link #separatorChar}.
 */</span>
<span class="c1">//char转化String</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">separator</span> <span class="o">=</span> <span class="s">""</span> <span class="o">+</span> <span class="n">separatorChar</span><span class="o">;</span>
</code></pre></div></div>

<h3 id="方法实现">方法实现</h3>

<p>我把File中的方法分为几类</p>

<ul>
  <li>大多逻辑在方法中处理字符串</li>
  <li>大多逻辑调用FileSystem处理字符串（因为不同操作系统的路径规则不一样，有些处理依赖具体操作系统）</li>
  <li>调用FileSystem Native方法进行处理的</li>
  <li>其他</li>
</ul>

<h4 id="file处理字符串类的方法">File处理字符串类的方法</h4>

<p>简单举例getName  getParent两个方法，这种方法实现非常简单</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// aa -&gt; aa        /ds/aa -&gt; aa      / -&gt; ""</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">lastIndexOf</span><span class="o">(</span><span class="n">separatorChar</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="n">prefixLength</span><span class="o">)</span> <span class="k">return</span> <span class="n">path</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">prefixLength</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">path</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getParent</span><span class="o">()</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">lastIndexOf</span><span class="o">(</span><span class="n">separatorChar</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="n">prefixLength</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">((</span><span class="n">prefixLength</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">prefixLength</span><span class="o">))</span>
            <span class="k">return</span> <span class="n">path</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">prefixLength</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">path</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="调用filesystem处理字符串">调用FileSystem处理字符串</h4>

<p>还有一些方法是调用FileSystem解析字符串，主要是因为每个操作系统的文件路径规则不一样</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isAbsolute</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">fs</span><span class="o">.</span><span class="na">isAbsolute</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
<span class="o">}</span>
<span class="c1">//UnixFileSystem类中 PrefixLength&gt;0 说明是/开头就是绝对路径</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isAbsolute</span><span class="o">(</span><span class="nc">File</span> <span class="n">f</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">getPrefixLength</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>类似的还有</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//先处理字符串然后调用之前说过的私有构造方法</span>
<span class="kd">public</span> <span class="nc">File</span> <span class="nf">getParentFile</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">p</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getParent</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">p</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
  <span class="c1">//这里就是使用了私有构造方法</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">p</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">prefixLength</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<h4 id="调用native方法">调用Native方法</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">setReadOnly</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">SecurityManager</span> <span class="n">security</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">getSecurityManager</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">security</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">security</span><span class="o">.</span><span class="na">checkWrite</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">isInvalid</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">fs</span><span class="o">.</span><span class="na">setReadOnly</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">SecurityManager</span> <span class="n">security</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">getSecurityManager</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">security</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">security</span><span class="o">.</span><span class="na">checkDelete</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">isInvalid</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">fs</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里我把调用Native方法整理了一下</p>

<p>不过表格中对应系统函数不一定准确，因为JDK源码中有条件编译去替换一些类名</p>

<table>
  <thead>
    <tr>
      <th>File方法</th>
      <th>对应的Native方法</th>
      <th>对应系统函数</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>canRead、canWrite、canExecute</td>
      <td>checkAccess</td>
      <td>access</td>
    </tr>
    <tr>
      <td>exists、isDirectory、isFile、isHidden</td>
      <td>getBooleanAttributes0</td>
      <td>stat64</td>
    </tr>
    <tr>
      <td>lastModified</td>
      <td>getLastModifiedTime</td>
      <td>stat64</td>
    </tr>
    <tr>
      <td>length</td>
      <td>getLength</td>
      <td>stat64</td>
    </tr>
    <tr>
      <td>createNewFile</td>
      <td>createFileExclusively</td>
      <td>handleOpen(path, O_RDWR | O_CREAT | O_EXCL, 0666)<br />open64(path, oflag, mode)<br />#define open64 open</td>
    </tr>
    <tr>
      <td>delete</td>
      <td>delete</td>
      <td>remove</td>
    </tr>
    <tr>
      <td>list</td>
      <td>list</td>
      <td>opendir、readdir_r</td>
    </tr>
    <tr>
      <td>mkdir</td>
      <td>createDirectory</td>
      <td>mkdir(path, 0777)</td>
    </tr>
    <tr>
      <td>renameTo</td>
      <td>rename0</td>
      <td>rename</td>
    </tr>
    <tr>
      <td>setLastModified</td>
      <td>setLastModified</td>
      <td>stat64</td>
    </tr>
    <tr>
      <td>setReadOnly</td>
      <td>setReadOnly</td>
      <td>stat64</td>
    </tr>
    <tr>
      <td>setWritable、setReadable、setExecutable</td>
      <td>setPermission</td>
      <td>stat64</td>
    </tr>
    <tr>
      <td>getTotalSpace、getFreeSpace、getUsableSpace</td>
      <td>getSpace</td>
      <td>statvfs64</td>
    </tr>
  </tbody>
</table>

<h4 id="小结">小结</h4>

<p>所以File其实本身就是一个工具类，封装了对路径的处理和文件相关的系统调用，在面向对象的思维中一个File对象应该对应一个唯一的文件或是目录，path变量指定了具体什么文件。</p>

<p>并且为了File类不耦合与具体操作系统，File类的设计者又将File类中和系统相关的操作抽象成了FileSystem供File类使用。</p>

<h3 id="扩展知识点linux中的文件">扩展知识点：Linux中的文件</h3>

<p><img src="../img/FileDocLinuxp1.jpg" alt="img" /></p>

<p>在Linux系统中如果我们进行一次系统调用如stat64函数，它会先访问Linux的虚拟文件系统，虚拟文件系统会去调用该文件所对应的文件系统，最终调用驱动程序从硬盘上返回特定信息。</p>

<p><img src="../img/linuxfile321312.jpeg" alt="img" /></p>

<p>（图片来自《深入理解Linux内核》书中）</p>

<p>在虚拟文件系统中会有以下几个对象：</p>

<ul>
  <li>超级块 设备挂载时创建</li>
  <li>索引节点 对应一个唯一文件</li>
  <li>目录项 对应一个唯一路径 不同文件系统实现不一样 ext文件系统中不会存储该对象，在文件系统的索引节点中保存路径</li>
  <li>文件对象 文件打开时创建，一个进程打开一个文件都会创建一个文件对象</li>
</ul>

<p>通常情况下对于stat64方法可以通过文件路径确定一个目录项，然后通过目录项找到索引节点，索引节点可以确定唯一的文件，也可以知道文件对应的超级块，这样就能向对应的文件系统发起请求。文件系统维护了数据存储到设备的方式，最终调用驱动程序从特定的物理地址上取得数据。</p>]]></content><author><name>凯帆</name><email>z@zhoukaifan.com</email></author><category term="Java" /><summary type="html"><![CDATA[public class File implements Serializable, Comparable&lt;File&gt;]]></summary></entry><entry><title type="html">SpringIOC整体设计</title><link href="/2021-01-03/SpringIOC%E6%95%B4%E4%BD%93%E8%AE%BE%E8%AE%A1" rel="alternate" type="text/html" title="SpringIOC整体设计" /><published>2021-01-03T00:00:00+08:00</published><updated>2021-01-03T00:00:00+08:00</updated><id>/2021-01-03/SpringIOC%E6%95%B4%E4%BD%93%E8%AE%BE%E8%AE%A1</id><content type="html" xml:base="/2021-01-03/SpringIOC%E6%95%B4%E4%BD%93%E8%AE%BE%E8%AE%A1"><![CDATA[<h3 id="从接口开始">从接口开始</h3>

<p><img src="../img/XmlBeanFactoryUML.png" alt="" /></p>

<p>先来看看4个接口BeanFactory、SingletonBeanRegistry、AliasRegistry、BeanDefinitionRegistry</p>

<p>AliasRegistry定义了别名的接口而BeanDefinitionRegistry继承了AliasRegistry意味着BeanDefinitionRegistry也拥有别名的能力，另外他还扩展了注册BeanDefinition的能力。而SingletonBeanRegistry是一个单例的注册器被注册的是类的实例而不是定义。SingletonBeanRegistry、AliasRegistry、BeanDefinitionRegistry三个接口定义了3种注册器的能力。在本文中我们把这些接口统称为注册器。</p>

<p>再来看看BeanFactory他实际上主要定义了了对Bean的获取的能力根据名称获取或者是根据类型匹配获取。它的子接口定义了很多对工厂内部Bean查看管理的能力。这里要注意ConfigurableBeanFactory因为它继承了SingletonBeanRegistry，在这个接口之前实际上BeanFactory没有定义任何向工厂注册Bean的能力。</p>

<p>我们梳理一下Factory定义了对获取Bean及其配置信息的能力，而Registry定义了注册Bean的能力。</p>

<h3 id="工厂初始化">工厂初始化</h3>

<p>XmlBeanFactory实际上已经被废弃但是我们可以从它入手学习会更简单，我们先来看一下XmlBeanFactory的源码。其实非常简单重点在与DefaultListableBeanFactory和XmlBeanDefinitionReader上面，本文主要讲解IOC的实现原理对于怎么解析Bean的XML文件不会过多讲解，毕竟这个时代没有人会直接使用spring-beans包，和传统的XML文件定义类。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//DefaultListableBeanFactory实现了之前提到的接口，它提供了一个完整的IOC实现</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">XmlBeanFactory</span> <span class="kd">extends</span> <span class="nc">DefaultListableBeanFactory</span> <span class="o">{</span>
   <span class="c1">//XmlBeanDefinitionReader实现了XML的解析并且注册到Factory</span>
   <span class="kd">private</span> <span class="kd">final</span> <span class="nc">XmlBeanDefinitionReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">XmlBeanDefinitionReader</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
   <span class="kd">public</span> <span class="nf">XmlBeanFactory</span><span class="o">(</span><span class="nc">Resource</span> <span class="n">resource</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">BeansException</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">(</span><span class="n">resource</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
   <span class="o">}</span>
   <span class="kd">public</span> <span class="nf">XmlBeanFactory</span><span class="o">(</span><span class="nc">Resource</span> <span class="n">resource</span><span class="o">,</span> <span class="nc">BeanFactory</span> <span class="n">parentBeanFactory</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">BeansException</span> <span class="o">{</span>
      <span class="kd">super</span><span class="o">(</span><span class="n">parentBeanFactory</span><span class="o">);</span>
      <span class="c1">//加载xml文件，解析并且注册到工厂</span>
      <span class="k">this</span><span class="o">.</span><span class="na">reader</span><span class="o">.</span><span class="na">loadBeanDefinitions</span><span class="o">(</span><span class="n">resource</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>我们从this.reader.loadBeanDefinitions(resource);这行代码往下跟踪找到了第一个需要关注的地方</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">void</span> <span class="nf">parseDefaultElement</span><span class="o">(</span><span class="nc">Element</span> <span class="n">ele</span><span class="o">,</span> <span class="nc">BeanDefinitionParserDelegate</span> <span class="n">delegate</span><span class="o">)</span> <span class="o">{</span>
   <span class="c1">//处理IMPORT</span>
   <span class="k">if</span> <span class="o">(</span><span class="n">delegate</span><span class="o">.</span><span class="na">nodeNameEquals</span><span class="o">(</span><span class="n">ele</span><span class="o">,</span> <span class="no">IMPORT_ELEMENT</span><span class="o">))</span> <span class="o">{</span>
      <span class="n">importBeanDefinitionResource</span><span class="o">(</span><span class="n">ele</span><span class="o">);</span>
   <span class="o">}</span>
   <span class="c1">//处理别名</span>
   <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">delegate</span><span class="o">.</span><span class="na">nodeNameEquals</span><span class="o">(</span><span class="n">ele</span><span class="o">,</span> <span class="no">ALIAS_ELEMENT</span><span class="o">))</span> <span class="o">{</span>
      <span class="n">processAliasRegistration</span><span class="o">(</span><span class="n">ele</span><span class="o">);</span>
   <span class="o">}</span>
   <span class="c1">//处理bean</span>
   <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">delegate</span><span class="o">.</span><span class="na">nodeNameEquals</span><span class="o">(</span><span class="n">ele</span><span class="o">,</span> <span class="no">BEAN_ELEMENT</span><span class="o">))</span> <span class="o">{</span>
      <span class="n">processBeanDefinition</span><span class="o">(</span><span class="n">ele</span><span class="o">,</span> <span class="n">delegate</span><span class="o">);</span>
   <span class="o">}</span>
   <span class="c1">//处理beans 递归调用之前的</span>
   <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">delegate</span><span class="o">.</span><span class="na">nodeNameEquals</span><span class="o">(</span><span class="n">ele</span><span class="o">,</span> <span class="no">NESTED_BEANS_ELEMENT</span><span class="o">))</span> <span class="o">{</span>
      <span class="c1">// recurse</span>
      <span class="n">doRegisterBeanDefinitions</span><span class="o">(</span><span class="n">ele</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>importBeanDefinitionResource和doRegisterBeanDefinitions还是XML解析的实现与IOC本身无关我们忽略它。首先我们来看看别名的注册</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">processAliasRegistration</span><span class="o">(</span><span class="nc">Element</span> <span class="n">ele</span><span class="o">)</span> <span class="o">{</span>
   <span class="c1">//获取元素</span>
   <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">ele</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="no">NAME_ATTRIBUTE</span><span class="o">);</span>
   <span class="nc">String</span> <span class="n">alias</span> <span class="o">=</span> <span class="n">ele</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="no">ALIAS_ATTRIBUTE</span><span class="o">);</span>
   <span class="kt">boolean</span> <span class="n">valid</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
   <span class="c1">//校验</span>
   <span class="k">if</span> <span class="o">(!</span><span class="nc">StringUtils</span><span class="o">.</span><span class="na">hasText</span><span class="o">(</span><span class="n">name</span><span class="o">))</span> <span class="o">{</span>
      <span class="n">getReaderContext</span><span class="o">().</span><span class="na">error</span><span class="o">(</span><span class="s">"Name must not be empty"</span><span class="o">,</span> <span class="n">ele</span><span class="o">);</span>
      <span class="n">valid</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
   <span class="o">}</span>
   <span class="k">if</span> <span class="o">(!</span><span class="nc">StringUtils</span><span class="o">.</span><span class="na">hasText</span><span class="o">(</span><span class="n">alias</span><span class="o">))</span> <span class="o">{</span>
      <span class="n">getReaderContext</span><span class="o">().</span><span class="na">error</span><span class="o">(</span><span class="s">"Alias must not be empty"</span><span class="o">,</span> <span class="n">ele</span><span class="o">);</span>
      <span class="n">valid</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
   <span class="o">}</span>
   <span class="c1">//有效导入无效忽略</span>
   <span class="k">if</span> <span class="o">(</span><span class="n">valid</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">try</span> <span class="o">{</span>
         <span class="c1">//注册别名 重点在这里 getReaderContext().getRegistry()获取的就是XmlBeanFactory本身</span>
         <span class="n">getReaderContext</span><span class="o">().</span><span class="na">getRegistry</span><span class="o">().</span><span class="na">registerAlias</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">alias</span><span class="o">);</span>
      <span class="o">}</span>
      <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
         <span class="n">getReaderContext</span><span class="o">().</span><span class="na">error</span><span class="o">(</span><span class="s">"Failed to register alias '"</span> <span class="o">+</span> <span class="n">alias</span> <span class="o">+</span>
               <span class="s">"' for bean with name '"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">"'"</span><span class="o">,</span> <span class="n">ele</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
      <span class="o">}</span>
      <span class="c1">//别名事件触发</span>
      <span class="n">getReaderContext</span><span class="o">().</span><span class="na">fireAliasRegistered</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">alias</span><span class="o">,</span> <span class="n">extractSource</span><span class="o">(</span><span class="n">ele</span><span class="o">));</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>registerAlias方法实现了别名的注册回想一下之前说过的AliasRegistry接口这个方法就是在这里定义的。具体的功能都是在SimpleAliasRegistry类中实现的。XmlBeanFactory继承了这个类。本质就是一个aliasMap的ConcurrentHashMap实现的大家可以自己去看一下源码这里就不展开说了。</p>

<p>再来看一下processBeanDefinition</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//registry就是XmlBeanFactory本身</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">processBeanDefinition</span><span class="o">(</span><span class="nc">Element</span> <span class="n">ele</span><span class="o">,</span> <span class="nc">BeanDefinitionParserDelegate</span> <span class="n">delegate</span><span class="o">)</span> <span class="o">{</span>
   <span class="c1">//解析bean定义</span>
   <span class="nc">BeanDefinitionHolder</span> <span class="n">bdHolder</span> <span class="o">=</span> <span class="n">delegate</span><span class="o">.</span><span class="na">parseBeanDefinitionElement</span><span class="o">(</span><span class="n">ele</span><span class="o">);</span>
   <span class="k">if</span> <span class="o">(</span><span class="n">bdHolder</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
      <span class="c1">//自定义装饰器扩展</span>
      <span class="n">bdHolder</span> <span class="o">=</span> <span class="n">delegate</span><span class="o">.</span><span class="na">decorateBeanDefinitionIfRequired</span><span class="o">(</span><span class="n">ele</span><span class="o">,</span> <span class="n">bdHolder</span><span class="o">);</span>
      <span class="k">try</span> <span class="o">{</span>
         <span class="c1">//注册到工厂 同时也会组册别名</span>
         <span class="nc">BeanDefinitionReaderUtils</span><span class="o">.</span><span class="na">registerBeanDefinition</span><span class="o">(</span><span class="n">bdHolder</span><span class="o">,</span> <span class="n">getReaderContext</span><span class="o">().</span><span class="na">getRegistry</span><span class="o">());</span>
      <span class="o">}</span>
      <span class="k">catch</span> <span class="o">(</span><span class="nc">BeanDefinitionStoreException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
         <span class="n">getReaderContext</span><span class="o">().</span><span class="na">error</span><span class="o">(</span><span class="s">"Failed to register bean definition with name '"</span> <span class="o">+</span>
               <span class="n">bdHolder</span><span class="o">.</span><span class="na">getBeanName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"'"</span><span class="o">,</span> <span class="n">ele</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
      <span class="o">}</span>
      <span class="c1">// 发送注册事件</span>
      <span class="n">getReaderContext</span><span class="o">().</span><span class="na">fireComponentRegistered</span><span class="o">(</span><span class="k">new</span> <span class="nc">BeanComponentDefinition</span><span class="o">(</span><span class="n">bdHolder</span><span class="o">));</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BeanDefinitionReaderUtils</span><span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">registerBeanDefinition</span><span class="o">(</span>
        <span class="nc">BeanDefinitionHolder</span> <span class="n">definitionHolder</span><span class="o">,</span> <span class="nc">BeanDefinitionRegistry</span> <span class="n">registry</span><span class="o">)</span>
        <span class="kd">throws</span> <span class="nc">BeanDefinitionStoreException</span> <span class="o">{</span>
     <span class="c1">// 组册类定义</span>
     <span class="nc">String</span> <span class="n">beanName</span> <span class="o">=</span> <span class="n">definitionHolder</span><span class="o">.</span><span class="na">getBeanName</span><span class="o">();</span>
     <span class="n">registry</span><span class="o">.</span><span class="na">registerBeanDefinition</span><span class="o">(</span><span class="n">beanName</span><span class="o">,</span> <span class="n">definitionHolder</span><span class="o">.</span><span class="na">getBeanDefinition</span><span class="o">());</span>
     <span class="c1">// 注册别名</span>
     <span class="nc">String</span><span class="o">[]</span> <span class="n">aliases</span> <span class="o">=</span> <span class="n">definitionHolder</span><span class="o">.</span><span class="na">getAliases</span><span class="o">();</span>
     <span class="k">if</span> <span class="o">(</span><span class="n">aliases</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">alias</span> <span class="o">:</span> <span class="n">aliases</span><span class="o">)</span> <span class="o">{</span>
           <span class="n">registry</span><span class="o">.</span><span class="na">registerAlias</span><span class="o">(</span><span class="n">beanName</span><span class="o">,</span> <span class="n">alias</span><span class="o">);</span>
        <span class="o">}</span>
     <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>我们可以看到这里的registerBeanDefinition方法就是在BeanDefinitionRegistry接口中定义的，BeanDefinitionRegistry还继承了AliasRegistry所以它当然可以注册别名。registerBeanDefinition的实现在DefaultListableBeanFactory类中，主要就是对一个名为beanDefinitionMap的对象操作，大家可以自行去阅读源码这里就不贴代码了。</p>

<p>注：fireAliasRegistered和fireComponentRegistered不会再本文中提及后续会单独写一篇文章去介绍它，本文为了让读者更专注IOC的核心功能实现。</p>

<p>到目前为止，我们可以知道XmlBeanDefinitionReader的本质就是调用注册器把解析到的信息注册到容器中。</p>

<h3 id="获取一个bean">获取一个Bean</h3>

<p>当我们执行一行获取Bean的代码时</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">BeanA</span><span class="o">&gt;</span> <span class="n">beansOfType</span> <span class="o">=</span> <span class="n">xmlBeanFactory</span><span class="o">.</span><span class="na">getBeansOfType</span><span class="o">(</span><span class="nc">BeanA</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">BeanA</span> <span class="n">beanA</span> <span class="o">=</span> <span class="o">(</span><span class="nc">BeanA</span><span class="o">)</span><span class="n">xmlBeanFactory</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"beanA"</span><span class="o">);</span>
</code></pre></div></div>

<p>最终都掉用了AbstractBeanFactory类的doGetBean方法，这个方法的实现比较复杂，大家需要有点耐心看下去。为了阅读方便这里删除了log的代码</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protected</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">doGetBean</span><span class="o">(</span>
      <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">requiredType</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">typeCheckOnly</span><span class="o">)</span>
      <span class="kd">throws</span> <span class="nc">BeansException</span> <span class="o">{</span>
   <span class="c1">//可能是别名翻译一下 名字包含&amp;前缀去除掉</span>
   <span class="nc">String</span> <span class="n">beanName</span> <span class="o">=</span> <span class="n">transformedBeanName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
   <span class="nc">Object</span> <span class="n">bean</span><span class="o">;</span>
   <span class="c1">//可能有直接注册实例对象的或者已经被创建的单例</span>
   <span class="c1">//这里要提及几个核心的Map</span>
   <span class="c1">//singletonObjects  Map中的Bean已经完全初始化好了，可以直接使用</span>
   <span class="c1">//earlySingletonObjects  Map中的Bean处在创建中</span>
   <span class="c1">//singletonFactories   Map中存放Bean对应的工厂</span>
   <span class="c1">//这里会先从singletonObjects中获取 如果没有根据singletonsCurrentlyInCreation判断是否在创建中，不是直接返回null</span>
   <span class="c1">//如果是创建中从earlySingletonObjects中获取</span>
   <span class="c1">//如果也没有获取到获取singletonObjects的对象锁然后从singletonFactories中获取工厂并且创建</span>
   <span class="nc">Object</span> <span class="n">sharedInstance</span> <span class="o">=</span> <span class="n">getSingleton</span><span class="o">(</span><span class="n">beanName</span><span class="o">);</span>
   <span class="k">if</span> <span class="o">(</span><span class="n">sharedInstance</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">args</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">bean</span> <span class="o">=</span> <span class="n">getObjectForBeanInstance</span><span class="o">(</span><span class="n">sharedInstance</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">beanName</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
   <span class="o">}</span>
   <span class="k">else</span> <span class="o">{</span>
      <span class="c1">//检查是不是有循环依赖</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">isPrototypeCurrentlyInCreation</span><span class="o">(</span><span class="n">beanName</span><span class="o">))</span> <span class="o">{</span>
         <span class="k">throw</span> <span class="k">new</span> <span class="nf">BeanCurrentlyInCreationException</span><span class="o">(</span><span class="n">beanName</span><span class="o">);</span>
      <span class="o">}</span>
      <span class="c1">// 检查一下 如果工厂没有定义这个bean就看一下父工厂</span>
      <span class="nc">BeanFactory</span> <span class="n">parentBeanFactory</span> <span class="o">=</span> <span class="n">getParentBeanFactory</span><span class="o">();</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">parentBeanFactory</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">containsBeanDefinition</span><span class="o">(</span><span class="n">beanName</span><span class="o">))</span> <span class="o">{</span>
         <span class="c1">// Not found -&gt; check parent.</span>
         <span class="nc">String</span> <span class="n">nameToLookup</span> <span class="o">=</span> <span class="n">originalBeanName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
         <span class="k">if</span> <span class="o">(</span><span class="n">parentBeanFactory</span> <span class="k">instanceof</span> <span class="nc">AbstractBeanFactory</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">((</span><span class="nc">AbstractBeanFactory</span><span class="o">)</span> <span class="n">parentBeanFactory</span><span class="o">).</span><span class="na">doGetBean</span><span class="o">(</span>
                  <span class="n">nameToLookup</span><span class="o">,</span> <span class="n">requiredType</span><span class="o">,</span> <span class="n">args</span><span class="o">,</span> <span class="n">typeCheckOnly</span><span class="o">);</span>
         <span class="o">}</span>
         <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">args</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Delegation to parent with explicit args.</span>
            <span class="k">return</span> <span class="o">(</span><span class="no">T</span><span class="o">)</span> <span class="n">parentBeanFactory</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">nameToLookup</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
         <span class="o">}</span>
         <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">requiredType</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// No args -&gt; delegate to standard getBean method.</span>
            <span class="k">return</span> <span class="n">parentBeanFactory</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">nameToLookup</span><span class="o">,</span> <span class="n">requiredType</span><span class="o">);</span>
         <span class="o">}</span>
         <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">(</span><span class="no">T</span><span class="o">)</span> <span class="n">parentBeanFactory</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">nameToLookup</span><span class="o">);</span>
         <span class="o">}</span>
      <span class="o">}</span>
      <span class="c1">//校验</span>
      <span class="k">if</span> <span class="o">(!</span><span class="n">typeCheckOnly</span><span class="o">)</span> <span class="o">{</span>
         <span class="cm">/* 如果创建bean不是为了类型检查，则要标记当前bean已经被创建或者即将被创建以便于BeanFactory可以优化重复创建的bean的缓存 */</span>
         <span class="n">markBeanAsCreated</span><span class="o">(</span><span class="n">beanName</span><span class="o">);</span>
      <span class="o">}</span>
      <span class="nc">StartupStep</span> <span class="n">beanCreation</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">applicationStartup</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="s">"spring.beans.instantiate"</span><span class="o">)</span>
            <span class="o">.</span><span class="na">tag</span><span class="o">(</span><span class="s">"beanName"</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
      <span class="k">try</span> <span class="o">{</span>
         <span class="k">if</span> <span class="o">(</span><span class="n">requiredType</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">beanCreation</span><span class="o">.</span><span class="na">tag</span><span class="o">(</span><span class="s">"beanType"</span><span class="o">,</span> <span class="nl">requiredType:</span><span class="o">:</span><span class="n">toString</span><span class="o">);</span>
         <span class="o">}</span>
         <span class="c1">//大家应该记得之前注册的BeanDefinition吧，getMergedLocalBeanDefinition内部获取BeanDefinition后</span>
         <span class="c1">//会去查看是否有Parent BeanDefinition有的话继承它的属性 没有的话把自己包装成一个RootBeanDefinition</span>
         <span class="nc">RootBeanDefinition</span> <span class="n">mbd</span> <span class="o">=</span> <span class="n">getMergedLocalBeanDefinition</span><span class="o">(</span><span class="n">beanName</span><span class="o">);</span>
         <span class="n">checkMergedBeanDefinition</span><span class="o">(</span><span class="n">mbd</span><span class="o">,</span> <span class="n">beanName</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>

         <span class="c1">// Guarantee initialization of beans that the current bean depends on.</span>
         <span class="c1">// 处理依赖 如果有配置DependsOn这里会先初始化依赖类</span>
         <span class="nc">String</span><span class="o">[]</span> <span class="n">dependsOn</span> <span class="o">=</span> <span class="n">mbd</span><span class="o">.</span><span class="na">getDependsOn</span><span class="o">();</span>
         <span class="k">if</span> <span class="o">(</span><span class="n">dependsOn</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">dep</span> <span class="o">:</span> <span class="n">dependsOn</span><span class="o">)</span> <span class="o">{</span>
               <span class="c1">//利用dependentBeanMap可以判断出是否循环依赖</span>
               <span class="k">if</span> <span class="o">(</span><span class="n">isDependent</span><span class="o">(</span><span class="n">beanName</span><span class="o">,</span> <span class="n">dep</span><span class="o">))</span> <span class="o">{</span>
                  <span class="k">throw</span> <span class="k">new</span> <span class="nf">BeanCreationException</span><span class="o">(</span><span class="n">mbd</span><span class="o">.</span><span class="na">getResourceDescription</span><span class="o">(),</span> <span class="n">beanName</span><span class="o">,</span>
                        <span class="s">"Circular depends-on relationship between '"</span> <span class="o">+</span> <span class="n">beanName</span> <span class="o">+</span> <span class="s">"' and '"</span> <span class="o">+</span> <span class="n">dep</span> <span class="o">+</span> <span class="s">"'"</span><span class="o">);</span>
               <span class="o">}</span>
               <span class="n">registerDependentBean</span><span class="o">(</span><span class="n">dep</span><span class="o">,</span> <span class="n">beanName</span><span class="o">);</span>
               <span class="k">try</span> <span class="o">{</span>
                  <span class="c1">//递归调用 先创建依赖类</span>
                  <span class="n">getBean</span><span class="o">(</span><span class="n">dep</span><span class="o">);</span>
               <span class="o">}</span>
               <span class="k">catch</span> <span class="o">(</span><span class="nc">NoSuchBeanDefinitionException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
                  <span class="k">throw</span> <span class="k">new</span> <span class="nf">BeanCreationException</span><span class="o">(</span><span class="n">mbd</span><span class="o">.</span><span class="na">getResourceDescription</span><span class="o">(),</span> <span class="n">beanName</span><span class="o">,</span>
                        <span class="s">"'"</span> <span class="o">+</span> <span class="n">beanName</span> <span class="o">+</span> <span class="s">"' depends on missing bean '"</span> <span class="o">+</span> <span class="n">dep</span> <span class="o">+</span> <span class="s">"'"</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
               <span class="o">}</span>
            <span class="o">}</span>
         <span class="o">}</span>
         <span class="c1">// 如果是单例Bean</span>
         <span class="k">if</span> <span class="o">(</span><span class="n">mbd</span><span class="o">.</span><span class="na">isSingleton</span><span class="o">())</span> <span class="o">{</span>
            <span class="c1">//看下面单独介绍 创建一个单例对象并且返回</span>
            <span class="n">sharedInstance</span> <span class="o">=</span> <span class="n">getSingleton</span><span class="o">(</span><span class="n">beanName</span><span class="o">,</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
               <span class="k">try</span> <span class="o">{</span>
                  <span class="c1">//利用注册的信息创建Bean</span>
                  <span class="c1">//createBean中实现了lookup-method和replace-method</span>
                  <span class="c1">//和BeanPostProcessor</span>
                  <span class="c1">//以及创建实例</span>
                  <span class="c1">//填充属性 AutoWrite也是这里实现的</span>
                  <span class="k">return</span> <span class="nf">createBean</span><span class="o">(</span><span class="n">beanName</span><span class="o">,</span> <span class="n">mbd</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
               <span class="o">}</span>
               <span class="k">catch</span> <span class="o">(</span><span class="nc">BeansException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
                  <span class="c1">// Explicitly remove instance from singleton cache: It might have been put there</span>
                  <span class="c1">// eagerly by the creation process, to allow for circular reference resolution.</span>
                  <span class="c1">// Also remove any beans that received a temporary reference to the bean.</span>
                  <span class="n">destroySingleton</span><span class="o">(</span><span class="n">beanName</span><span class="o">);</span>
                  <span class="k">throw</span> <span class="n">ex</span><span class="o">;</span>
               <span class="o">}</span>
            <span class="o">});</span>
            <span class="c1">//同上</span>
            <span class="n">bean</span> <span class="o">=</span> <span class="n">getObjectForBeanInstance</span><span class="o">(</span><span class="n">sharedInstance</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">beanName</span><span class="o">,</span> <span class="n">mbd</span><span class="o">);</span>
         <span class="o">}</span>
         <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">mbd</span><span class="o">.</span><span class="na">isPrototype</span><span class="o">())</span> <span class="o">{</span>
            <span class="c1">// It's a prototype -&gt; create a new instance.</span>
            <span class="nc">Object</span> <span class="n">prototypeInstance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="k">try</span> <span class="o">{</span>
               <span class="n">beforePrototypeCreation</span><span class="o">(</span><span class="n">beanName</span><span class="o">);</span>
               <span class="n">prototypeInstance</span> <span class="o">=</span> <span class="n">createBean</span><span class="o">(</span><span class="n">beanName</span><span class="o">,</span> <span class="n">mbd</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">finally</span> <span class="o">{</span>
               <span class="n">afterPrototypeCreation</span><span class="o">(</span><span class="n">beanName</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">bean</span> <span class="o">=</span> <span class="n">getObjectForBeanInstance</span><span class="o">(</span><span class="n">prototypeInstance</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">beanName</span><span class="o">,</span> <span class="n">mbd</span><span class="o">);</span>
         <span class="o">}</span>
         <span class="c1">//自定义scope扩展</span>
         <span class="k">else</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">scopeName</span> <span class="o">=</span> <span class="n">mbd</span><span class="o">.</span><span class="na">getScope</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(!</span><span class="nc">StringUtils</span><span class="o">.</span><span class="na">hasLength</span><span class="o">(</span><span class="n">scopeName</span><span class="o">))</span> <span class="o">{</span>
               <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"No scope name defined for bean ´"</span> <span class="o">+</span> <span class="n">beanName</span> <span class="o">+</span> <span class="s">"'"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nc">Scope</span> <span class="n">scope</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">scopes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">scopeName</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">scope</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
               <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"No Scope registered for scope name '"</span> <span class="o">+</span> <span class="n">scopeName</span> <span class="o">+</span> <span class="s">"'"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">try</span> <span class="o">{</span>
               <span class="nc">Object</span> <span class="n">scopedInstance</span> <span class="o">=</span> <span class="n">scope</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">beanName</span><span class="o">,</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
                  <span class="n">beforePrototypeCreation</span><span class="o">(</span><span class="n">beanName</span><span class="o">);</span>
                  <span class="k">try</span> <span class="o">{</span>
                     <span class="k">return</span> <span class="nf">createBean</span><span class="o">(</span><span class="n">beanName</span><span class="o">,</span> <span class="n">mbd</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
                  <span class="o">}</span>
                  <span class="k">finally</span> <span class="o">{</span>
                     <span class="n">afterPrototypeCreation</span><span class="o">(</span><span class="n">beanName</span><span class="o">);</span>
                  <span class="o">}</span>
               <span class="o">});</span>
               <span class="n">bean</span> <span class="o">=</span> <span class="n">getObjectForBeanInstance</span><span class="o">(</span><span class="n">scopedInstance</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">beanName</span><span class="o">,</span> <span class="n">mbd</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">catch</span> <span class="o">(</span><span class="nc">IllegalStateException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
               <span class="k">throw</span> <span class="k">new</span> <span class="nf">ScopeNotActiveException</span><span class="o">(</span><span class="n">beanName</span><span class="o">,</span> <span class="n">scopeName</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
            <span class="o">}</span>
         <span class="o">}</span>
      <span class="o">}</span>
      <span class="k">catch</span> <span class="o">(</span><span class="nc">BeansException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
         <span class="n">beanCreation</span><span class="o">.</span><span class="na">tag</span><span class="o">(</span><span class="s">"exception"</span><span class="o">,</span> <span class="n">ex</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
         <span class="n">beanCreation</span><span class="o">.</span><span class="na">tag</span><span class="o">(</span><span class="s">"message"</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">ex</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()));</span>
         <span class="n">cleanupAfterBeanCreationFailure</span><span class="o">(</span><span class="n">beanName</span><span class="o">);</span>
         <span class="k">throw</span> <span class="n">ex</span><span class="o">;</span>
      <span class="o">}</span>
      <span class="k">finally</span> <span class="o">{</span>
         <span class="n">beanCreation</span><span class="o">.</span><span class="na">end</span><span class="o">();</span>
      <span class="o">}</span>
   <span class="o">}</span>
   <span class="c1">// Check if required type matches the type of the actual bean instance.</span>
   <span class="c1">// 检查类型是否符合</span>
   <span class="k">if</span> <span class="o">(</span><span class="n">requiredType</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">requiredType</span><span class="o">.</span><span class="na">isInstance</span><span class="o">(</span><span class="n">bean</span><span class="o">))</span> <span class="o">{</span>
      <span class="k">try</span> <span class="o">{</span>
         <span class="no">T</span> <span class="n">convertedBean</span> <span class="o">=</span> <span class="n">getTypeConverter</span><span class="o">().</span><span class="na">convertIfNecessary</span><span class="o">(</span><span class="n">bean</span><span class="o">,</span> <span class="n">requiredType</span><span class="o">);</span>
         <span class="k">if</span> <span class="o">(</span><span class="n">convertedBean</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">BeanNotOfRequiredTypeException</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">requiredType</span><span class="o">,</span> <span class="n">bean</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
         <span class="o">}</span>
         <span class="k">return</span> <span class="n">convertedBean</span><span class="o">;</span>
      <span class="o">}</span>
      <span class="k">catch</span> <span class="o">(</span><span class="nc">TypeMismatchException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
         <span class="k">if</span> <span class="o">(</span><span class="n">logger</span><span class="o">.</span><span class="na">isTraceEnabled</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">logger</span><span class="o">.</span><span class="na">trace</span><span class="o">(</span><span class="s">"Failed to convert bean '"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">"' to required type '"</span> <span class="o">+</span>
                  <span class="nc">ClassUtils</span><span class="o">.</span><span class="na">getQualifiedName</span><span class="o">(</span><span class="n">requiredType</span><span class="o">)</span> <span class="o">+</span> <span class="s">"'"</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
         <span class="o">}</span>
         <span class="k">throw</span> <span class="k">new</span> <span class="nf">BeanNotOfRequiredTypeException</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">requiredType</span><span class="o">,</span> <span class="n">bean</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
      <span class="o">}</span>
   <span class="o">}</span>
   <span class="k">return</span> <span class="o">(</span><span class="no">T</span><span class="o">)</span> <span class="n">bean</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="总结">总结</h3>

<p>SpringIOC大体上抽象成了两个部分一个注册器，一个是工厂，工厂通过注册器提供的信息创建Bean。</p>

<p>IOC的实现其实十分复杂，这里只是做了简单的概念性介绍，后续会单独去讲解BeanPostProcessor接口提供的扩展能力、各种事件通知、Aware接口、Bean初始化流程等等。</p>]]></content><author><name>凯帆</name><email>z@zhoukaifan.com</email></author><category term="Spring" /><summary type="html"><![CDATA[从接口开始]]></summary></entry><entry><title type="html">关于财务业务模型的思考</title><link href="/2020-04-27/%E5%85%B3%E4%BA%8E%E8%B4%A2%E5%8A%A1%E4%B8%9A%E5%8A%A1%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%80%9D%E8%80%83" rel="alternate" type="text/html" title="关于财务业务模型的思考" /><published>2020-04-27T00:00:00+08:00</published><updated>2020-04-27T00:00:00+08:00</updated><id>/2020-04-27/%E5%85%B3%E4%BA%8E%E8%B4%A2%E5%8A%A1%E4%B8%9A%E5%8A%A1%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%80%9D%E8%80%83</id><content type="html" xml:base="/2020-04-27/%E5%85%B3%E4%BA%8E%E8%B4%A2%E5%8A%A1%E4%B8%9A%E5%8A%A1%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%80%9D%E8%80%83"><![CDATA[<p>之前参与公司财务业务的开发，自己阅读《会计学基础》后，自己尝试设计了一下业务架构，现在整理记录一下。</p>

<h2 id="基本模型">基本模型</h2>

<h3 id="组织">组织</h3>

<p>在财务中，会计并不关心这个组织是做什么的，在财务系统开发中我们将门店 仓库 供应商等统称为组织这种级别的组织我们称之为3级组织
对于国家税务局来说，他并不关系每个一级组织的情况，他们所关系的是分公司公司及2级组织和1级组织
为了统一模型我们给每个公司建立一个虚拟子公司称之为本部子公司
以上说的公司就是子公司，总公司其实只是子公司的股东，在这套模型中作为对外投资关联
对于其他不完整的组织我们通过虚拟的方式使其变得完整</p>

<p><img src="../img/20200427230657238.png" alt="在这里插入图片描述" /></p>

<h3 id="交易">交易</h3>

<p>这里先忘记之前的交易的理解
我们这里的交易是指：两个组织之间发生的某种行为，这种行为涉及到双方资产与负债的变动，交易发生在3级组织之间，
我们之所以将交易的发生放在3级组织是应为现实生活中可是是去门店购买，大客户可由仓库发货，并不是分公司，但是3级组织作为2级组织的一部分在最总汇总时可以被归属到某个2级组织甚至1级组织
门店仓库这些不同类型是组织的一个tag，组织可以同时拥有多个tag</p>

<p><img src="../img/202004272308004.png" alt="在这里插入图片描述" /></p>

<h3 id="单据">单据</h3>

<p>在交易的过程中会出现一些文件信息用于记录交易这样行为的发生过程，这种文件信息我们称之为单据
像仓库间调拨，销售，验收，这些我们都称之为单据，发票作为一种特殊的单据也是单据的一种</p>

<p><img src="../img/2020042723085382.png" alt="在这里插入图片描述" /></p>

<h3 id="交易模型">交易模型</h3>

<p>交易的行为是可以被枚举的我们提前确定这个交易的过程，定义为交易模型
交易模型确认交易过程是如何发生的，产生什么单据，交易过程可以用于几级组织
整个交易的过程按照交易模板预先设置好的去执行</p>

<p><img src="../img/20200427230929632.png" alt="在这里插入图片描述" /></p>

<p>交易模板确定什么组织和什么组织之间可以发生什么交易通过组织tag确定</p>

<h2 id="业务视图举例说明">业务视图（举例说明）</h2>

<h3 id="定义">定义</h3>

<p>业务视图是在基本模型之上对于各种数据的处理过后生成的某种数据视图–报表
视图单据可以以来其他视图单据
处理过程包括人工审核等
直接视图是指不经过任何处理就生成的业务视图，如业务要看门店A的销售情况，可以直接查看基础模型的销售单，这个销售单在业务视图的展示需要通过直接视图进行展示
举例：如结算单，对账单，凭证</p>

<h3 id="结算单">结算单</h3>

<p>结算单的业务用途，结算某个子公司和供应商之间的会计期间的账务
描述过程为：通过某个子公司和某个供应商的预付款、发票、费用单、对账单进行结算，最终生成预付款单据视图
财务调整是结算单的一个处理过程
预付款和发票是基本模型中的数据
最后一个对账单是另一个业务视图，我们现在看来看一下</p>

<h3 id="对账单">对账单</h3>

<p>对账单是用于某个子公司和供应商之间的结算过程，最终生成结算单
对账单利用验收单，退货单，补救单这3个基础数据生成子公司和供应商之间的对账单
最终对账单提供给结算单支撑</p>]]></content><author><name>凯帆</name><email>z@zhoukaifan.com</email></author><category term="业务架构" /><summary type="html"><![CDATA[之前参与公司财务业务的开发，自己阅读《会计学基础》后，自己尝试设计了一下业务架构，现在整理记录一下。]]></summary></entry><entry><title type="html">Java虚拟机到底虚拟了什么</title><link href="/2020-04-18/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%B0%E5%BA%95%E8%99%9A%E6%8B%9F%E4%BA%86%E4%BB%80%E4%B9%88" rel="alternate" type="text/html" title="Java虚拟机到底虚拟了什么" /><published>2020-04-18T00:00:00+08:00</published><updated>2020-04-18T00:00:00+08:00</updated><id>/2020-04-18/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%B0%E5%BA%95%E8%99%9A%E6%8B%9F%E4%BA%86%E4%BB%80%E4%B9%88</id><content type="html" xml:base="/2020-04-18/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%B0%E5%BA%95%E8%99%9A%E6%8B%9F%E4%BA%86%E4%BB%80%E4%B9%88"><![CDATA[<p>最近阅读新版的《深入理解Java虚拟机》有了自己实现一个虚拟机的想法，在完成阶段性的目标后重新认识了一下JVM，希望记录并且分享。本文主要为了总结Java虚拟机是什么，本文并不会介绍内存，GC，类加载器这些面试类的“知识要点”，而是期望总结清楚最本质的东西。</p>
<h3 id="可执行文件与class文件">可执行文件与Class文件</h3>
<h5 id="我们先来看一段汇编代码">我们先来看一段汇编代码</h5>
<p>Hello, OS world!程序：</p>
<pre><code class="language-asm">    org 07c00h
    mov ax, cs
    mov ds, ax
    mov es, ax
    call DispStr
    jmp $
DispStr:
    mov ax, BootMessage
    mov bp, ax
    mov cx, 16
    mov ax, 01301h
    mov bx, 000ch
    mov dl, 0
    int 10h
    ret
BootMessage:    db  "Hello, OS world!"
times   510-($-$$)  db  0
dw  0xaa55
</code></pre>
<p>这段代码是在用于计算机的引导扇区中的，我们将它编译后保存在硬盘的引导扇区上让后设置BIOS从该硬盘启动，就会执行这段代码，在显示器上输出一个“Hello, OS world!”。</p>

<p>我们知道计算机在开机的时候会先执行BIOS的代码，这部分代码是由主板的厂商提供的预先保存在主板的ROM中，然后跳转到引导设备的07c00h地址开始执行指令，所以上述代码中我们使用org指令从07c00h开始分配存储空间，即mov ax, cs这个指令被保存在07c00h地址上。
这样我们就看到了最本质的程序，一段程序直接运行在物理主机上，没有Windows或者Linux这样的操作系统。</p>

<h5 id="现在我们回到class文件上">现在我们回到Class文件上</h5>
<p>我们用javap来看一段Hello world程序编译后class的结构
“javap -verbose Test”</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Classfile /Users/dim/IdeaProjects/untitled/target/classes/Test.class
  Last modified 2020年4月18日; size 515 bytes
  MD5 checksum ad0d0d889ae47100c8b9bdd620fb0948
  Compiled from "Test.java"
public class Test
  minor version: 0
  major version: 52
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #5                          // Test
  super_class: #6                         // java/lang/Object
  interfaces: 0, fields: 0, methods: 2, attributes: 1
Constant pool:
   #1 = Methodref          #6.#20         // java/lang/Object."&lt;init&gt;":()V
   #2 = Fieldref           #21.#22        // java/lang/System.out:Ljava/io/PrintStream;
   #3 = String             #23            // Hello world
   #4 = Methodref          #24.#25        // java/io/PrintStream.println:(Ljava/lang/String;)V
   #5 = Class              #26            // Test
   #6 = Class              #27            // java/lang/Object
   #7 = Utf8               &lt;init&gt;
   #8 = Utf8               ()V
   #9 = Utf8               Code
  #10 = Utf8               LineNumberTable
  #11 = Utf8               LocalVariableTable
  #12 = Utf8               this
  #13 = Utf8               LTest;
  #14 = Utf8               main
  #15 = Utf8               ([Ljava/lang/String;)V
  #16 = Utf8               args
  #17 = Utf8               [Ljava/lang/String;
  #18 = Utf8               SourceFile
  #19 = Utf8               Test.java
  #20 = NameAndType        #7:#8          // "&lt;init&gt;":()V
  #21 = Class              #28            // java/lang/System
  #22 = NameAndType        #29:#30        // out:Ljava/io/PrintStream;
  #23 = Utf8               Hello world
  #24 = Class              #31            // java/io/PrintStream
  #25 = NameAndType        #32:#33        // println:(Ljava/lang/String;)V
  #26 = Utf8               Test
  #27 = Utf8               java/lang/Object
  #28 = Utf8               java/lang/System
  #29 = Utf8               out
  #30 = Utf8               Ljava/io/PrintStream;
  #31 = Utf8               java/io/PrintStream
  #32 = Utf8               println
  #33 = Utf8               (Ljava/lang/String;)V
{
  public Test();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V
         4: return
      LineNumberTable:
        line 1: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   LTest;

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
         3: ldc           #3                  // String Hello world
         5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
         8: return
      LineNumberTable:
        line 3: 0
        line 4: 8
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  args   [Ljava/lang/String;
}
SourceFile: "Test.java"
</code></pre></div></div>
<p>当我们运行启动JVM的时候指定执行某个class或者Jar包，虚拟机就会从指定class的Main方法开始执行“java Test”</p>

<p>这个过程就好比我们将一个写有“Hello, OS world!”程序的设备安装到了物理机器上从BIOS指定从这个设备进行引导。在JVM启动时可以通过Jar包的META-INF目录读取配置的代码入口，也可以在启动JVM时直接指定。</p>

<p>事实上他们都是以同一种方式开始一段程序的执行，找到07c00h地址对应的指令或者Main方法的第一条指令，至于为什么是07c00h和Main方法，这更多是一种规范，技术上你可以开发一个新的BIOS程序或者JVM从你喜欢的地方开始执行。</p>

<p>有的人可能会觉得一段C代码的入口也是main函数为什么JVM不是类比一个操作系统呢？首先C代码中的main入口是提供给操作系统调用的，因为操作系统的本质是一个硬件的管理功能，JVM中的一些功能是类似于操作系统的功能，比如GC，但是本文不对这些功能做讲解是为了更好的体现JVM的本质（实际上，在阅读JVM规范的时候你会发现文档中很少有提及这些类似于操作系统的功能，像垃圾回收这些相关的文档可能需要去阅读各虚拟机的具体实现的文档如HotSpot，因为它们不是必须的）</p>
<h3 id="cpu结构与jvm结构">CPU结构与JVM结构</h3>

<p><img src="../img/aHR0cHM6Ly90aW1nc2EuYmFpZHUuY29tL3RpbWc_aW1hZ2UmcXVhbGl0eT04MCZzaXplPWI5OTk5XzEwMDAwJnNlYz0xNTg3MTk0Njg4NDg1JmRpPWRmOTM2NjIxZTEzMWYzMWI3OTgzYWZjYzAxYzA0ZWZiJmltZ3R5cGU9MCZzcmM9aHR0cDovL2dzczAuYmFpZHUuY29tLzk0bzNkU2FnX3hJNGtoR2tvOVdUQW5GNmh.jpeg" alt="在这里插入图片描述" /></p>

<p>这是我在网络上找的一个图片8086CPU的内部结构，我们试着解释一段汇编的代码</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mov ax, cs //将寄存器cs的值传送到ax
mov ds, ax//将寄存器ax的值传送到ds
mov es, ax//将寄存器ax的值传送到es
call DispStr//调用DispStr
</code></pre></div></div>

<p>其实这些CPU的指令都是做着这些非常基本的工作，移动某个寄存器的数据到另一个地方，从某个设备读取数据</p>

<p><img src="../img/20200418150152507.png" alt="在这里插入图片描述" /></p>

<p>我先不去管本文中不关心的部分
主要来看一下程序计数器和虚拟机栈（堆内存更像是一台计算机的主存）
我们知道程序计数器是一个线程私有的区域它主要用于表示当前执行到哪条指令，类似的功能在8086CPU上可以通过段地址寄存器加上IP寄存器或者某个偏移量</p>

<p><img src="../img/20200418143732575.png" alt="在这里插入图片描述" /></p>

<p>图中的部分最终输出的20地址就是JVM中程序计数器的工作
再来看虚拟机栈的内容</p>

<p><img src="../img/20200418144805313.png" alt="在这里插入图片描述" /></p>

<p>每次JAVA的方法调用都会产生一个栈针（实际上栈针的概念类似与CPU相应中断的时候保存上下文执行完中断后再返回的步骤），栈针不仅包含图中的信息但是我们目前关系的仅仅是操作数栈，JVM的指令基本都是通过操作数栈实现的，这里和CPU的结构有点不太一样，其实只是两种设计而已，他们实现相同的功能。</p>

<p>比如在CPU中我们可以用ADD指令进行加法运算</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>add ax,bx//将ax寄存器的值加上bx寄存器的值在赋值给ax
</code></pre></div></div>
<p>而对应的在JVM中我们可以做类似的加法运算</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iadd //从操作数栈中弹出两个int值相加后压入操作数栈
</code></pre></div></div>
<p>JVM的执行引擎类似与运算器和寄存器，但是他们采用了不同的实现。</p>

<h3 id="总结">总结</h3>
<p>JVM的本质其实是一个可以更具特定指令进行特定数据操作的程序，它使用软件模拟实现CPU中逻辑电路实现的基本指令功能，Java语言通过编译器将代码编译成这些最基本的二进制指令来告诉这个程序如何操作特定内存模型中的数据，通过对基本指令的组合实现一个较为复杂的方法，再通过对较为复杂方法的组合实现一个特定功能，业务就是这样被实现的。</p>]]></content><author><name>凯帆</name><email>z@zhoukaifan.com</email></author><category term="JVM" /><summary type="html"><![CDATA[最近阅读新版的《深入理解Java虚拟机》有了自己实现一个虚拟机的想法，在完成阶段性的目标后重新认识了一下JVM，希望记录并且分享。本文主要为了总结Java虚拟机是什么，本文并不会介绍内存，GC，类加载器这些面试类的“知识要点”，而是期望总结清楚最本质的东西。 可执行文件与Class文件 我们先来看一段汇编代码 Hello, OS world!程序： org 07c00h mov ax, cs mov ds, ax mov es, ax call DispStr jmp $ DispStr: mov ax, BootMessage mov bp, ax mov cx, 16 mov ax, 01301h mov bx, 000ch mov dl, 0 int 10h ret BootMessage: db "Hello, OS world!" times 510-($-$$) db 0 dw 0xaa55 这段代码是在用于计算机的引导扇区中的，我们将它编译后保存在硬盘的引导扇区上让后设置BIOS从该硬盘启动，就会执行这段代码，在显示器上输出一个“Hello, OS world!”。]]></summary></entry><entry><title type="html">关于售后业务的思考</title><link href="/2020-04-18/%E5%85%B3%E4%BA%8E%E5%94%AE%E5%90%8E%E4%B8%9A%E5%8A%A1%E7%9A%84%E6%80%9D%E8%80%83" rel="alternate" type="text/html" title="关于售后业务的思考" /><published>2020-04-18T00:00:00+08:00</published><updated>2020-04-18T00:00:00+08:00</updated><id>/2020-04-18/%E5%85%B3%E4%BA%8E%E5%94%AE%E5%90%8E%E4%B8%9A%E5%8A%A1%E7%9A%84%E6%80%9D%E8%80%83</id><content type="html" xml:base="/2020-04-18/%E5%85%B3%E4%BA%8E%E5%94%AE%E5%90%8E%E4%B8%9A%E5%8A%A1%E7%9A%84%E6%80%9D%E8%80%83"><![CDATA[<h3 id="背景">背景</h3>
<p>这两周为公司开发一个售后功能，开发完成后带来的思考
关于售后单创建流程的思考：
在实际的业务中不管是生鲜还是快递的售后单他们存在一定的共性，即某一商家对某一买家对于某次交易中出现的纠纷处理过程的记录，我们称为售后单。售后单的意义在于如何更好的支撑售后这一业务，而不是售后单本身。——售后单的本质和作用</p>

<p>其中我们可以发现对于售后业务必然存在商家、买家、订单，不过不同的商家和订单类型会带来不同的售后流程，发起时间等等。这时我们可以梳理出一个售后的基本工作，这里我个人不会考虑售后单应该有什么功能什么字段，而是售后业务需要什么，我们的售后单作为一种记录能否支撑该业务。这里的支撑也包含可扩展性。——即解决一个问题我们需要一个什么样的售后单</p>

<p>现在如何抽象一个售后单，让我们把重点放到售后业务本身，而不是售后单。快递、生鲜他们都是对于某次交易中不满意商品的协商处理过程。这两个业务场景中售后仅能对单个商品发起，但是并不是所有售后业务都是单商品售后，这让他们之间多了一些其他售后流程没有的共性，即单商品售后流程，代码实现上我们就可以抽象出一个最抽象的父类售后单，抽象类单商品售后单，然后才是快递售后单和生鲜售后单。售后流程中的各种操作过程作为售后单的方法被编码。其他视角其实也是相同的。另外从更广的角度来说对各种单据的抽象可以是的售后单被归类到某种单据的实现中去——抽象一个售后单</p>

<h3 id="总结">总结</h3>
<p>在面对这样的业务时，容易犯错就是将关注点本身放到售后单本身而不是售后业务本身，容易忽略一个事情就是，售后单本质上是现实生活中的人们为了更好的进行售后，而将售后业务抽象后产生的某种产物，售后单本身已经为我们实现售后功能做了很多工作，但是千万不能忘记一点，把关注点放到业务而不是数据，像售后单的状态代表的是当前售后处在什么环节，而不是真的表示这个售后单是什么状态。</p>]]></content><author><name>凯帆</name><email>z@zhoukaifan.com</email></author><category term="业务架构" /><summary type="html"><![CDATA[背景 这两周为公司开发一个售后功能，开发完成后带来的思考 关于售后单创建流程的思考： 在实际的业务中不管是生鲜还是快递的售后单他们存在一定的共性，即某一商家对某一买家对于某次交易中出现的纠纷处理过程的记录，我们称为售后单。售后单的意义在于如何更好的支撑售后这一业务，而不是售后单本身。——售后单的本质和作用]]></summary></entry></feed>